{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"advanced_model_e.ipynb의 사본","version":"0.3.2","provenance":[],"collapsed_sections":["HeP72FgU1FB1","CswEp2DE1IOe"],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"wGDLy_XM3epP","colab_type":"code","outputId":"d0e4b4d7-87b8-4e3a-871f-11cd6ba82d7f","executionInfo":{"status":"ok","timestamp":1567851412576,"user_tz":-540,"elapsed":200657,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sK-XT6Ys6EOG","colab_type":"code","outputId":"b8304f76-af6a-4810-e675-47b8f315bf55","executionInfo":{"status":"ok","timestamp":1567851414185,"user_tz":-540,"elapsed":202250,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["import pandas as pd\n","import numpy as np\n","from collections import defaultdict\n","import os\n","import gc\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.linear_model import Ridge\n","from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import StratifiedKFold\n","\n","from sklearn.model_selection import train_test_split\n","\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import RandomUnderSampler\n","from sklearn.metrics import f1_score\n","\n","from tqdm import tqdm\n","import joblib\n","\n","\n","# model\n","import lightgbm as lgb\n","\n","SEED=42\n","LABEL=None"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/externals/six.py:31: DeprecationWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", DeprecationWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"WPao6FY66MHm","colab_type":"code","colab":{}},"source":["path = '/content/drive/My Drive/bigcontest2019/'\n","os.chdir(path)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WKdVhJyK6MLE","colab_type":"code","colab":{}},"source":["train_activity = pd.read_csv('data/train/train_activity.csv').drop(columns='fishing')\n","train_combat = pd.read_csv('data/train/train_combat.csv')\n","train_payment = pd.read_csv('data/train/train_payment.csv')\n","train_pledge = pd.read_csv('data/train/train_pledge.csv').drop(columns=['combat_play_time', 'non_combat_play_time'])\n","train_trade = pd.read_csv('data/train/train_trade.csv')\n","\n","test1_activity = pd.read_csv('data/test/test1_activity.csv').drop(columns='fishing')\n","test1_combat = pd.read_csv('data/test/test1_combat.csv')\n","test1_payment = pd.read_csv('data/test/test1_payment.csv')\n","test1_pledge = pd.read_csv('data/test/test1_pledge.csv').drop(columns=['combat_play_time', 'non_combat_play_time'])\n","test1_trade = pd.read_csv('data/test/test1_trade.csv')\n","\n","test2_activity = pd.read_csv(path + 'data/test/test2_activity.csv').drop(columns='fishing')\n","test2_combat = pd.read_csv(path + 'data/test/test2_combat.csv')\n","test2_payment = pd.read_csv(path + 'data/test/test2_payment.csv')\n","test2_pledge = pd.read_csv(path + 'data/test/test2_pledge.csv').drop(columns=['combat_play_time', 'non_combat_play_time'])\n","test2_trade = pd.read_csv(path + 'data/test/test2_trade.csv')\n","\n","train_label = pd.read_csv('data/train/train_label.csv')\n","true_train_label = train_label.copy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DK_X8WqQf7Sr","colab_type":"code","colab":{}},"source":["class data_transform(object):\n","    def __init__(self, data):\n","        self.data = data\n","        \n","    def create_week(self):\n","        self.data['week'] = (self.data['day']-1)//7 + 1\n","        return self.data\n","    \n","    def activity_transform(self):\n","        temp_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        temp_df = pd.get_dummies(temp_df)\n","        \n","        for feature in temp_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day' or feature == 'char_id':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:        \n","            temp_df = temp_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            temp_df.columns = [i+j for i,j in temp_df.columns.ravel()]\n","        return temp_df\n","    \n","    def payment_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def trade_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        groupby_dict2 = defaultdict()\n","        \n","        output_df['time'] = output_df['time'].apply(lambda x: str(x)[:2])\n","        output_df[['time', 'type', 'server']] = output_df[['time', 'type', 'server']].astype(object)\n","        output_df = pd.get_dummies(output_df)\n","        output_df2 = output_df.copy()\n","        \n","        output_df = output_df.rename(columns={'source_acc_id':'acc_id'})\n","        output_df2 = output_df2.rename(columns={'target_acc_id':'acc_id'})\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'target_acc_id']:\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        for feature in output_df2.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'source_acc_id']:\n","                groupby_dict2[feature] = 'nunique'\n","            else:\n","                groupby_dict2[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df2 = output_df2.groupby(['acc_id', 'week']).agg(groupby_dict2).reset_index()\n","            output_df2.columns = [i+j for i,j in output_df2.columns.ravel()]\n","        \n","        output_df = pd.merge(output_df, output_df2, how='outer', on=['acc_id', 'week'])\n","        \n","        return output_df\n","    \n","    def combat_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server', 'class', 'level']] = output_df[['server', 'class', 'level']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def pledge_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server']] = output_df[['server']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'pledge_id']:\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        return output_df"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NQkPPQDz1kok","colab_type":"text"},"source":["## train"]},{"cell_type":"code","metadata":{"id":"0OrHwbMh1s7H","colab_type":"code","colab":{}},"source":["train_activity['game_money_change_abs'] = np.abs(train_activity['game_money_change'])\n","transform = data_transform(train_activity)\n","transform.create_week()\n","act_train = transform.activity_transform()\n","################################################################################################\n","transform = data_transform(train_payment)\n","transform.create_week()\n","pay_train = transform.payment_transform()\n","################################################################################################\n","trandform = data_transform(train_trade)\n","trandform.create_week()\n","tra_train = trandform.trade_transform()\n","################################################################################################\n","trandform = data_transform(train_combat)\n","trandform.create_week()\n","com_train = trandform.combat_transform()\n","################################################################################################\n","trandform = data_transform(train_pledge)\n","trandform.create_week()\n","ple_train = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hypv9jFf1tCF","colab_type":"text"},"source":["## test"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"rItgi3p4YG_Z","colab":{}},"source":["test1_activity['game_money_change_abs'] = np.abs(test1_activity['game_money_change'])\n","transform = data_transform(test1_activity)\n","transform.create_week()\n","act_test1 = transform.activity_transform()\n","\n","test2_activity['game_money_change_abs'] = np.abs(test2_activity['game_money_change'])\n","transform = data_transform(test2_activity)\n","transform.create_week()\n","act_test2 = transform.activity_transform()\n","################################################################################################\n","transform = data_transform(test1_payment)\n","transform.create_week()\n","pay_test1 = transform.payment_transform()\n","\n","transform = data_transform(test2_payment)\n","transform.create_week()\n","pay_test2 = transform.payment_transform()\n","################################################################################################\n","trandform = data_transform(test1_trade)\n","trandform.create_week()\n","tra_test1 = trandform.trade_transform()\n","\n","trandform = data_transform(test2_trade)\n","trandform.create_week()\n","tra_test2 = trandform.trade_transform()\n","################################################################################################\n","trandform = data_transform(test1_combat)\n","trandform.create_week()\n","com_test1 = trandform.combat_transform()\n","\n","trandform = data_transform(test2_combat)\n","trandform.create_week()\n","com_test2 = trandform.combat_transform()\n","################################################################################################\n","trandform = data_transform(test1_pledge)\n","trandform.create_week()\n","ple_test1 = trandform.pledge_transform()\n","\n","trandform = data_transform(test2_pledge)\n","trandform.create_week()\n","ple_test2 = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OFqYB4UI-hGa","colab_type":"text"},"source":["## model"]},{"cell_type":"code","metadata":{"id":"qXCL-5EcBvCn","colab_type":"code","colab":{}},"source":["train = pd.merge(pd.merge(pd.merge(pd.merge(act_train, pay_train, how='left', on=['acc_id', 'week']), tra_train, how='left', on=['acc_id', 'week']), com_train, how='left', on=['acc_id', 'week']), ple_train, how='left', on=['acc_id', 'week']).fillna(0)\n","test1 = pd.merge(pd.merge(pd.merge(pd.merge(act_test1, pay_test1, how='left', on=['acc_id', 'week']), tra_test1, how='left', on=['acc_id', 'week']), com_test1, how='left', on=['acc_id', 'week']), ple_test1, how='left', on=['acc_id', 'week']).fillna(0)\n","test2 = pd.merge(pd.merge(pd.merge(pd.merge(act_test2, pay_test2, how='left', on=['acc_id', 'week']), tra_test2, how='left', on=['acc_id', 'week']), com_test2, how='left', on=['acc_id', 'week']), ple_test2, how='left', on=['acc_id', 'week']).fillna(0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y3GOOs_PSSCI","colab_type":"code","colab":{}},"source":["features = ['acc_id','week','playtimesum']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"K7yTvJhSRTFf","colab_type":"code","outputId":"a8f0c8dd-1778-45db-b13f-5253a6234182","executionInfo":{"status":"ok","timestamp":1567854927202,"user_tz":-540,"elapsed":63005,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["train.shape, test1.shape, test2.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((149226, 1224), (71235, 1176), (70734, 1216))"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"P4z4t2W8YvIf","colab_type":"code","colab":{}},"source":["all_df = pd.concat([train[features],test1[features],test2[features]],axis=0).reset_index(drop=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8soP6G3uQDB-","colab_type":"code","outputId":"f90c1e7d-af9f-4deb-cae5-725e05e640fe","executionInfo":{"status":"ok","timestamp":1567853221808,"user_tz":-540,"elapsed":917,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["# all_df1 = pd.concat([train[['acc_id','week','playtimesum']],test1[['acc_id','week','playtimesum']]]).reset_index(drop=True)\n","# all_df2 =  pd.concat([train[['acc_id','week','playtimesum']],test2[['acc_id','week','playtimesum']]]).reset_index(drop=True)\n","# all_df1.colunms = ['acc_id','week','playtimesum']\n","# all_df2.colunms = ['acc_id','week','playtimesum']"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  after removing the cwd from sys.path.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"_bdDbhk6QbTI","colab_type":"code","colab":{}},"source":["from gensim.models.doc2vec import Doc2Vec, TaggedDocument\n","\n","def User2Vec(group_df,col):\n","\n","    tmp = group_df.pivot(index = 'acc_id', columns= 'week',values=col).fillna(0)\n","    tmp.columns = ['week'+str(x) for x in tmp.columns]\n","\n","    sim = []\n","    idx_lst = []\n","\n","    for idx, acc_id in enumerate(tmp.index):\n","        idx_lst.append(acc_id)\n","        sim.append(np.round(tmp.iloc[idx,:].values,2).astype(str).tolist())\n","\n","    documents = [TaggedDocument('acc_id_'+str(idx_lst[i]),doc) for i,doc in enumerate(sim)]\n","    model = Doc2Vec(documents, vector_size=2, window=3, min_count=20, workers=-1)\n","\n","    similiraty_dict = defaultdict(list)\n","\n","    for i in idx_lst:\n","        similiraty_dict[i]= model.infer_vector('acc_id_'+str(i)).tolist()\n","\n","    user2vec_df = pd.DataFrame(similiraty_dict).transpose()\n","    user2vec_df.columns=['infer_vec_{}'.format(i+1) for i in range(len(user2vec_df.columns))]\n","    user2vec_df.reset_index(inplace=True)\n","    user2vec_df.rename(columns = {'index':'acc_id'},inplace=True)\n","    # user2vec_df.rename({'index':'acc_id'},inplace=True)\n","\n","    return user2vec_df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dVrwuz1YUolp","colab_type":"code","colab":{}},"source":["u2v = User2Vec(all_df,'playtimesum')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"F4xpdJguXa3H","colab_type":"code","outputId":"7fdb3386-7cb8-41c6-f331-1d87cd7cae88","executionInfo":{"status":"ok","timestamp":1567858233564,"user_tz":-540,"elapsed":1582,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["u2v"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>infer_vec_1</th>\n","      <th>infer_vec_2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>-0.171933</td>\n","      <td>0.066319</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.205934</td>\n","      <td>0.123262</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>-0.081894</td>\n","      <td>0.037965</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>0.172007</td>\n","      <td>-0.194794</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7</td>\n","      <td>-0.109880</td>\n","      <td>0.092061</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>8</td>\n","      <td>-0.152275</td>\n","      <td>0.075744</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>9</td>\n","      <td>0.024425</td>\n","      <td>-0.009183</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>14</td>\n","      <td>0.116198</td>\n","      <td>0.146184</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>15</td>\n","      <td>-0.148329</td>\n","      <td>-0.134782</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>16</td>\n","      <td>0.119089</td>\n","      <td>0.215908</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>17</td>\n","      <td>-0.157396</td>\n","      <td>0.204241</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>18</td>\n","      <td>-0.223543</td>\n","      <td>-0.151168</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>19</td>\n","      <td>0.052027</td>\n","      <td>0.063474</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>20</td>\n","      <td>0.225036</td>\n","      <td>-0.079857</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>21</td>\n","      <td>-0.011630</td>\n","      <td>0.076490</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>22</td>\n","      <td>-0.016353</td>\n","      <td>-0.085943</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>24</td>\n","      <td>0.095263</td>\n","      <td>-0.036133</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>26</td>\n","      <td>-0.169674</td>\n","      <td>-0.223709</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>27</td>\n","      <td>0.043864</td>\n","      <td>0.242089</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>28</td>\n","      <td>-0.115163</td>\n","      <td>0.061529</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>31</td>\n","      <td>0.172768</td>\n","      <td>-0.051040</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>32</td>\n","      <td>0.033538</td>\n","      <td>0.106034</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>38</td>\n","      <td>-0.151547</td>\n","      <td>0.090138</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>39</td>\n","      <td>-0.107037</td>\n","      <td>0.181678</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>41</td>\n","      <td>0.176588</td>\n","      <td>0.102475</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>43</td>\n","      <td>0.003782</td>\n","      <td>0.006038</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>44</td>\n","      <td>0.129263</td>\n","      <td>-0.154145</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>45</td>\n","      <td>0.020186</td>\n","      <td>-0.195629</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>49</td>\n","      <td>0.066676</td>\n","      <td>-0.083289</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>50</td>\n","      <td>0.239638</td>\n","      <td>0.016220</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>79970</th>\n","      <td>130432</td>\n","      <td>0.033692</td>\n","      <td>0.193258</td>\n","    </tr>\n","    <tr>\n","      <th>79971</th>\n","      <td>130433</td>\n","      <td>-0.035993</td>\n","      <td>-0.205747</td>\n","    </tr>\n","    <tr>\n","      <th>79972</th>\n","      <td>130434</td>\n","      <td>0.204127</td>\n","      <td>0.205586</td>\n","    </tr>\n","    <tr>\n","      <th>79973</th>\n","      <td>130435</td>\n","      <td>0.216167</td>\n","      <td>-0.128846</td>\n","    </tr>\n","    <tr>\n","      <th>79974</th>\n","      <td>130436</td>\n","      <td>0.006914</td>\n","      <td>-0.069188</td>\n","    </tr>\n","    <tr>\n","      <th>79975</th>\n","      <td>130438</td>\n","      <td>0.154903</td>\n","      <td>0.146544</td>\n","    </tr>\n","    <tr>\n","      <th>79976</th>\n","      <td>130439</td>\n","      <td>-0.092383</td>\n","      <td>-0.105916</td>\n","    </tr>\n","    <tr>\n","      <th>79977</th>\n","      <td>130441</td>\n","      <td>-0.170208</td>\n","      <td>0.185383</td>\n","    </tr>\n","    <tr>\n","      <th>79978</th>\n","      <td>130443</td>\n","      <td>0.040827</td>\n","      <td>0.047514</td>\n","    </tr>\n","    <tr>\n","      <th>79979</th>\n","      <td>130445</td>\n","      <td>-0.219514</td>\n","      <td>-0.082078</td>\n","    </tr>\n","    <tr>\n","      <th>79980</th>\n","      <td>130447</td>\n","      <td>-0.144014</td>\n","      <td>0.145226</td>\n","    </tr>\n","    <tr>\n","      <th>79981</th>\n","      <td>130448</td>\n","      <td>0.180021</td>\n","      <td>-0.116486</td>\n","    </tr>\n","    <tr>\n","      <th>79982</th>\n","      <td>130449</td>\n","      <td>0.151099</td>\n","      <td>-0.043283</td>\n","    </tr>\n","    <tr>\n","      <th>79983</th>\n","      <td>130450</td>\n","      <td>-0.087183</td>\n","      <td>-0.033081</td>\n","    </tr>\n","    <tr>\n","      <th>79984</th>\n","      <td>130453</td>\n","      <td>-0.094196</td>\n","      <td>-0.119892</td>\n","    </tr>\n","    <tr>\n","      <th>79985</th>\n","      <td>130454</td>\n","      <td>-0.099524</td>\n","      <td>0.168549</td>\n","    </tr>\n","    <tr>\n","      <th>79986</th>\n","      <td>130458</td>\n","      <td>0.046981</td>\n","      <td>-0.061475</td>\n","    </tr>\n","    <tr>\n","      <th>79987</th>\n","      <td>130459</td>\n","      <td>-0.140863</td>\n","      <td>0.014210</td>\n","    </tr>\n","    <tr>\n","      <th>79988</th>\n","      <td>130461</td>\n","      <td>-0.189474</td>\n","      <td>0.104217</td>\n","    </tr>\n","    <tr>\n","      <th>79989</th>\n","      <td>130462</td>\n","      <td>-0.039380</td>\n","      <td>0.119799</td>\n","    </tr>\n","    <tr>\n","      <th>79990</th>\n","      <td>130463</td>\n","      <td>0.006960</td>\n","      <td>0.236774</td>\n","    </tr>\n","    <tr>\n","      <th>79991</th>\n","      <td>130465</td>\n","      <td>-0.240175</td>\n","      <td>-0.007464</td>\n","    </tr>\n","    <tr>\n","      <th>79992</th>\n","      <td>130466</td>\n","      <td>0.158988</td>\n","      <td>0.164023</td>\n","    </tr>\n","    <tr>\n","      <th>79993</th>\n","      <td>130467</td>\n","      <td>-0.084165</td>\n","      <td>-0.177054</td>\n","    </tr>\n","    <tr>\n","      <th>79994</th>\n","      <td>130468</td>\n","      <td>-0.196990</td>\n","      <td>0.100398</td>\n","    </tr>\n","    <tr>\n","      <th>79995</th>\n","      <td>130469</td>\n","      <td>0.227466</td>\n","      <td>-0.195867</td>\n","    </tr>\n","    <tr>\n","      <th>79996</th>\n","      <td>130470</td>\n","      <td>-0.155099</td>\n","      <td>-0.206280</td>\n","    </tr>\n","    <tr>\n","      <th>79997</th>\n","      <td>130471</td>\n","      <td>-0.107458</td>\n","      <td>0.176739</td>\n","    </tr>\n","    <tr>\n","      <th>79998</th>\n","      <td>130473</td>\n","      <td>0.235737</td>\n","      <td>0.214701</td>\n","    </tr>\n","    <tr>\n","      <th>79999</th>\n","      <td>130474</td>\n","      <td>0.194713</td>\n","      <td>-0.081154</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>80000 rows × 3 columns</p>\n","</div>"],"text/plain":["       acc_id  infer_vec_1  infer_vec_2\n","0           1    -0.171933     0.066319\n","1           2     0.205934     0.123262\n","2           3    -0.081894     0.037965\n","3           5     0.172007    -0.194794\n","4           7    -0.109880     0.092061\n","5           8    -0.152275     0.075744\n","6           9     0.024425    -0.009183\n","7          14     0.116198     0.146184\n","8          15    -0.148329    -0.134782\n","9          16     0.119089     0.215908\n","10         17    -0.157396     0.204241\n","11         18    -0.223543    -0.151168\n","12         19     0.052027     0.063474\n","13         20     0.225036    -0.079857\n","14         21    -0.011630     0.076490\n","15         22    -0.016353    -0.085943\n","16         24     0.095263    -0.036133\n","17         26    -0.169674    -0.223709\n","18         27     0.043864     0.242089\n","19         28    -0.115163     0.061529\n","20         31     0.172768    -0.051040\n","21         32     0.033538     0.106034\n","22         38    -0.151547     0.090138\n","23         39    -0.107037     0.181678\n","24         41     0.176588     0.102475\n","25         43     0.003782     0.006038\n","26         44     0.129263    -0.154145\n","27         45     0.020186    -0.195629\n","28         49     0.066676    -0.083289\n","29         50     0.239638     0.016220\n","...       ...          ...          ...\n","79970  130432     0.033692     0.193258\n","79971  130433    -0.035993    -0.205747\n","79972  130434     0.204127     0.205586\n","79973  130435     0.216167    -0.128846\n","79974  130436     0.006914    -0.069188\n","79975  130438     0.154903     0.146544\n","79976  130439    -0.092383    -0.105916\n","79977  130441    -0.170208     0.185383\n","79978  130443     0.040827     0.047514\n","79979  130445    -0.219514    -0.082078\n","79980  130447    -0.144014     0.145226\n","79981  130448     0.180021    -0.116486\n","79982  130449     0.151099    -0.043283\n","79983  130450    -0.087183    -0.033081\n","79984  130453    -0.094196    -0.119892\n","79985  130454    -0.099524     0.168549\n","79986  130458     0.046981    -0.061475\n","79987  130459    -0.140863     0.014210\n","79988  130461    -0.189474     0.104217\n","79989  130462    -0.039380     0.119799\n","79990  130463     0.006960     0.236774\n","79991  130465    -0.240175    -0.007464\n","79992  130466     0.158988     0.164023\n","79993  130467    -0.084165    -0.177054\n","79994  130468    -0.196990     0.100398\n","79995  130469     0.227466    -0.195867\n","79996  130470    -0.155099    -0.206280\n","79997  130471    -0.107458     0.176739\n","79998  130473     0.235737     0.214701\n","79999  130474     0.194713    -0.081154\n","\n","[80000 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"id":"w2pX90f5Uoix","colab_type":"code","colab":{}},"source":["sns.scatterplot(u2v[],u2v[0])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dHFB2ZlQUofs","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LEnYCT3R1Ees","colab_type":"code","colab":{}},"source":["class model(object):\n","    def __init__(self, train_data, train_label, test1_data, test2_data, kind, folds, seed):\n","        self.train_data = train_data.fillna(0)\n","        self.train_label = train_label\n","        self.test1_data = test1_data.fillna(0)\n","        self.test2_data = test2_data.fillna(0)\n","        self.features_ = train_data[list(set(train_data.columns) & set(test1_data.columns) & set(test2_data.columns))].drop(columns=['acc_id', 'week']).columns\n","        self.kind = kind\n","        self.lgb_model_st = defaultdict()\n","        self.lgb_model_tas = defaultdict()\n","        self.rf_model_st = defaultdict()\n","        self.rf_model_tas = defaultdict()\n","        self.true_index = defaultdict()\n","        self.folds = folds\n","        self.seed = seed\n","        self.model = None\n","    \n","    \n","    \n","    def labeling(self):\n","        self.train_data = pd.merge(self.train_data, self.train_label[['acc_id', 'survival_time']], how='left', on='acc_id').dropna().reset_index(drop=True)\n","        for week in range(1, 5):\n","            self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            \n","    def labeling_tas(self, payment):\n","        self.train_data.drop(columns='survival_time', inplace=True)\n","        self.train_data = pd.merge(self.train_data, self.train_label, how='left', on='acc_id').dropna().reset_index(drop=True)\n","        self.train_data['adjust_survival_time'] = self.train_data['survival_time'] + self.train_data['week']*7\n","        \n","        def payment_transform(data):\n","            data['week'] = (data['day']-1)//7 + 1\n","            data = data.groupby(['acc_id', 'week']).sum().reset_index()\n","            return data\n","        payment = payment_transform(payment)\n","        \n","        def temp_func(data):\n","            if data['adjust_survival_time']>64:\n","                over_value = data['adjust_survival_time'] - 64\n","                data['adjust_survival_time'] = data['survival_time'] - over_value\n","            else:\n","                data['adjust_survival_time'] = data['survival_time']\n","            return data['adjust_survival_time']\n","        \n","        self.train_data['adjust_survival_time'] = self.train_data[['survival_time', 'adjust_survival_time']].apply(temp_func, axis=1)\n","        self.train_data['payment'] = 0\n","        \n","        for week in range(1, 4):\n","            self.train_data.loc[self.train_data['week']==week, 'payment'] = pd.merge(self.train_data.loc[self.train_data['week']==week, 'acc_id'], \n","                                                                                     payment[payment['week']>week].groupby(\n","                                                                                         ['acc_id'])['amount_spent'].sum().reset_index().rename(columns={'amount_spent':'payment'}), \n","                                                                                     how='left', on='acc_id')['payment']\n","            self.train_data = self.train_data.fillna(0)\n","        else:\n","            self.train_data['total_amount_spent'] = self.train_data['amount_spent'] * self.train_data['adjust_survival_time'] + self.train_data['payment']\n","            self.train_data = self.train_data.drop(columns=['amount_spent', 'payment'])\n","            for week in range(1, 5):\n","                self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            else:\n","                self.train_data = self.train_data.drop(columns=['adjust_survival_time', 'survival_time'])\n","                \n","    \n","    \n","    \n","    \n","    \n","    \n","\n","\n","    def train_st(self, params, iteration, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        for idx, true in enumerate(np.unique(self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x))):\n","            self.true_index[true] = idx\n","        else:\n","            self.train_data[LABEL] = self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x).apply(lambda x: self.true_index[x])\n","            \n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        rus = RandomUnderSampler(random_state=self.seed)\n","        for idx, (trn_idx, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","\n","            temp_train_data = pd.DataFrame()\n","            X, y = rus.fit_resample(self.train_data.drop(columns='survival_time'), self.train_data['survival_time'])\n","            temp_train_data = pd.DataFrame(np.concatenate([X, y.reshape(-1, 1)], 1))\n","            temp_train_data.columns = self.train_data.columns\n","            \n","            trn_label = temp_train_data[LABEL]\n","            val_label = self.train_data.loc[val_idx, LABEL]\n","            \n","            if self.model=='lgb':\n","                train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","                valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","                lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 150, verbose_eval=500)\n","                self.lgb_model_st['model'+str(idx)] = lgb_model\n","                joblib.dump(lgb_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_st_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","                \n","            elif self.model=='rf':\n","                rf_model = RandomForestClassifier(n_estimators=1000, random_state=self.seed, max_depth=8).fit(temp_train_data[self.features_], trn_label)\n","                self.rf_model_st['model'+str(idx)] = rf_model\n","                joblib.dump(rf_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_st_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","    \n","    def train_tas(self, params, iteration, model):\n","        np.random.seed(self.seed)\n","        LABEL='total_amount_spent'\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (trn_idx, val_idx) in enumerate(kf.split(self.train_data)):\n","            \n","            temp_train_data = pd.DataFrame()\n","            round_basis=1;SIZE=46\n","            for round_value in np.round(self.train_data['total_amount_spent'], round_basis).value_counts().index:\n","                temp_df = self.train_data.loc[trn_idx][np.round(self.train_data.loc[trn_idx, 'total_amount_spent'], round_basis).isin([round_value])]\n","                try:\n","                    temp_df = temp_df.loc[np.random.choice(temp_df.index, size=SIZE, replace=False)]\n","                except:\n","                    pass\n","                temp_train_data = pd.concat([temp_train_data, temp_df]).reset_index(drop=True)\n","            else:\n","                temp_train_data = temp_train_data[temp_train_data['total_amount_spent']<30].reset_index(drop=True)\n","                \n","                trn_label = temp_train_data[LABEL]\n","                val_label = self.train_data.loc[val_idx, LABEL]\n","                if self.model =='lgb':\n","                    train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","                    valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","                    lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 1000, verbose_eval=3000)\n","                    self.lgb_model_tas['model'+str(idx)] = lgb_model\n","                    joblib.dump(lgb_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_tas_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","                elif self.model =='rf':\n","                    rf_model = RandomForestRegressor(n_estimators=200, random_state=self.seed, max_depth=8).fit(temp_train_data[self.features_], trn_label)\n","                    self.rf_model_tas['model'+str(idx)] = rf_model\n","                    joblib.dump(rf_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_tas_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","                \n","\n","                \n","                \n","    \n","    def infer_oof(self, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        oof = np.zeros(len(self.train_data))\n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","\n","        for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            if self.model=='lgb':\n","                oof[val_idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_]), axis=1)\n","            elif self.model=='rf':\n","                oof[val_idx] = self.rf_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","            self.oof = oof.copy()\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:    \n","                self.oof['survival_time'] = self.oof['survival_time'].apply(lambda x: temp_dict[x])\n","                self.oof['infer_survival_time'] = self.oof['infer_survival_time'].apply(lambda x: temp_dict[x])\n","                return self.oof\n","    def infer_tas_oof(self, model):\n","        LABEL='total_amount_spent'\n","        oof = np.zeros(len(self.train_data))\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","            valid_df = self.train_data.loc[val_idx]\n","            if self.model=='lgb':\n","                oof[val_idx] = self.lgb_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","            elif self.model=='rf':\n","                oof[val_idx] = self.rf_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","            self.oof_tas = oof\n","            return self.oof_tas\n","                \n","    \n","    \n","    \n","    \n","    \n","    \n","    \n","    def infer_pred(self):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([len(test1), self.folds])\n","        pred2 = np.zeros([len(test2), self.folds])\n","        \n","        for idx in range(self.folds):\n","            if self.model=='lgb':\n","                pred1[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test1[self.features_]), axis=1)\n","                pred2[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test2[self.features_]), axis=1)\n","            elif self.model=='rf':\n","                pred1[:, idx] = self.rf_model_st['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_st['model'+str(idx)].predict(test2[self.features_])\n","        else:\n","            test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","            test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:\n","                for i in range(5):\n","                    test1[i] = test1[i].apply(lambda x: temp_dict[x])\n","                    test2[i] = test2[i].apply(lambda x: temp_dict[x])\n","                else:\n","                    self.pred_test1 = test1\n","                    self.pred_test2 = test2    \n","                    return self.pred_test1, self.pred_test2\n","    \n","    def infer_tas_pred(self):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([len(test1), self.folds])\n","        pred2 = np.zeros([len(test2), self.folds])\n","        \n","        for idx in range(self.folds):\n","            if self.model=='lgb':\n","                pred1[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test2[self.features_])\n","            elif self.model=='rf':\n","                pred1[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test2[self.features_])\n","            pred1[:, idx][pred1[:, idx]<0] = 0\n","            pred2[:, idx][pred2[:, idx]<0] = 0\n","        else:\n","            test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","            test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            return test1, test2\n","        \n","\n","        \n","        \n","        \n","        \n","    def load(self, return_data):\n","        if return_data=='train':\n","            return self.train_data\n","        elif return_data=='model_st':\n","            return self.lgb_model_st\n","        elif return_data=='model_tas':\n","            return self.lgb_model_tas\n","        elif return_data=='true_dict':\n","            return self.true_index\n","        elif return_data=='feature':\n","            return self.features_\n","        \n"," \n","\n","\n","    def joblib_load_oof(self, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        \n","        for idx, true in enumerate(np.unique(self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x))):\n","            self.true_index[true] = idx\n","        else:\n","            self.train_data[LABEL] = self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x).apply(lambda x: self.true_index[x])\n","            \n","        oof = np.zeros(len(self.train_data))\n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","\n","        for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            if self.model=='lgb':\n","                lgb_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_st_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = np.argmax(lgb_model.predict(self.train_data.loc[val_idx, self.features_]), axis=1)\n","            elif self.model=='rf':\n","                rf_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_st_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = rf_model.predict(self.train_data.loc[val_idx, self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","            self.oof = oof.copy()\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:    \n","                self.oof['survival_time'] = self.oof['survival_time'].apply(lambda x: temp_dict[x])\n","                self.oof['infer_survival_time'] = self.oof['infer_survival_time'].apply(lambda x: temp_dict[x])\n","                return self.oof\n","            \n","    def joblib_load_tas_oof(self, model):\n","        LABEL='total_amount_spent'\n","        oof = np.zeros(len(self.train_data))\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","            valid_df = self.train_data.loc[val_idx]\n","            if self.model=='lgb':\n","                lgb_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_tas_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = lgb_model.predict(valid_df[self.features_])\n","            elif self.model=='rf':\n","                rf_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_tas_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = rf_model.predict(valid_df[self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","            self.oof_tas = oof\n","            return self.oof_tas\n","                "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HeP72FgU1FB1","colab_type":"text"},"source":["### parameters"]},{"cell_type":"code","metadata":{"id":"8tQTscQS0_x-","colab_type":"code","colab":{}},"source":["PARAMS_ST = {\n","    'objective':'multiclass',\n","    'num_class':11,\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.02,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'seed':SEED\n","}\n","\n","PARAMS_TAS = {\n","    'objective':'regression',\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.02,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'metrics':'rmse',\n","    'seed':SEED\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CswEp2DE1IOe","colab_type":"text"},"source":["## execute"]},{"cell_type":"code","metadata":{"id":"gYxLnM8ZfKoS","colab_type":"code","colab":{}},"source":["TYPE='activity'\n","FOLDS=5\n","SEED=42\n","select_model='lgb'\n","\n","activity_model = model(act_train, train_label, act_test1, act_test2, TYPE, FOLDS, SEED)\n","activity_model.labeling()\n","activity_model.train_st(PARAMS_ST, 5000, select_model)\n","act_oof_st = activity_model.infer_oof(select_model)\n","\n","activity_model.labeling_tas(train_payment)\n","activity_model.train_tas(PARAMS_TAS, 50000, select_model)\n","act_oof_tas = activity_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vpMM1PSwg5eO","colab_type":"code","colab":{}},"source":["TYPE='payment'\n","\n","payment_model = model(pay_train, train_label, pay_test1, pay_test2, TYPE, FOLDS, SEED)\n","payment_model.labeling()\n","payment_model.train_st(PARAMS_ST, 5000, select_model)\n","pay_oof_st = payment_model.infer_oof(select_model)\n","\n","payment_model.labeling_tas(train_payment)\n","payment_model.train_tas(PARAMS_TAS, 50000, select_model)\n","pay_oof_tas = payment_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lP_Qtd3bg5jg","colab_type":"code","colab":{}},"source":["TYPE='trade'\n","\n","trade_model = model(tra_train, train_label, tra_test1, tra_test2, TYPE, FOLDS, SEED)\n","trade_model.labeling()\n","trade_model.train_st(PARAMS_ST, 5000, select_model)\n","tra_oof_st = trade_model.infer_oof(select_model)\n","\n","trade_model.labeling_tas(train_payment)\n","trade_model.train_tas(PARAMS_TAS, 50000, select_model)\n","tra_oof_tas = trade_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q3wJbMAJg5n4","colab_type":"code","colab":{}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE, FOLDS, SEED)\n","combat_model.labeling()\n","combat_model.train_st(PARAMS_ST, 5000, select_model)\n","com_oof_st = combat_model.infer_oof(select_model)\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.train_tas(PARAMS_TAS, 50000, select_model)\n","com_oof_tas = combat_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4BkYGjHXg5rJ","colab_type":"code","colab":{}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE, FOLDS, SEED)\n","pledge_model.labeling()\n","pledge_model.train_st(PARAMS_ST, 5000, select_model)\n","ple_oof_st = pledge_model.infer_oof(select_model)\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.train_tas(PARAMS_TAS, 5000, select_model)\n","ple_oof_tas = pledge_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ij0L4-T_OGKL","colab_type":"text"},"source":["## main"]},{"cell_type":"code","metadata":{"id":"jGyzJJ8FJyRc","colab_type":"code","outputId":"7ebbab30-65f0-4838-f7d4-780fa4e3bfea","executionInfo":{"status":"ok","timestamp":1567850322531,"user_tz":-540,"elapsed":708,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["pd.get_dummies(train.groupby('acc_id')['week'].first()).reset_index()\n","\n","\n","# pd.merge(train, train.groupby('acc_id')['week'].first().reset_index(), how='left', on='acc_id')"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>21</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>38</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>41</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>43</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>50</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>53</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>54</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>59</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>62</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>63</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>65</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>66</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>67</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>75</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>77</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>79</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>81</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>86</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>91</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>92</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>97</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>98</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39970</th>\n","      <td>130383</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39971</th>\n","      <td>130384</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39972</th>\n","      <td>130386</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39973</th>\n","      <td>130390</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39974</th>\n","      <td>130391</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39975</th>\n","      <td>130392</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39976</th>\n","      <td>130398</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39977</th>\n","      <td>130401</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39978</th>\n","      <td>130403</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39979</th>\n","      <td>130405</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39980</th>\n","      <td>130408</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39981</th>\n","      <td>130411</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39982</th>\n","      <td>130413</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39983</th>\n","      <td>130414</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39984</th>\n","      <td>130415</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39985</th>\n","      <td>130416</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39986</th>\n","      <td>130420</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39987</th>\n","      <td>130433</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39988</th>\n","      <td>130434</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39989</th>\n","      <td>130445</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39990</th>\n","      <td>130447</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39991</th>\n","      <td>130449</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39992</th>\n","      <td>130459</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39993</th>\n","      <td>130461</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39994</th>\n","      <td>130462</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39995</th>\n","      <td>130463</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39996</th>\n","      <td>130468</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39997</th>\n","      <td>130469</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39998</th>\n","      <td>130470</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39999</th>\n","      <td>130473</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>40000 rows × 5 columns</p>\n","</div>"],"text/plain":["       acc_id  1  2  3  4\n","0           2  1  0  0  0\n","1           5  0  1  0  0\n","2           8  1  0  0  0\n","3          17  1  0  0  0\n","4          20  1  0  0  0\n","5          21  1  0  0  0\n","6          31  1  0  0  0\n","7          38  1  0  0  0\n","8          41  0  0  0  1\n","9          43  1  0  0  0\n","10         50  1  0  0  0\n","11         53  1  0  0  0\n","12         54  1  0  0  0\n","13         59  1  0  0  0\n","14         62  1  0  0  0\n","15         63  1  0  0  0\n","16         65  1  0  0  0\n","17         66  1  0  0  0\n","18         67  1  0  0  0\n","19         69  1  0  0  0\n","20         75  1  0  0  0\n","21         76  1  0  0  0\n","22         77  1  0  0  0\n","23         79  1  0  0  0\n","24         81  1  0  0  0\n","25         86  1  0  0  0\n","26         91  1  0  0  0\n","27         92  1  0  0  0\n","28         97  1  0  0  0\n","29         98  1  0  0  0\n","...       ... .. .. .. ..\n","39970  130383  1  0  0  0\n","39971  130384  0  0  0  1\n","39972  130386  1  0  0  0\n","39973  130390  1  0  0  0\n","39974  130391  1  0  0  0\n","39975  130392  1  0  0  0\n","39976  130398  1  0  0  0\n","39977  130401  1  0  0  0\n","39978  130403  1  0  0  0\n","39979  130405  1  0  0  0\n","39980  130408  1  0  0  0\n","39981  130411  1  0  0  0\n","39982  130413  1  0  0  0\n","39983  130414  1  0  0  0\n","39984  130415  1  0  0  0\n","39985  130416  1  0  0  0\n","39986  130420  1  0  0  0\n","39987  130433  1  0  0  0\n","39988  130434  1  0  0  0\n","39989  130445  1  0  0  0\n","39990  130447  1  0  0  0\n","39991  130449  1  0  0  0\n","39992  130459  1  0  0  0\n","39993  130461  0  0  0  1\n","39994  130462  1  0  0  0\n","39995  130463  1  0  0  0\n","39996  130468  0  0  0  1\n","39997  130469  1  0  0  0\n","39998  130470  1  0  0  0\n","39999  130473  1  0  0  0\n","\n","[40000 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"7nIqItZ2OSLU","colab_type":"code","outputId":"6934959b-6484-41dc-a974-e6ec6cfbba11","executionInfo":{"status":"ok","timestamp":1567847936066,"user_tz":-540,"elapsed":3127976,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["fis = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/feature_importance/feature_importance.ckpt\")\n","fis = fis.loc[fis['Value']>25, 'Feature'].tolist()\n","fis.extend(['acc_id', 'week'])\n","\n","def feature_selection(data, fis):\n","    df = data.copy()\n","    \n","    sum_columns = df.columns[[column[-3:]=='sum' for column in df.columns]]\n","    df = df[df.columns[(pd.Series(df.columns).isin(fis)) | (pd.Series(df.columns).isin(sum_columns))]]\n","    \n","    playtimesum = df['playtimesum']\n","    for column in sum_columns[1:]:\n","        df['derive' + str(column)] = df[column]/playtimesum\n","    else:\n","        df = df[fis]\n","        return df\n","\n","TYPE='activity'\n","FOLDS=5\n","SEED=42\n","select_model='rf'\n","\n","main_model = model(feature_selection(train, fis), train_label, feature_selection(test1, fis), feature_selection(test2, fis), TYPE, FOLDS, SEED)\n","print('start main_model')\n","main_model.labeling()\n","main_model.train_st(PARAMS_ST, 5000, select_model)\n","# oof_st = main_model.infer_oof(select_model)\n","\n","main_model.labeling_tas(train_payment)\n","main_model.train_tas(PARAMS_TAS, 50000, select_model)\n","# oof_tas = main_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["start main_model\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kiLOrnejjfHC","colab_type":"code","outputId":"8a03d4f8-23a6-4d15-f64e-e0eb9dd75bba","executionInfo":{"status":"ok","timestamp":1567849432116,"user_tz":-540,"elapsed":225151,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["fis = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/feature_importance/feature_importance.ckpt\")\n","fis = fis.loc[fis['Value']>25, 'Feature'].tolist()\n","fis.extend(['acc_id', 'week'])\n","\n","def feature_selection(data, fis):\n","    df = data.copy()\n","    \n","    sum_columns = df.columns[[column[-3:]=='sum' for column in df.columns]]\n","    df = df[df.columns[(pd.Series(df.columns).isin(fis)) | (pd.Series(df.columns).isin(sum_columns))]]\n","    \n","    playtimesum = df['playtimesum']\n","    for column in sum_columns[1:]:\n","        df['derive' + str(column)] = df[column]/playtimesum\n","    else:\n","        df = df[fis]\n","        return df\n","\n","TYPE='activity'\n","FOLDS=5\n","SEED=42\n","select_model='rf'\n","\n","main_model = model(feature_selection(train, fis), train_label, feature_selection(test1, fis), feature_selection(test2, fis), TYPE, FOLDS, SEED)\n","print('start main_model')\n","main_model.labeling()\n","oof_st_rf = main_model.joblib_load_oof(select_model)\n","\n","main_model.labeling_tas(train_payment)\n","oof_tas_rf = main_model.joblib_load_tas_oof(select_model)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["start main_model\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bjh24HkK8C8L","colab_type":"code","colab":{}},"source":["# feature_imp = pd.DataFrame(sorted(zip(main_model.load('model_tas')['model0'].feature_importance(), main_model.load('feature'))), columns=['Value','Feature'])\n","# joblib.dump(feature_imp, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/feature_importance/feature_importance.ckpt\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lR1akul8OSOm","colab_type":"code","outputId":"d6b0f752-ae5c-4659-fc85-839625f6e4a0","executionInfo":{"status":"ok","timestamp":1567850158769,"user_tz":-540,"elapsed":528,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["oof_tas_ensembles = oof_tas_rf.copy()\n","oof_tas_ensembles['infer_total_amount_spent'] = oof_tas_rf['infer_total_amount_spent']*0.05 + oof_tas_lgb['infer_total_amount_spent']*0.95\n","\n","# 예측, 실제\n","score_function(oof_transform(oof_st_lgb, oof_tas_ensembles), true_train_label)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["35190.25717482952\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["35190.25717482952"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"hSxx9wxSIR1j","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IxKLIhr9F-m_","colab_type":"code","colab":{}},"source":["main_pred_st1, main_pred_st2 = main_model.infer_pred()\n","main_pred_tas1, main_pred_tas2 = main_model.infer_tas_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uu4VKZjVF-ui","colab_type":"code","colab":{}},"source":["pred_transform(main_pred_st1, main_pred_tas1, test1_activity['acc_id'].unique()).to_csv('/content/test1_predict.csv', index=False)\n","pred_transform(main_pred_st2, main_pred_tas2, test2_activity['acc_id'].unique()).to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GiQpIpEsF-q7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U3FEFmy8nA6v","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hfT0leHp1vSE","colab_type":"code","colab":{}},"source":["# act_pred_st1, act_pred_st2 = activity_model.infer_pred()\n","# act_pred_tas1, act_pred_tas2 = activity_model.infer_tas_pred()\n","\n","# pay_pred_st1, pay_pred_st2 = payment_model.infer_pred()\n","# pay_pred_tas1, pay_pred_tas2 = payment_model.infer_tas_pred()\n","\n","# tra_pred_st1, tra_pred_st2 = trade_model.infer_pred()\n","# tra_pred_tas1, tra_pred_tas2 = trade_model.infer_tas_pred()\n","\n","# com_pred_st1, com_pred_st2 = combat_model.infer_pred()\n","# com_pred_tas1, com_pred_tas2 = combat_model.infer_tas_pred()\n","\n","# ple_pred_st1, ple_pred_st2 = pledge_model.infer_pred()\n","# ple_pred_tas1, ple_pred_tas2 = pledge_model.infer_tas_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6erAxyzNH-CR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bF2VfPzhH-IY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tgChsHqkH-GA","colab_type":"code","colab":{}},"source":["oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').median().reset_index()\n","# oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').agg(lambda x: x.value_counts().index[0]).reset_index()\n","oop_tas = pd.concat([act_oof_tas, pay_oof_tas, tra_oof_tas, com_oof_tas, ple_oof_tas]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Drmj8HCn1Cnl","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fjaHUQYFYQ0O","colab_type":"code","colab":{}},"source":["# metrics\n","from scripts.metrics.score_function import score_function\n","\n","def oof_transform(st, tas):\n","    st_t = st.copy()\n","    tas_t = tas.copy()\n","\n","    tas_t.loc[tas['infer_total_amount_spent']<0, 'infer_total_amount_spent'] = 0\n","    \n","    oof_df = pd.merge(st_t, tas_t, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","    oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","    oof_df['amount_spent'] = oof_df['amount_spent']/oof_df['survival_time']\n","    return oof_df\n","\n","def pred_transform(st, tas, acc_id):\n","    st_t = st.copy()\n","    tas_t = tas.copy()\n","    \n","    st_t['survival_time'] = st_t.drop(columns='acc_id').median(1)\n","    tas_t['amount_spent'] = tas_t.drop(columns='acc_id').median(1)\n","    \n","    pred_df = pd.merge(st_t, tas_t, how='left', on='acc_id')[['acc_id', 'survival_time', 'amount_spent']]\n","    pred_df['amount_spent'] = pred_df['amount_spent']/pred_df['survival_time']\n","    \n","    pred_df = pred_df[pred_df['acc_id'].isin(acc_id)]\n","    return pred_df\n","\n","# 예측, 실제\n","score_function(oof_transform(act_oof_st, act_oof_tas),\n","               true_train_label)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w8S3u2N2-kMH","colab_type":"text"},"source":["# submission"]},{"cell_type":"code","metadata":{"id":"DBr7HXHg89M9","colab_type":"code","colab":{}},"source":["pred1_st = pd.concat([act_pred_st1, pay_pred_st1, tra_pred_st1, com_pred_st1, ple_pred_st1]).groupby('acc_id').median().reset_index()\n","pred1_tas = pd.concat([act_pred_tas1, pay_pred_tas1, tra_pred_tas1, com_pred_tas1, ple_pred_tas1]).groupby('acc_id').median().reset_index()\n","\n","pred2_st = pd.concat([act_pred_st2, pay_pred_st2, tra_pred_st2, com_pred_st2, ple_pred_st2]).groupby('acc_id').median().reset_index()\n","pred2_tas = pd.concat([act_pred_tas2, pay_pred_tas2, tra_pred_tas2, com_pred_tas2, ple_pred_tas2]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RxkCaXrN-kI1","colab_type":"code","colab":{}},"source":["pred_transform(pred1_st, pred1_tas, test1_activity['acc_id'].unique()).to_csv('/content/test1_predict.csv', index=False)\n","pred_transform(pred2_st, pred2_tas, test2_activity['acc_id'].unique()).to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VAXA9yRoCNwE","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UR6h_5DB9-qZ","colab_type":"code","colab":{}},"source":["pred_transform(act_pred_st1, act_pred_tas1, test1_activity['acc_id'].unique()).to_csv('/content/test1_predict.csv', index=False)\n","pred_transform(act_pred_st2, act_pred_tas2, test2_activity['acc_id'].unique()).to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"baZjm6CPEbsF","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9NLr0Stb0Iat","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}