{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"advanced_model_e.ipynb의 사본-eunice","version":"0.3.2","provenance":[],"collapsed_sections":["bRVo077h1ksD","Hypv9jFf1tCF","CswEp2DE1IOe"],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"wGDLy_XM3epP","colab_type":"code","outputId":"fd860741-9c0a-41bb-c131-320f11bfa090","executionInfo":{"status":"ok","timestamp":1567759499711,"user_tz":-540,"elapsed":777,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sK-XT6Ys6EOG","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from collections import defaultdict\n","import os\n","import gc\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.linear_model import Ridge\n","from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import StratifiedKFold\n","\n","from sklearn.model_selection import train_test_split\n","\n","\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import RandomUnderSampler\n","from sklearn.metrics import f1_score\n","\n","from tqdm import tqdm\n","\n","# model\n","import lightgbm as lgb\n","\n","SEED=42\n","LABEL=None"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WPao6FY66MHm","colab_type":"code","colab":{}},"source":["path = '/content/drive/My Drive/bigcontest2019/'\n","os.chdir(path)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WKdVhJyK6MLE","colab_type":"code","colab":{}},"source":["train_activity = pd.read_csv('data/train/train_activity.csv').drop(columns='fishing')\n","train_combat = pd.read_csv('data/train/train_combat.csv')\n","train_payment = pd.read_csv('data/train/train_payment.csv')\n","train_pledge = pd.read_csv('data/train/train_pledge.csv').drop(columns=['combat_play_time', 'non_combat_play_time'])\n","train_trade = pd.read_csv('data/train/train_trade.csv')\n","\n","test1_activity = pd.read_csv('data/test/test1_activity.csv').drop(columns='fishing')\n","test1_combat = pd.read_csv('data/test/test1_combat.csv')\n","test1_payment = pd.read_csv('data/test/test1_payment.csv')\n","test1_pledge = pd.read_csv('data/test/test1_pledge.csv').drop(columns=['combat_play_time', 'non_combat_play_time'])\n","test1_trade = pd.read_csv('data/test/test1_trade.csv')\n","\n","test2_activity = pd.read_csv(path + 'data/test/test2_activity.csv').drop(columns='fishing')\n","test2_combat = pd.read_csv(path + 'data/test/test2_combat.csv')\n","test2_payment = pd.read_csv(path + 'data/test/test2_payment.csv')\n","test2_pledge = pd.read_csv(path + 'data/test/test2_pledge.csv').drop(columns=['combat_play_time', 'non_combat_play_time'])\n","test2_trade = pd.read_csv(path + 'data/test/test2_trade.csv')\n","\n","train_label = pd.read_csv('data/train/train_label.csv')\n","true_train_label = train_label.copy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DK_X8WqQf7Sr","colab_type":"code","colab":{}},"source":["class data_transform(object):\n","    def __init__(self, data):\n","        self.data = data\n","        \n","    def create_week(self):\n","        self.data['week'] = (self.data['day']-1)//7 + 1\n","        return self.data\n","    \n","    def activity_transform(self):\n","        temp_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        temp_df = pd.get_dummies(temp_df)\n","        \n","        for feature in temp_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day' or feature == 'char_id':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:        \n","            temp_df = temp_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            temp_df.columns = [i+j for i,j in temp_df.columns.ravel()]\n","        return temp_df\n","    \n","    def payment_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def trade_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        groupby_dict2 = defaultdict()\n","        \n","        output_df['time'] = output_df['time'].apply(lambda x: str(x)[:2])\n","        output_df[['time', 'type', 'server']] = output_df[['time', 'type', 'server']].astype(object)\n","        output_df = pd.get_dummies(output_df)\n","        output_df2 = output_df.copy()\n","        \n","        output_df = output_df.rename(columns={'source_acc_id':'acc_id'})\n","        output_df2 = output_df2.rename(columns={'target_acc_id':'acc_id'})\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'target_acc_id']:\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        for feature in output_df2.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'source_acc_id']:\n","                groupby_dict2[feature] = 'nunique'\n","            else:\n","                groupby_dict2[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df2 = output_df2.groupby(['acc_id', 'week']).agg(groupby_dict2).reset_index()\n","            output_df2.columns = [i+j for i,j in output_df2.columns.ravel()]\n","        \n","        output_df = pd.merge(output_df, output_df2, how='outer', on=['acc_id', 'week'])\n","        \n","        return output_df\n","    \n","    def combat_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server', 'class', 'level']] = output_df[['server', 'class', 'level']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def pledge_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server']] = output_df[['server']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'pledge_id']:\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = ['sum', 'mean', 'min', 'max']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        return output_df"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NQkPPQDz1kok","colab_type":"text"},"source":["# survival time"]},{"cell_type":"markdown","metadata":{"id":"bRVo077h1ksD","colab_type":"text"},"source":["## train"]},{"cell_type":"markdown","metadata":{"id":"8639HQhu1kvc","colab_type":"text"},"source":["### acitivity"]},{"cell_type":"code","metadata":{"id":"0OrHwbMh1s7H","colab_type":"code","colab":{}},"source":["train_activity['game_money_change_abs'] = np.abs(train_activity['game_money_change'])\n","transform = data_transform(train_activity)\n","transform.create_week()\n","act_train = transform.activity_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BpZW_EJd1s-r","colab_type":"text"},"source":["### payment"]},{"cell_type":"code","metadata":{"id":"IHNW6ZMd23TJ","colab_type":"code","colab":{}},"source":["transform = data_transform(train_payment)\n","transform.create_week()\n","pay_train = transform.payment_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WJjrpGdw3Cz9","colab_type":"text"},"source":["### trade"]},{"cell_type":"code","metadata":{"id":"dm6lFb5r24ul","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_trade)\n","trandform.create_week()\n","tra_train = trandform.trade_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vXD7OGyThg3L","colab_type":"text"},"source":["### combat"]},{"cell_type":"code","metadata":{"id":"bMhaQb2Wiw3N","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_combat)\n","trandform.create_week()\n","com_train = trandform.combat_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OBMhLNMyv0gm","colab_type":"text"},"source":["### pledge"]},{"cell_type":"code","metadata":{"id":"hSd4xu7-v0m0","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_pledge)\n","trandform.create_week()\n","ple_train = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hypv9jFf1tCF","colab_type":"text"},"source":["## test"]},{"cell_type":"markdown","metadata":{"id":"WQR30JTJ1tFc","colab_type":"text"},"source":["### activity"]},{"cell_type":"code","metadata":{"id":"s71SzrUh1tJE","colab_type":"code","colab":{}},"source":["test1_activity['game_money_change_abs'] = np.abs(test1_activity['game_money_change'])\n","transform = data_transform(test1_activity)\n","transform.create_week()\n","act_test1 = transform.activity_transform()\n","\n","test2_activity['game_money_change_abs'] = np.abs(test2_activity['game_money_change'])\n","transform = data_transform(test2_activity)\n","transform.create_week()\n","act_test2 = transform.activity_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kJyUiqU29scZ","colab_type":"text"},"source":["### payment"]},{"cell_type":"code","metadata":{"id":"CKk-cIhk9si0","colab_type":"code","colab":{}},"source":["transform = data_transform(test1_payment)\n","transform.create_week()\n","pay_test1 = transform.payment_transform()\n","\n","transform = data_transform(test2_payment)\n","transform.create_week()\n","pay_test2 = transform.payment_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0Fvy_MBv9sgf","colab_type":"text"},"source":["### trade"]},{"cell_type":"code","metadata":{"id":"LkwpMrpg1tMb","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_trade)\n","trandform.create_week()\n","tra_test1 = trandform.trade_transform()\n","\n","trandform = data_transform(test2_trade)\n","trandform.create_week()\n","tra_test2 = trandform.trade_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iv8Q6nK8yREG","colab_type":"text"},"source":["### combat"]},{"cell_type":"code","metadata":{"id":"gMr3DO8ayRIW","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_combat)\n","trandform.create_week()\n","com_test1 = trandform.combat_transform()\n","\n","trandform = data_transform(test2_combat)\n","trandform.create_week()\n","com_test2 = trandform.combat_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QDnSntp2yRMa","colab_type":"text"},"source":["### pledge"]},{"cell_type":"code","metadata":{"id":"lXbAdLN6yRPy","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_pledge)\n","trandform.create_week()\n","ple_test1 = trandform.pledge_transform()\n","\n","trandform = data_transform(test2_pledge)\n","trandform.create_week()\n","ple_test2 = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OFqYB4UI-hGa","colab_type":"text"},"source":["## model"]},{"cell_type":"code","metadata":{"id":"qXCL-5EcBvCn","colab_type":"code","colab":{}},"source":["train = pd.merge(pd.merge(pd.merge(pd.merge(act_train, pay_train, how='left', on=['acc_id', 'week']), tra_train, how='left', on=['acc_id', 'week']), com_train, how='left', on=['acc_id', 'week']), ple_train, how='left', on=['acc_id', 'week']).fillna(0)\n","test1 = pd.merge(pd.merge(pd.merge(pd.merge(act_test1, pay_test1, how='left', on=['acc_id', 'week']), tra_test1, how='left', on=['acc_id', 'week']), com_test1, how='left', on=['acc_id', 'week']), ple_test1, how='left', on=['acc_id', 'week']).fillna(0)\n","test2 = pd.merge(pd.merge(pd.merge(pd.merge(act_test2, pay_test2, how='left', on=['acc_id', 'week']), tra_test2, how='left', on=['acc_id', 'week']), com_test2, how='left', on=['acc_id', 'week']), ple_test2, how='left', on=['acc_id', 'week']).fillna(0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LEnYCT3R1Ees","colab_type":"code","colab":{}},"source":["class model(object):\n","    def __init__(self, train_data, train_label, test1_data, test2_data, kind, folds, seed):\n","        self.train_data = train_data.fillna(0)\n","        self.train_label = train_label\n","        self.test1_data = test1_data.fillna(0)\n","        self.test2_data = test2_data.fillna(0)\n","        self.features_ = train_data[list(set(train_data.columns) & set(test1_data.columns) & set(test2_data.columns))].drop(columns=['acc_id', 'week']).columns\n","        self.kind = kind\n","        self.lgb_model_st = defaultdict()\n","        self.lgb_model_tas = defaultdict()\n","        self.rf_model_st = defaultdict()\n","        self.rf_model_tas = defaultdict()\n","        self.true_index = defaultdict()\n","        self.folds = folds\n","        self.seed = seed\n","        self.model = None\n","    \n","    \n","    \n","    def labeling(self):\n","        self.train_data = pd.merge(self.train_data, self.train_label[['acc_id', 'survival_time']], how='left', on='acc_id').dropna().reset_index(drop=True)\n","        for week in range(1, 5):\n","            self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            \n","    def labeling_tas(self, payment):\n","        self.train_data.drop(columns='survival_time', inplace=True)\n","        self.train_data = pd.merge(self.train_data, self.train_label, how='left', on='acc_id').dropna().reset_index(drop=True)\n","        self.train_data['adjust_survival_time'] = self.train_data['survival_time'] + self.train_data['week']*7\n","        \n","        def payment_transform(data):\n","            data['week'] = (data['day']-1)//7 + 1\n","            data = data.groupby(['acc_id', 'week']).sum().reset_index()\n","            return data\n","        payment = payment_transform(payment)\n","        \n","        def temp_func(data):\n","            if data['adjust_survival_time']>64:\n","                over_value = data['adjust_survival_time'] - 64\n","                data['adjust_survival_time'] = data['survival_time'] - over_value\n","            else:\n","                data['adjust_survival_time'] = data['survival_time']\n","            return data['adjust_survival_time']\n","        \n","        self.train_data['adjust_survival_time'] = self.train_data[['survival_time', 'adjust_survival_time']].apply(temp_func, axis=1)\n","        self.train_data['payment'] = 0\n","        \n","        for week in range(1, 4):\n","            self.train_data.loc[self.train_data['week']==week, 'payment'] = pd.merge(self.train_data.loc[self.train_data['week']==week, 'acc_id'], \n","                                                                                     payment[payment['week']>week].groupby(\n","                                                                                         ['acc_id'])['amount_spent'].sum().reset_index().rename(columns={'amount_spent':'payment'}), \n","                                                                                     how='left', on='acc_id')['payment']\n","            self.train_data = self.train_data.fillna(0)\n","        else:\n","            self.train_data['total_amount_spent'] = self.train_data['amount_spent'] * self.train_data['adjust_survival_time'] + self.train_data['payment']\n","#             self.train_data['total_amount_spent'] = self.train_data['amount_spent'] + self.train_data['payment']\n","            self.train_data = self.train_data.drop(columns=['amount_spent', 'payment'])\n","            for week in range(1, 5):\n","                self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            else:\n","#                 self.train_data = self.train_data.drop(columns='survival_time').rename(columns={'adjust_survival_time':'survival_time'})\n","                self.train_data = self.train_data.drop(columns=['adjust_survival_time', 'survival_time'])\n","                \n","    \n","    \n","    \n","    \n","    \n","    \n","\n","\n","    def train_st(self, params, iteration, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        for idx, true in enumerate(np.unique(self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x))):\n","            self.true_index[true] = idx\n","        else:\n","            self.train_data[LABEL] = self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x).apply(lambda x: self.true_index[x])\n","            \n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        rus = RandomUnderSampler(random_state=self.seed)\n","        for idx, (trn_idx, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","\n","            temp_train_data = pd.DataFrame()\n","            X, y = rus.fit_resample(self.train_data.drop(columns='survival_time'), self.train_data['survival_time'])\n","            temp_train_data = pd.DataFrame(np.concatenate([X, y.reshape(-1, 1)], 1))\n","            temp_train_data.columns = self.train_data.columns\n","            \n","            trn_label = temp_train_data[LABEL]\n","            val_label = self.train_data.loc[val_idx, LABEL]\n","            \n","            if self.model=='lgb':\n","                train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","                valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","                lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 150, verbose_eval=500)\n","                self.lgb_model_st['model'+str(idx)] = lgb_model\n","                \n","            elif self.model=='rf':\n","                rf_model = RandomForestClassifier(n_estimators=1000, random_state=self.seed, max_depth=8).fit(temp_train_data[self.features_], trn_label)\n","                self.rf_model_st['model'+str(idx)] = rf_model\n","    \n","    def train_tas(self, params, iteration, model):\n","        np.random.seed(self.seed)\n","        LABEL='total_amount_spent'\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (trn_idx, val_idx) in enumerate(kf.split(self.train_data)):\n","            \n","            temp_train_data = pd.DataFrame()\n","            round_basis = 1;SIZE=46\n","            for round_value in np.round(self.train_data['total_amount_spent'], round_basis).value_counts().index:\n","                temp_df = self.train_data.loc[trn_idx][np.round(self.train_data.loc[trn_idx, 'total_amount_spent'], round_basis).isin([round_value])]\n","                try:\n","                    temp_df = temp_df.loc[np.random.choice(temp_df.index, size=SIZE, replace=False)]\n","                except:\n","                    pass\n","                temp_train_data = pd.concat([temp_train_data, temp_df]).reset_index(drop=True)\n","            else:\n","                temp_train_data = temp_train_data[temp_train_data['total_amount_spent']<30].reset_index(drop=True)\n","                \n","                trn_label = temp_train_data[LABEL]\n","                val_label = self.train_data.loc[val_idx, LABEL]\n","                if self.model =='lgb':\n","                    train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","                    valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","                    lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 1000, verbose_eval=3000)\n","                    self.lgb_model_tas['model'+str(idx)] = lgb_model\n","                elif self.model =='rf':\n","                    rf_model = RandomForestRegressor(n_estimators=1000, random_state=self.seed, max_depth=8).fit(temp_train_data[self.features_], trn_label)\n","                    self.rf_model_tas['model'+str(idx)] = rf_model\n","                \n","    \n","    \n","    def infer_oof(self, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        oof = np.zeros(len(self.train_data))\n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","\n","        for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            if self.model=='lgb':\n","                oof[val_idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_]), axis=1)\n","            elif self.model=='rf':\n","                oof[val_idx] = self.rf_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","            self.oof = oof.copy()\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:    \n","                self.oof['survival_time'] = self.oof['survival_time'].apply(lambda x: temp_dict[x])\n","                self.oof['infer_survival_time'] = self.oof['infer_survival_time'].apply(lambda x: temp_dict[x])\n","                return self.oof\n","    def infer_tas_oof(self, model):\n","        LABEL='total_amount_spent'\n","        oof = np.zeros(len(self.train_data))\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","            valid_df = self.train_data.loc[val_idx]\n","            if self.model=='lgb':\n","                oof[val_idx] = self.lgb_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","            elif self.model=='rf':\n","                oof[val_idx] = self.rf_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","            self.oof_tas = oof\n","            return self.oof_tas\n","                \n","    \n","    \n","    \n","    \n","    \n","    \n","    \n","    def infer_pred(self):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([len(test1), self.folds])\n","        pred2 = np.zeros([len(test2), self.folds])\n","        \n","        for idx in range(self.folds):\n","            if self.model=='lgb':\n","                pred1[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test1[self.features_]), axis=1)\n","                pred2[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test2[self.features_]), axis=1)\n","            elif self.model=='rf':\n","                pred1[:, idx] = self.rf_model_st['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_st['model'+str(idx)].predict(test2[self.features_])\n","        else:\n","            test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","            test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:\n","                for i in range(5):\n","                    test1[i] = test1[i].apply(lambda x: temp_dict[x])\n","                    test2[i] = test2[i].apply(lambda x: temp_dict[x])\n","                else:\n","                    self.pred_test1 = test1\n","                    self.pred_test2 = test2    \n","                    return self.pred_test1, self.pred_test2\n","    \n","    def infer_tas_pred(self):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([len(test1), self.folds])\n","        pred2 = np.zeros([len(test2), self.folds])\n","        \n","        for idx in range(self.folds):\n","            if self.model=='lgb':\n","                pred1[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test2[self.features_])\n","            elif self.model=='rf':\n","                pred1[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test2[self.features_])\n","            pred1[:, idx][pred1[:, idx]<0] = 0\n","            pred2[:, idx][pred2[:, idx]<0] = 0\n","        else:\n","            test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","            test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            return test1, test2\n","        \n","\n","        \n","        \n","        \n","        \n","    def feature_importance(self):\n","        feature_imp = pd.DataFrame(sorted(zip(self.st_lgb_model.feature_importance(), self.features_)), columns=['Value','Feature'])\n","        plt.figure(figsize=(20, 10))\n","        sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\n","        plt.title('LightGBM Features (avg over folds)')\n","        plt.tight_layout()\n","        plt.show()\n","        \n","    def load(self, return_data):\n","        if return_data=='train':\n","            return self.train_data\n","        elif return_data=='model_st':\n","            return self.lgb_model_st\n","        elif return_data=='model_tas':\n","            return self.lgb_model_tas\n","        elif return_data=='true_dict':\n","            return self.true_index\n","        elif return_data=='feature':\n","            return self.features_"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HeP72FgU1FB1","colab_type":"text"},"source":["### parameters"]},{"cell_type":"code","metadata":{"id":"8tQTscQS0_x-","colab_type":"code","colab":{}},"source":["PARAMS_ST = {\n","    'objective':'multiclass',\n","    'num_class':11,\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.02,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'seed':SEED\n","}\n","\n","PARAMS_TAS = {\n","    'objective':'regression',\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.02,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'metrics':'rmse',\n","    'seed':SEED\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CswEp2DE1IOe","colab_type":"text"},"source":["## execute"]},{"cell_type":"code","metadata":{"id":"gYxLnM8ZfKoS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":561},"outputId":"f744f21a-ec2d-4988-87a1-dd0c8ddee406","executionInfo":{"status":"ok","timestamp":1567754709297,"user_tz":-540,"elapsed":17090,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["TYPE='activity'\n","FOLDS=5\n","SEED=42\n","select_model='lgb'\n","\n","activity_model = model(act_train, train_label, act_test1, act_test2, TYPE, FOLDS, SEED)\n","activity_model.labeling()\n","activity_model.train_st(PARAMS_ST, 5000, select_model)\n","act_oof_st = activity_model.infer_oof(select_model)\n","\n","activity_model.labeling_tas(train_payment)\n","activity_model.train_tas(PARAMS_TAS, 50000, select_model)\n","act_oof_tas = activity_model.infer_tas_oof(select_model)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","[500]\ttraining's multi_logloss: 0.879427\tvalid_1's multi_logloss: 1.95315\n","Early stopping, best iteration is:\n","[621]\ttraining's multi_logloss: 0.732556\tvalid_1's multi_logloss: 1.94955\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[262]\ttraining's multi_logloss: 1.29767\tvalid_1's multi_logloss: 2.09656\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[275]\ttraining's multi_logloss: 1.268\tvalid_1's multi_logloss: 2.09016\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[263]\ttraining's multi_logloss: 1.29539\tvalid_1's multi_logloss: 2.10307\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[249]\ttraining's multi_logloss: 1.32806\tvalid_1's multi_logloss: 2.10739\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1092]\ttraining's rmse: 5.2527\tvalid_1's rmse: 8.40021\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1477]\ttraining's rmse: 4.89056\tvalid_1's rmse: 8.38153\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1286]\ttraining's rmse: 4.97586\tvalid_1's rmse: 8.31781\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1535]\ttraining's rmse: 4.7987\tvalid_1's rmse: 8.39609\n","Training until validation scores don't improve for 1000 rounds.\n","[3000]\ttraining's rmse: 3.60847\tvalid_1's rmse: 8.43208\n","Early stopping, best iteration is:\n","[2163]\ttraining's rmse: 4.22277\tvalid_1's rmse: 8.42276\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vpMM1PSwg5eO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":527},"outputId":"3b160ef1-d86c-461d-bbaf-23ae24cc0a26","executionInfo":{"status":"ok","timestamp":1567754743185,"user_tz":-540,"elapsed":33893,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["TYPE='payment'\n","\n","payment_model = model(pay_train, train_label, pay_test1, pay_test2, TYPE, FOLDS, SEED)\n","payment_model.labeling()\n","payment_model.train_st(PARAMS_ST, 5000, select_model)\n","pay_oof_st = payment_model.infer_oof(select_model)\n","\n","payment_model.labeling_tas(train_payment)\n","payment_model.train_tas(PARAMS_TAS, 50000, select_model)\n","pay_oof_tas = payment_model.infer_tas_oof(select_model)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[134]\ttraining's multi_logloss: 2.11558\tvalid_1's multi_logloss: 2.34744\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[80]\ttraining's multi_logloss: 2.18971\tvalid_1's multi_logloss: 2.36861\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[52]\ttraining's multi_logloss: 2.2455\tvalid_1's multi_logloss: 2.37766\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[69]\ttraining's multi_logloss: 2.20905\tvalid_1's multi_logloss: 2.37422\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[52]\ttraining's multi_logloss: 2.2455\tvalid_1's multi_logloss: 2.37818\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[390]\ttraining's rmse: 6.6862\tvalid_1's rmse: 7.92816\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[473]\ttraining's rmse: 6.75384\tvalid_1's rmse: 7.90238\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[536]\ttraining's rmse: 6.72104\tvalid_1's rmse: 7.95045\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[547]\ttraining's rmse: 6.71151\tvalid_1's rmse: 7.96396\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[613]\ttraining's rmse: 6.72864\tvalid_1's rmse: 7.96727\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lP_Qtd3bg5jg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":544},"outputId":"f94415be-62dc-4da9-f3e6-b4d8f16b0ab1","executionInfo":{"status":"ok","timestamp":1567755331860,"user_tz":-540,"elapsed":588689,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["TYPE='trade'\n","\n","trade_model = model(tra_train, train_label, tra_test1, tra_test2, TYPE, FOLDS, SEED)\n","trade_model.labeling()\n","trade_model.train_st(PARAMS_ST, 5000, select_model)\n","tra_oof_st = trade_model.infer_oof(select_model)\n","\n","trade_model.labeling_tas(train_payment)\n","trade_model.train_tas(PARAMS_TAS, 50000, select_model)\n","tra_oof_tas = trade_model.infer_tas_oof(select_model)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","[500]\ttraining's multi_logloss: 0.890694\tvalid_1's multi_logloss: 2.12593\n","Early stopping, best iteration is:\n","[490]\ttraining's multi_logloss: 0.904237\tvalid_1's multi_logloss: 2.12572\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[177]\ttraining's multi_logloss: 1.55434\tvalid_1's multi_logloss: 2.27008\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[160]\ttraining's multi_logloss: 1.6106\tvalid_1's multi_logloss: 2.2793\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[160]\ttraining's multi_logloss: 1.6106\tvalid_1's multi_logloss: 2.2732\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[151]\ttraining's multi_logloss: 1.64157\tvalid_1's multi_logloss: 2.27856\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1118]\ttraining's rmse: 5.36707\tvalid_1's rmse: 8.79256\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1058]\ttraining's rmse: 5.43546\tvalid_1's rmse: 8.85938\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[974]\ttraining's rmse: 5.50661\tvalid_1's rmse: 8.81289\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[959]\ttraining's rmse: 5.51968\tvalid_1's rmse: 8.81974\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[553]\ttraining's rmse: 6.03384\tvalid_1's rmse: 8.80016\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q3wJbMAJg5n4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":629},"outputId":"eccd5eae-cd69-459b-8dd8-5c53ed418288","executionInfo":{"status":"ok","timestamp":1567755880393,"user_tz":-540,"elapsed":548556,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE, FOLDS, SEED)\n","combat_model.labeling()\n","combat_model.train_st(PARAMS_ST, 5000, select_model)\n","com_oof_st = combat_model.infer_oof(select_model)\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.train_tas(PARAMS_TAS, 50000, select_model)\n","com_oof_tas = combat_model.infer_tas_oof(select_model)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","[500]\ttraining's multi_logloss: 1.19747\tvalid_1's multi_logloss: 2.07632\n","Early stopping, best iteration is:\n","[499]\ttraining's multi_logloss: 1.19859\tvalid_1's multi_logloss: 2.07626\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[229]\ttraining's multi_logloss: 1.5992\tvalid_1's multi_logloss: 2.18746\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[232]\ttraining's multi_logloss: 1.59315\tvalid_1's multi_logloss: 2.18168\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[232]\ttraining's multi_logloss: 1.59315\tvalid_1's multi_logloss: 2.18042\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[238]\ttraining's multi_logloss: 1.58134\tvalid_1's multi_logloss: 2.18013\n","Training until validation scores don't improve for 1000 rounds.\n","[3000]\ttraining's rmse: 4.3808\tvalid_1's rmse: 8.7525\n","Early stopping, best iteration is:\n","[3318]\ttraining's rmse: 4.24053\tvalid_1's rmse: 8.74802\n","Training until validation scores don't improve for 1000 rounds.\n","[3000]\ttraining's rmse: 4.35076\tvalid_1's rmse: 8.72372\n","Early stopping, best iteration is:\n","[2492]\ttraining's rmse: 4.62005\tvalid_1's rmse: 8.71883\n","Training until validation scores don't improve for 1000 rounds.\n","[3000]\ttraining's rmse: 4.37194\tvalid_1's rmse: 8.72185\n","Early stopping, best iteration is:\n","[2594]\ttraining's rmse: 4.59336\tvalid_1's rmse: 8.71946\n","Training until validation scores don't improve for 1000 rounds.\n","[3000]\ttraining's rmse: 4.37473\tvalid_1's rmse: 8.66821\n","Early stopping, best iteration is:\n","[2317]\ttraining's rmse: 4.73854\tvalid_1's rmse: 8.65951\n","Training until validation scores don't improve for 1000 rounds.\n","[3000]\ttraining's rmse: 4.41056\tvalid_1's rmse: 8.69371\n","Early stopping, best iteration is:\n","[3259]\ttraining's rmse: 4.28552\tvalid_1's rmse: 8.69049\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4BkYGjHXg5rJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":544},"outputId":"402e9fbf-0658-4c96-c91d-5df682831dfc","executionInfo":{"status":"ok","timestamp":1567756211274,"user_tz":-540,"elapsed":330897,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE, FOLDS, SEED)\n","pledge_model.labeling()\n","pledge_model.train_st(PARAMS_ST, 5000, select_model)\n","ple_oof_st = pledge_model.infer_oof(select_model)\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.train_tas(PARAMS_TAS, 5000, select_model)\n","ple_oof_tas = pledge_model.infer_tas_oof(select_model)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","[500]\ttraining's multi_logloss: 0.945465\tvalid_1's multi_logloss: 2.07973\n","Early stopping, best iteration is:\n","[565]\ttraining's multi_logloss: 0.866727\tvalid_1's multi_logloss: 2.0787\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[220]\ttraining's multi_logloss: 1.44733\tvalid_1's multi_logloss: 2.21846\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[220]\ttraining's multi_logloss: 1.44733\tvalid_1's multi_logloss: 2.21921\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[220]\ttraining's multi_logloss: 1.44733\tvalid_1's multi_logloss: 2.21195\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[220]\ttraining's multi_logloss: 1.44733\tvalid_1's multi_logloss: 2.21544\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1861]\ttraining's rmse: 4.97666\tvalid_1's rmse: 8.78091\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1713]\ttraining's rmse: 5.04477\tvalid_1's rmse: 8.82776\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1316]\ttraining's rmse: 5.37648\tvalid_1's rmse: 8.90346\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1808]\ttraining's rmse: 5.01503\tvalid_1's rmse: 8.84427\n","Training until validation scores don't improve for 1000 rounds.\n","Early stopping, best iteration is:\n","[1835]\ttraining's rmse: 5.04121\tvalid_1's rmse: 8.998\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ij0L4-T_OGKL","colab_type":"text"},"source":["## main"]},{"cell_type":"code","metadata":{"id":"7nIqItZ2OSLU","colab_type":"code","colab":{}},"source":["def feature_selection(data):\n","    df = data.copy()\n","#     feature_imp = pd.DataFrame(sorted(zip(main_model.load('model')['model0'].feature_importance(), main_model.load('feature'))), columns=['Value','Feature'])\n","#     fis = feature_imp.loc[-100:, 'Feature'].tolist()\n","#     fis.extend(['acc_id', 'week'])\n","#     df = df[fis]\n","\n","    return data\n","\n","TYPE='activity'\n","FOLDS=5\n","SEED=42\n","select_model='lgb'\n","\n","main_model = model(feature_selection(train), train_label, feature_selection(test1), feature_selection(test2), TYPE, FOLDS, SEED)\n","main_model.labeling()\n","main_model.train_st(PARAMS_ST, 5000, select_model)\n","oof_st = main_model.infer_oof(select_model)\n","\n","main_model.labeling_tas(train_payment)\n","maindf['playtimesum']_model.train_tas(PARAMS_TAS, 5000, select_model)\n","oof_tas = main_model.infer_tas_oof(select_model)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"a_uGQB32XjA6","colab_type":"code","colab":{}},"source":["train[train.columns[[column[-3:]=='sum' for column in train.columns]]]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lR1akul8OSOm","colab_type":"code","outputId":"bf57d422-ba85-4e76-f555-b9ea21f41148","executionInfo":{"status":"ok","timestamp":1567752074682,"user_tz":-540,"elapsed":513,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# 예측, 실제\n","score_function(oof_transform(oof_st, oof_tas), true_train_label)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["33104.93896631745\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["33104.93896631745"]},"metadata":{"tags":[]},"execution_count":415}]},{"cell_type":"code","metadata":{"id":"IxKLIhr9F-m_","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uu4VKZjVF-ui","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U7cMXqkYF-yR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kqvuW-NjF-3D","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GiQpIpEsF-q7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hfT0leHp1vSE","colab_type":"code","colab":{}},"source":["act_pred_st1, act_pred_st2 = activity_model.infer_pred()\n","act_pred_tas1, act_pred_tas2 = activity_model.infer_tas_pred()\n","\n","# pay_pred_st1, pay_pred_st2 = payment_model.infer_pred()\n","# pay_pred_tas1, pay_pred_tas2 = payment_model.infer_tas_pred()\n","\n","# tra_pred_st1, tra_pred_st2 = trade_model.infer_pred()\n","# tra_pred_tas1, tra_pred_tas2 = trade_model.infer_tas_pred()\n","\n","# com_pred_st1, com_pred_st2 = combat_model.infer_pred()\n","# com_pred_tas1, com_pred_tas2 = combat_model.infer_tas_pred()\n","\n","# ple_pred_st1, ple_pred_st2 = pledge_model.infer_pred()\n","# ple_pred_tas1, ple_pred_tas2 = pledge_model.infer_tas_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6erAxyzNH-CR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bF2VfPzhH-IY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tgChsHqkH-GA","colab_type":"code","colab":{}},"source":["oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').median().reset_index()\n","# oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').agg(lambda x: x.value_counts().index[0]).reset_index()\n","oop_tas = pd.concat([act_oof_tas, pay_oof_tas, tra_oof_tas, com_oof_tas, ple_oof_tas]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Drmj8HCn1Cnl","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fjaHUQYFYQ0O","colab_type":"code","outputId":"d655a72c-9edd-4149-e109-9e99d2e12120","executionInfo":{"status":"ok","timestamp":1567749960684,"user_tz":-540,"elapsed":639,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# metrics\n","from scripts.metrics.score_function import score_function\n","\n","def oof_transform(st, tas):\n","    st_t = st.copy()\n","    tas_t = tas.copy()\n","\n","    tas_t.loc[tas['infer_total_amount_spent']<0, 'infer_total_amount_spent'] = 0\n","    \n","    oof_df = pd.merge(st_t, tas_t, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","    oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","    oof_df['amount_spent'] = oof_df['amount_spent']/oof_df['survival_time']\n","    return oof_df\n","\n","def pred_transform(st, tas, acc_id):\n","    st_t = st.copy()\n","    tas_t = tas.copy()\n","    \n","    st_t['survival_time'] = st_t.drop(columns='acc_id').median(1)\n","    tas_t['amount_spent'] = tas_t.drop(columns='acc_id').median(1)\n","    \n","    pred_df = pd.merge(st_t, tas_t, how='left', on='acc_id')[['acc_id', 'survival_time', 'amount_spent']]\n","    pred_df['amount_spent'] = pred_df['amount_spent']/pred_df['survival_time']\n","    \n","    pred_df = pred_df[pred_df['acc_id'].isin(acc_id)]\n","    return pred_df\n","\n","# 예측, 실제\n","score_function(oof_transform(act_oof_st, act_oof_tas),\n","               true_train_label)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["32313.97754216775\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["32313.97754216775"]},"metadata":{"tags":[]},"execution_count":386}]},{"cell_type":"markdown","metadata":{"id":"w8S3u2N2-kMH","colab_type":"text"},"source":["# submission"]},{"cell_type":"code","metadata":{"id":"DBr7HXHg89M9","colab_type":"code","colab":{}},"source":["pred1_st = pd.concat([act_pred_st1, pay_pred_st1, tra_pred_st1, com_pred_st1, ple_pred_st1]).groupby('acc_id').median().reset_index()\n","pred1_tas = pd.concat([act_pred_tas1, pay_pred_tas1, tra_pred_tas1, com_pred_tas1, ple_pred_tas1]).groupby('acc_id').median().reset_index()\n","\n","pred2_st = pd.concat([act_pred_st2, pay_pred_st2, tra_pred_st2, com_pred_st2, ple_pred_st2]).groupby('acc_id').median().reset_index()\n","pred2_tas = pd.concat([act_pred_tas2, pay_pred_tas2, tra_pred_tas2, com_pred_tas2, ple_pred_tas2]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RxkCaXrN-kI1","colab_type":"code","colab":{}},"source":["pred_transform(pred1_st, pred1_tas, test1_activity['acc_id'].unique()).to_csv('/content/test1_predict.csv', index=False)\n","pred_transform(pred2_st, pred2_tas, test2_activity['acc_id'].unique()).to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VAXA9yRoCNwE","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UR6h_5DB9-qZ","colab_type":"code","colab":{}},"source":["pred_transform(act_pred_st1, act_pred_tas1, test1_activity['acc_id'].unique()).to_csv('/content/test1_predict.csv', index=False)\n","pred_transform(act_pred_st2, act_pred_tas2, test2_activity['acc_id'].unique()).to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"baZjm6CPEbsF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":224},"outputId":"30e55ffc-88cd-4fbf-9072-d533e2b38067","executionInfo":{"status":"ok","timestamp":1567759534384,"user_tz":-540,"elapsed":13396,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["\n","\n","train_activity.head()"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>day</th>\n","      <th>acc_id</th>\n","      <th>char_id</th>\n","      <th>server</th>\n","      <th>playtime</th>\n","      <th>npc_kill</th>\n","      <th>solo_exp</th>\n","      <th>party_exp</th>\n","      <th>quest_exp</th>\n","      <th>rich_monster</th>\n","      <th>death</th>\n","      <th>revive</th>\n","      <th>exp_recovery</th>\n","      <th>private_shop</th>\n","      <th>game_money_change</th>\n","      <th>enchant_count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>75001</td>\n","      <td>397380</td>\n","      <td>aa</td>\n","      <td>1.441844</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>1.10514</td>\n","      <td>0.034006</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>75001</td>\n","      <td>216231</td>\n","      <td>aa</td>\n","      <td>0.283219</td>\n","      <td>2.247978</td>\n","      <td>0.047085</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>-0.013963</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>75711</td>\n","      <td>308769</td>\n","      <td>aa</td>\n","      <td>1.036910</td>\n","      <td>2.956638</td>\n","      <td>0.321821</td>\n","      <td>0.166593</td>\n","      <td>0.003470</td>\n","      <td>1</td>\n","      <td>0.245883</td>\n","      <td>0.247337</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>-0.001987</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>72230</td>\n","      <td>387177</td>\n","      <td>aa</td>\n","      <td>0.229384</td>\n","      <td>4.042102</td>\n","      <td>0.099147</td>\n","      <td>0.000000</td>\n","      <td>0.001735</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>-0.028884</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>34253</td>\n","      <td>339862</td>\n","      <td>aa</td>\n","      <td>1.088405</td>\n","      <td>0.596802</td>\n","      <td>0.003377</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.011777</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   day  acc_id  char_id  ... private_shop  game_money_change  enchant_count\n","0    1   75001   397380  ...      1.10514           0.034006            0.0\n","1    1   75001   216231  ...      0.00000          -0.013963            0.0\n","2    1   75711   308769  ...      0.00000          -0.001987            0.0\n","3    1   72230   387177  ...      0.00000          -0.028884            0.0\n","4    1   34253   339862  ...      0.00000           0.011777            0.0\n","\n","[5 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"Q3LO3ZwRv9P6","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OtpAzF_nv-PX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"bcf620ce-0a45-445b-d94b-95b8d365ec77","executionInfo":{"status":"ok","timestamp":1567760306515,"user_tz":-540,"elapsed":543,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["train2 = train.groupby(on = 'acc_id', how = )"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([75001, 75711, 72230, ..., 94182, 27017,  1591])"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"tjbySykSv-pj","colab_type":"text"},"source":["# 애들 비교"]},{"cell_type":"code","metadata":{"id":"IwCzPCYpwAxs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"bfab11ec-b9d2-447b-cb1a-e23a63a999e8","executionInfo":{"status":"ok","timestamp":1567760247524,"user_tz":-540,"elapsed":527,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["for i in train :\n","    j = i['acc_id']['week'].min()\n"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"VqSSPPbdwDJ2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"dd72b4cd-3f56-4d18-987b-536e7b147392","executionInfo":{"status":"ok","timestamp":1567760842641,"user_tz":-540,"elapsed":3319,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["train2 = train.copy()\n","train2.loc[train2.acc_id == 2]['week'].min()"],"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"0iCXauaewboi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":198},"outputId":"71824bcb-8d38-44d9-88fe-905923c9e3f3","executionInfo":{"status":"error","timestamp":1567761359976,"user_tz":-540,"elapsed":393970,"user":{"displayName":"Eunice","photoUrl":"https://lh5.googleusercontent.com/-cSzctfkN1RA/AAAAAAAAAAI/AAAAAAAAQlo/izeHohCao7Y/s64/photo.jpg","userId":"07489983497392537979"}}},"source":["min = []\n","for i in train2['acc_id'] :\n","    min.append(train2.loc[train2.acc_id == i]['week'].min())\n","\n","min(head)"],"execution_count":64,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-cb191543d643>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mmin\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macc_id\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'week'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'head' is not defined"]}]},{"cell_type":"code","metadata":{"id":"JSYOKqDt1O0y","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}