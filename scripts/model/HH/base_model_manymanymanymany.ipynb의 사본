{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"base_model_manymanymanymany.ipynb의 사본","version":"0.3.2","provenance":[],"collapsed_sections":["HeP72FgU1FB1"],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"wGDLy_XM3epP","colab_type":"code","outputId":"64beb7a4-2825-492a-91bd-650d4f01aa4b","executionInfo":{"status":"ok","timestamp":1567850233476,"user_tz":-540,"elapsed":29600,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sK-XT6Ys6EOG","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from collections import defaultdict\n","import os\n","import gc\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.linear_model import Ridge\n","from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier, ExtraTreesRegressor, ExtraTreesClassifier\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import f1_score\n","\n","from tqdm import tqdm\n","\n","# model\n","import lightgbm as lgb\n","\n","SEED=42\n","LABEL=None"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WPao6FY66MHm","colab_type":"code","colab":{}},"source":["path = '/content/drive/My Drive/bigcontest2019/'\n","os.chdir(path)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WKdVhJyK6MLE","colab_type":"code","colab":{}},"source":["train_activity = pd.read_csv('data/train/train_activity.csv')\n","train_combat = pd.read_csv('data/train/train_combat.csv')\n","train_payment = pd.read_csv('data/train/train_payment.csv')\n","train_pledge = pd.read_csv('data/train/train_pledge.csv')\n","train_trade = pd.read_csv('data/train/train_trade.csv')\n","\n","test1_activity = pd.read_csv('data/test/test1_activity.csv')\n","test1_combat = pd.read_csv('data/test/test1_combat.csv')\n","test1_payment = pd.read_csv('data/test/test1_payment.csv')\n","test1_pledge = pd.read_csv('data/test/test1_pledge.csv')\n","test1_trade = pd.read_csv('data/test/test1_trade.csv')\n","\n","test2_activity = pd.read_csv(path + 'data/test/test2_activity.csv')\n","test2_combat = pd.read_csv(path + 'data/test/test2_combat.csv')\n","test2_payment = pd.read_csv(path + 'data/test/test2_payment.csv')\n","test2_pledge = pd.read_csv(path + 'data/test/test2_pledge.csv')\n","test2_trade = pd.read_csv(path + 'data/test/test2_trade.csv')\n","\n","train_label = pd.read_csv('data/train/train_label.csv')\n","true_train_label = train_label.copy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DK_X8WqQf7Sr","colab_type":"code","colab":{}},"source":["class data_transform(object):\n","    def __init__(self, data):\n","        self.data = data\n","        \n","    def create_week(self):\n","        self.data['week'] = (self.data['day']-1)//7 + 1\n","        return self.data\n","    \n","    def activity_transform(self):\n","        temp_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        temp_df = pd.get_dummies(temp_df)\n","        \n","        for feature in temp_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day' or feature == 'char_id':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = 'sum'\n","        else:        \n","            temp_df = temp_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","        \n","        return temp_df\n","    \n","    def payment_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'count', 'max', 'std']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def trade_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        groupby_dict2 = defaultdict()\n","        \n","        output_df['time'] = output_df['time'].apply(lambda x: str(x)[:2])\n","        output_df[['time', 'type', 'server']] = output_df[['time', 'type', 'server']].astype(object)\n","        output_df = pd.get_dummies(output_df)\n","        output_df2 = output_df.copy()\n","        \n","        output_df = output_df.rename(columns={'source_acc_id':'acc_id'})\n","        output_df2 = output_df2.rename(columns={'target_acc_id':'acc_id'})\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'target_acc_id']:\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = 'sum'\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","        \n","        for feature in output_df2.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'source_acc_id']:\n","                groupby_dict2[feature] = 'nunique'\n","            else:\n","                groupby_dict2[feature] = 'sum'\n","        else:\n","            output_df2 = output_df2.groupby(['acc_id', 'week']).agg(groupby_dict2).reset_index()\n","        \n","        output_df = pd.merge(output_df, output_df2, how='outer', on=['acc_id', 'week'])\n","        \n","        return output_df\n","    \n","    def combat_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server', 'class', 'level']] = output_df[['server', 'class', 'level']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = ['sum']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def pledge_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server']] = output_df[['server']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'pledge_id']:\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = 'sum'\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        return output_df"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NQkPPQDz1kok","colab_type":"text"},"source":["# survival time"]},{"cell_type":"markdown","metadata":{"id":"bRVo077h1ksD","colab_type":"text"},"source":["## train"]},{"cell_type":"markdown","metadata":{"id":"8639HQhu1kvc","colab_type":"text"},"source":["### acitivity"]},{"cell_type":"code","metadata":{"id":"0OrHwbMh1s7H","colab_type":"code","colab":{}},"source":["transform = data_transform(train_activity)\n","transform.create_week()\n","act_train = transform.activity_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BpZW_EJd1s-r","colab_type":"text"},"source":["### payment"]},{"cell_type":"code","metadata":{"id":"IHNW6ZMd23TJ","colab_type":"code","colab":{}},"source":["transform = data_transform(train_payment)\n","transform.create_week()\n","pay_train = transform.payment_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WJjrpGdw3Cz9","colab_type":"text"},"source":["### trade"]},{"cell_type":"code","metadata":{"id":"dm6lFb5r24ul","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_trade)\n","trandform.create_week()\n","tra_train = trandform.trade_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vXD7OGyThg3L","colab_type":"text"},"source":["### combat"]},{"cell_type":"code","metadata":{"id":"bMhaQb2Wiw3N","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_combat)\n","trandform.create_week()\n","com_train = trandform.combat_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OBMhLNMyv0gm","colab_type":"text"},"source":["### pledge"]},{"cell_type":"code","metadata":{"id":"hSd4xu7-v0m0","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_pledge)\n","trandform.create_week()\n","ple_train = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hypv9jFf1tCF","colab_type":"text"},"source":["## test"]},{"cell_type":"markdown","metadata":{"id":"WQR30JTJ1tFc","colab_type":"text"},"source":["### activity"]},{"cell_type":"code","metadata":{"id":"s71SzrUh1tJE","colab_type":"code","colab":{}},"source":["transform = data_transform(test1_activity)\n","transform.create_week()\n","act_test1 = transform.activity_transform()\n","\n","transform = data_transform(test2_activity)\n","transform.create_week()\n","act_test2 = transform.activity_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kJyUiqU29scZ","colab_type":"text"},"source":["### payment"]},{"cell_type":"code","metadata":{"id":"CKk-cIhk9si0","colab_type":"code","colab":{}},"source":["transform = data_transform(test1_payment)\n","transform.create_week()\n","pay_test1 = transform.payment_transform()\n","\n","transform = data_transform(test2_payment)\n","transform.create_week()\n","pay_test2 = transform.payment_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0Fvy_MBv9sgf","colab_type":"text"},"source":["### trade"]},{"cell_type":"code","metadata":{"id":"LkwpMrpg1tMb","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_trade)\n","trandform.create_week()\n","tra_test1 = trandform.trade_transform()\n","\n","trandform = data_transform(test2_trade)\n","trandform.create_week()\n","tra_test2 = trandform.trade_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iv8Q6nK8yREG","colab_type":"text"},"source":["### combat"]},{"cell_type":"code","metadata":{"id":"gMr3DO8ayRIW","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_combat)\n","trandform.create_week()\n","com_test1 = trandform.combat_transform()\n","\n","trandform = data_transform(test2_combat)\n","trandform.create_week()\n","com_test2 = trandform.combat_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QDnSntp2yRMa","colab_type":"text"},"source":["### pledge"]},{"cell_type":"code","metadata":{"id":"lXbAdLN6yRPy","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_pledge)\n","trandform.create_week()\n","ple_test1 = trandform.pledge_transform()\n","\n","trandform = data_transform(test2_pledge)\n","trandform.create_week()\n","ple_test2 = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OFqYB4UI-hGa","colab_type":"text"},"source":["# model"]},{"cell_type":"code","metadata":{"id":"LEnYCT3R1Ees","colab_type":"code","colab":{}},"source":["class model(object):\n","    def __init__(self, train_data, train_label, test1_data, test2_data, kind, folds, seed):\n","        self.train_data = train_data.fillna(0)\n","        self.train_label = train_label\n","        self.test1_data = test1_data.fillna(0)\n","        self.test2_data = test2_data.fillna(0)\n","        self.features_ = train_data[list(set(train_data.columns) & set(test1_data.columns) & set(test2_data.columns))].drop(columns=['acc_id', 'week']).columns\n","        self.kind = kind\n","        self.lgb_model_st = defaultdict()\n","        self.lgb_model_tas = defaultdict()\n","        self.rf_model_st = defaultdict()\n","        self.rf_model_tas = defaultdict()\n","        self.true_index = defaultdict()\n","        self.folds = folds\n","        self.seed = seed\n","        self.model = None\n","    \n","    \n","    \n","    def labeling(self):\n","        self.train_data = pd.merge(self.train_data, self.train_label[['acc_id', 'survival_time']], how='left', on='acc_id').dropna().reset_index(drop=True)\n","        for week in range(1, 5):\n","            self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            \n","    def labeling_tas(self, payment):\n","        self.train_data.drop(columns='survival_time', inplace=True)\n","        self.train_data = pd.merge(self.train_data, self.train_label, how='left', on='acc_id').dropna().reset_index(drop=True)\n","        self.train_data['adjust_survival_time'] = self.train_data['survival_time'] + self.train_data['week']*7\n","        \n","        def payment_transform(data):\n","            data['week'] = (data['day']-1)//7 + 1\n","            data = data.groupby(['acc_id', 'week']).sum().reset_index()\n","            return data\n","        payment = payment_transform(payment)\n","        \n","        def temp_func(data):\n","            if data['adjust_survival_time']>64:\n","                over_value = data['adjust_survival_time'] - 64\n","                data['adjust_survival_time'] = data['survival_time'] - over_value\n","            else:\n","                data['adjust_survival_time'] = data['survival_time']\n","            return data['adjust_survival_time']\n","        \n","        self.train_data['adjust_survival_time'] = self.train_data[['survival_time', 'adjust_survival_time']].apply(temp_func, axis=1)\n","        self.train_data['payment'] = 0\n","        \n","        for week in range(1, 4):\n","            self.train_data.loc[self.train_data['week']==week, 'payment'] = pd.merge(self.train_data.loc[self.train_data['week']==week, 'acc_id'], \n","                                                                                     payment[payment['week']>week].groupby(\n","                                                                                         ['acc_id'])['amount_spent'].sum().reset_index().rename(columns={'amount_spent':'payment'}), \n","                                                                                     how='left', on='acc_id')['payment']\n","            self.train_data = self.train_data.fillna(0)\n","        else:\n","            self.train_data['total_amount_spent'] = self.train_data['amount_spent'] * self.train_data['adjust_survival_time'] + self.train_data['payment']\n","            self.train_data = self.train_data.drop(columns=['amount_spent', 'payment'])\n","            for week in range(1, 5):\n","                self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            else:\n","                self.train_data = self.train_data.drop(columns=['adjust_survival_time', 'survival_time'])\n","                \n","    \n","    \n","    \n","    \n","    \n","    \n","\n","\n","    def train_st(self, params, iteration, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        for idx, true in enumerate(np.unique(self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x))):\n","            self.true_index[true] = idx\n","        else:\n","            self.train_data[LABEL] = self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x).apply(lambda x: self.true_index[x])\n","            \n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        rus = RandomUnderSampler(random_state=self.seed)\n","        for idx, (trn_idx, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","\n","            temp_train_data = pd.DataFrame()\n","            X, y = rus.fit_resample(self.train_data.drop(columns='survival_time'), self.train_data['survival_time'])\n","            temp_train_data = pd.DataFrame(np.concatenate([X, y.reshape(-1, 1)], 1))\n","            temp_train_data.columns = self.train_data.columns\n","            \n","            trn_label = temp_train_data[LABEL]\n","            val_label = self.train_data.loc[val_idx, LABEL]\n","            \n","            if self.model=='lgb':\n","                train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","                valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","                lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 150, verbose_eval=500)\n","                self.lgb_model_st['model'+str(idx)] = lgb_model\n","                joblib.dump(lgb_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_st_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","                \n","            elif self.model=='rf':\n","                rf_model = RandomForestClassifier(n_estimators=1000, random_state=self.seed, max_depth=8).fit(temp_train_data[self.features_], trn_label)\n","                self.rf_model_st['model'+str(idx)] = rf_model\n","                joblib.dump(rf_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_st_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","    \n","    def train_tas(self, params, iteration, model):\n","        np.random.seed(self.seed)\n","        LABEL='total_amount_spent'\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (trn_idx, val_idx) in enumerate(kf.split(self.train_data)):\n","            \n","            temp_train_data = pd.DataFrame()\n","            round_basis=1;SIZE=46\n","            for round_value in np.round(self.train_data['total_amount_spent'], round_basis).value_counts().index:\n","                temp_df = self.train_data.loc[trn_idx][np.round(self.train_data.loc[trn_idx, 'total_amount_spent'], round_basis).isin([round_value])]\n","                try:\n","                    temp_df = temp_df.loc[np.random.choice(temp_df.index, size=SIZE, replace=False)]\n","                except:\n","                    pass\n","                temp_train_data = pd.concat([temp_train_data, temp_df]).reset_index(drop=True)\n","            else:\n","                temp_train_data = temp_train_data[temp_train_data['total_amount_spent']<30].reset_index(drop=True)\n","                \n","                trn_label = temp_train_data[LABEL]\n","                val_label = self.train_data.loc[val_idx, LABEL]\n","                if self.model =='lgb':\n","                    train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","                    valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","                    lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 1000, verbose_eval=3000)\n","                    self.lgb_model_tas['model'+str(idx)] = lgb_model\n","                    joblib.dump(lgb_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_tas_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","                elif self.model =='rf':\n","                    rf_model = RandomForestRegressor(n_estimators=200, random_state=self.seed, max_depth=8).fit(temp_train_data[self.features_], trn_label)\n","                    self.rf_model_tas['model'+str(idx)] = rf_model\n","                    joblib.dump(rf_model, \"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_tas_\" + str(self.seed) + '_' + str(idx) + '.ckpt')\n","                \n","\n","                \n","                \n","    \n","    def infer_oof(self, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        oof = np.zeros(len(self.train_data))\n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","\n","        for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            if self.model=='lgb':\n","                oof[val_idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_]), axis=1)\n","            elif self.model=='rf':\n","                oof[val_idx] = self.rf_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","            self.oof = oof.copy()\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:    \n","                self.oof['survival_time'] = self.oof['survival_time'].apply(lambda x: temp_dict[x])\n","                self.oof['infer_survival_time'] = self.oof['infer_survival_time'].apply(lambda x: temp_dict[x])\n","                return self.oof\n","    def infer_tas_oof(self, model):\n","        LABEL='total_amount_spent'\n","        oof = np.zeros(len(self.train_data))\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","            valid_df = self.train_data.loc[val_idx]\n","            if self.model=='lgb':\n","                oof[val_idx] = self.lgb_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","            elif self.model=='rf':\n","                oof[val_idx] = self.rf_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","            self.oof_tas = oof\n","            return self.oof_tas\n","                \n","    \n","    \n","    \n","    \n","    \n","    \n","    \n","    def infer_pred(self):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([len(test1), self.folds])\n","        pred2 = np.zeros([len(test2), self.folds])\n","        \n","        for idx in range(self.folds):\n","            if self.model=='lgb':\n","                pred1[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test1[self.features_]), axis=1)\n","                pred2[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test2[self.features_]), axis=1)\n","            elif self.model=='rf':\n","                pred1[:, idx] = self.rf_model_st['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_st['model'+str(idx)].predict(test2[self.features_])\n","        else:\n","            test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","            test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:\n","                for i in range(5):\n","                    test1[i] = test1[i].apply(lambda x: temp_dict[x])\n","                    test2[i] = test2[i].apply(lambda x: temp_dict[x])\n","                else:\n","                    self.pred_test1 = test1\n","                    self.pred_test2 = test2    \n","                    return self.pred_test1, self.pred_test2\n","    \n","    def infer_tas_pred(self):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([len(test1), self.folds])\n","        pred2 = np.zeros([len(test2), self.folds])\n","        \n","        for idx in range(self.folds):\n","            if self.model=='lgb':\n","                pred1[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test2[self.features_])\n","            elif self.model=='rf':\n","                pred1[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test2[self.features_])\n","            pred1[:, idx][pred1[:, idx]<0] = 0\n","            pred2[:, idx][pred2[:, idx]<0] = 0\n","        else:\n","            test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","            test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            return test1, test2\n","        \n","\n","        \n","        \n","        \n","        \n","    def load(self, return_data):\n","        if return_data=='train':\n","            return self.train_data\n","        elif return_data=='model_st':\n","            return self.lgb_model_st\n","        elif return_data=='model_tas':\n","            return self.lgb_model_tas\n","        elif return_data=='true_dict':\n","            return self.true_index\n","        elif return_data=='feature':\n","            return self.features_\n","        \n"," \n","\n","\n","    def joblib_load_oof(self, model):\n","        self.model=model\n","        LABEL='survival_time'\n","        \n","        for idx, true in enumerate(np.unique(self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x))):\n","            self.true_index[true] = idx\n","        else:\n","            self.train_data[LABEL] = self.train_data[LABEL].apply(lambda x: x if x==1 or x==64 else x//7*7).apply(lambda x: 1 if x==0 else x).apply(lambda x: self.true_index[x])\n","            \n","        oof = np.zeros(len(self.train_data))\n","        skf = StratifiedKFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","\n","        for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            if self.model=='lgb':\n","                lgb_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_st_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = np.argmax(lgb_model.predict(self.train_data.loc[val_idx, self.features_]), axis=1)\n","            elif self.model=='rf':\n","                rf_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_st_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = rf_model.predict(self.train_data.loc[val_idx, self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","            self.oof = oof.copy()\n","            \n","            temp_dict = defaultdict()\n","            for true, idx in zip(self.true_index.keys(), self.true_index.values()):\n","                temp_dict[idx] = true\n","            else:    \n","                self.oof['survival_time'] = self.oof['survival_time'].apply(lambda x: temp_dict[x])\n","                self.oof['infer_survival_time'] = self.oof['infer_survival_time'].apply(lambda x: temp_dict[x])\n","                return self.oof\n","            \n","    def joblib_load_tas_oof(self, model):\n","        LABEL='total_amount_spent'\n","        oof = np.zeros(len(self.train_data))\n","        kf = KFold(n_splits=self.folds, random_state=self.seed, shuffle=True)\n","        \n","        for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","            valid_df = self.train_data.loc[val_idx]\n","            if self.model=='lgb':\n","                lgb_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_tas_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = lgb_model.predict(valid_df[self.features_])\n","            elif self.model=='rf':\n","                rf_model = joblib.load(\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/rf_tas_\" + str(self.seed) + \"_\" + str(idx) + \".ckpt\")\n","                oof[val_idx] = rf_model.predict(valid_df[self.features_])\n","        else:\n","            oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","            oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","            self.oof_tas = oof\n","            return self.oof_tas\n","                "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yW8U6n1LNtXD","colab_type":"text"},"source":["## lgb"]},{"cell_type":"markdown","metadata":{"id":"HeP72FgU1FB1","colab_type":"text"},"source":["### parameters"]},{"cell_type":"code","metadata":{"id":"8tQTscQS0_x-","colab_type":"code","colab":{}},"source":["PARAMS_ST = {\n","    'objective':'multiclass',\n","    'num_class':11,\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.02,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'seed':SEED\n","}\n","\n","# PARAMS_ST = {\n","#     'objective':'regression',\n","#     \"boosting\": \"gbdt\",\n","#     'learning_rate': 0.03,\n","#     'subsample' : 0.6,\n","#     'sumsample_freq':1,\n","#     'colsample_bytree':0.221856,\n","#     'max_depth': 8,\n","#     'max_bin':255,\n","#     \"lambda_l1\": 0.25,\n","#     \"lambda_l2\": 1,\n","#     'min_child_weight': 0.2,\n","#     'min_child_samples': 20,\n","#     'min_gain_to_split':0.02,\n","#     'min_data_in_bin':3,\n","#     'bin_construct_sample_cnt':5000,\n","#     'cat_l2':10,\n","#     'verbose':-1,\n","#     'nthread':-1,\n","#     'seed':SEED\n","# }\n","\n","PARAMS_TAS = {\n","    'objective':'regression',\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.02,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'metrics':'mse',\n","    'seed':SEED\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CswEp2DE1IOe","colab_type":"text"},"source":["## execute"]},{"cell_type":"code","metadata":{"id":"qbFlSbEQPUtv","colab_type":"code","outputId":"afc42e4b-5439-481d-c823-3087de2650c2","executionInfo":{"status":"error","timestamp":1567850899419,"user_tz":-540,"elapsed":27316,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":434}},"source":["TYPE='activity'\n","FOLDS=5\n","select_model = 'lgb'\n","activity_model = model(act_train, train_label, act_test1, act_test2, TYPE, FOLDS, 42)\n","activity_model.labeling()\n","activity_model.train_st(PARAMS_ST, 5000, select_model)\n","act_oof_st = activity_model.infer_oof()\n","\n","activity_model.labeling_as()\n","activity_model.lgb_train_as(PARAMS_TAS, 50000, select_model)\n","act_oof_as = activity_model.infer_as_oof()"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","[500]\ttraining's multi_logloss: 1.24854\tvalid_1's multi_logloss: 2.0048\n","Early stopping, best iteration is:\n","[763]\ttraining's multi_logloss: 0.989434\tvalid_1's multi_logloss: 1.99798\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-afa7c8e21746>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mactivity_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mact_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_label\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mact_test1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mact_test2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTYPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFOLDS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mactivity_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabeling\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mactivity_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_st\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPARAMS_ST\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselect_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mact_oof_st\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mactivity_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfer_oof\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-b3f44a0bc3c1>\u001b[0m in \u001b[0;36mtrain_st\u001b[0;34m(self, params, iteration, model)\u001b[0m\n\u001b[1;32m     93\u001b[0m                 \u001b[0mlgb_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_sets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_df\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m150\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m500\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlgb_model_st\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'model'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlgb_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m                 \u001b[0mjoblib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlgb_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"/content/drive/My Drive/bigcontest2019/scripts/hh's work/model_joblib/lgb_st_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'.ckpt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'rf'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'joblib' is not defined"]}]},{"cell_type":"code","metadata":{"id":"oCh7ejmFpwbb","colab_type":"code","colab":{}},"source":["act_oof_st"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h_l-3LItpwxq","colab_type":"code","colab":{}},"source":["act_oof_as"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C9mN8eWuvRg1","colab_type":"code","colab":{}},"source":["TYPE='payment'\n","\n","payment_model = model(pay_train, train_label, pay_test1, pay_test2, TYPE, FOLDS)\n","payment_model.labeling()\n","payment_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","pay_oof_st = payment_model.infer_oof()\n","\n","payment_model.labeling_tas(train_payment)\n","payment_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","pay_oof_tas = payment_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"skY64jYNOSHS","colab_type":"code","colab":{}},"source":["TYPE='trade'\n","\n","trade_model = model(tra_train, train_label, tra_test1, tra_test2, TYPE, FOLDS)\n","trade_model.labeling()\n","trade_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","tra_oof_st = trade_model.infer_oof()\n","\n","trade_model.labeling_tas(train_payment)\n","trade_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","tra_oof_tas = trade_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7nIqItZ2OSLU","colab_type":"code","colab":{}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE, FOLDS)\n","combat_model.labeling()\n","combat_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","com_oof_st = combat_model.infer_oof()\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","com_oof_tas = combat_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lR1akul8OSOm","colab_type":"code","colab":{}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE, FOLDS)\n","pledge_model.labeling()\n","pledge_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","ple_oof_st = pledge_model.infer_oof()\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","ple_oof_tas = pledge_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hfT0leHp1vSE","colab_type":"code","colab":{}},"source":["act_pred_st1, act_pred_st2 = activity_model.infer_pred()\n","act_pred_tas1, act_pred_tas2 = activity_model.infer_tas_pred()\n","\n","pay_pred_st1, pay_pred_st2 = payment_model.infer_pred()\n","pay_pred_tas1, pay_pred_tas2 = payment_model.infer_tas_pred()\n","\n","tra_pred_st1, tra_pred_st2 = trade_model.infer_pred()\n","tra_pred_tas1, tra_pred_tas2 = trade_model.infer_tas_pred()\n","\n","com_pred_st1, com_pred_st2 = combat_model.infer_pred()\n","com_pred_tas1, com_pred_tas2 = combat_model.infer_tas_pred()\n","\n","ple_pred_st1, ple_pred_st2 = pledge_model.infer_pred()\n","ple_pred_tas1, ple_pred_tas2 = pledge_model.infer_tas_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6erAxyzNH-CR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bF2VfPzhH-IY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tgChsHqkH-GA","colab_type":"code","colab":{}},"source":["oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').median().reset_index()\n","# oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').agg(lambda x: x.value_counts().index[0]).reset_index()\n","oop_tas = pd.concat([act_oof_tas, pay_oof_tas, tra_oof_tas, com_oof_tas, ple_oof_tas]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fjaHUQYFYQ0O","colab_type":"code","colab":{}},"source":["# metrics\n","from scripts.metrics.score_function import score_function\n","\n","def oof_transform(st, tas):\n","    st_t = st.copy()\n","    tas_t = tas.copy()\n","    \n","    tas_t.loc[tas['infer_total_amount_spent']<0, 'infer_total_amount_spent'] = 0\n","    \n","    oof_df = pd.merge(st_t, tas_t, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","    oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","    oof_df['amount_spent'] = oof_df['amount_spent']/oof_df['survival_time']\n","    return oof_df\n","\n","def pred_transform(st, tas, acc_id):\n","    st_t = st.copy()\n","    tas_t = tas.copy()\n","    \n","    st_t['survival_time'] = st_t.drop(columns='acc_id').median(1)\n","    tas_t['amount_spent'] = tas_t.drop(columns='acc_id').median(1)\n","    \n","    pred_df = pd.merge(st_t, tas_t, how='left', on='acc_id')[['acc_id', 'survival_time', 'amount_spent']]\n","    pred_df['amount_spent'] = pred_df['amount_spent']/pred_df['survival_time']\n","    \n","    pred_df = pred_df[pred_df['acc_id'].isin(acc_id)]\n","    return pred_df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"fy0Q57IPKGD7","colab":{}},"source":["# metrics\n","from scripts.metrics.score_function import score_function\n","\n","def oof_transform2(st, asp):\n","    st_t = st.copy()\n","    as_t = asp.copy()\n","    \n","    as_t.loc[asp['infer_amount_spent']<0, 'infer_amount_spent'] = 0\n","    \n","    oof_df = pd.merge(st_t, as_t, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_amount_spent']]\n","    oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","    \n","    return oof_df\n","\n","def pred_transform2(st, asp, acc_id):\n","    st_t = st.copy()\n","    as_t = asp.copy()\n","    \n","    st_t['survival_time'] = st_t.drop(columns='acc_id').median(1)\n","    as_t['amount_spent'] = as_t.drop(columns='acc_id').median(1)\n","    \n","    pred_df = pd.merge(st_t, as_t, how='left', on='acc_id')[['acc_id', 'survival_time', 'amount_spent']]\n","    \n","    pred_df = pred_df[pred_df['acc_id'].isin(acc_id)]\n","    return pred_df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NW2ZcpJzYQxy","colab_type":"code","outputId":"6e3ea3c1-03c7-4dab-baef-61e86f5bf9f0","executionInfo":{"status":"ok","timestamp":1567699448985,"user_tz":-540,"elapsed":831,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["# 예측, 실제\n","score_function(oof_transform2(act_oof_st, act_oof_as),\n","               true_train_label)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["17626.067431961113\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["17626.067431961113"]},"metadata":{"tags":[]},"execution_count":148}]},{"cell_type":"markdown","metadata":{"id":"lD5zVy7JOFVM","colab_type":"text"},"source":["## rf"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"q8Yz2s_FOEK3"},"source":["## execute"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Qvl-4WX-OEK6","colab":{}},"source":["TYPE='activity'\n","FOLDS=5\n","\n","activity_model = model(act_train, train_label, act_test1, act_test2, TYPE, FOLDS)\n","activity_model.labeling()\n","activity_model.rf_train_st(100, SEED)\n","act_oof_st = activity_model.rf_infer_oof()\n","\n","activity_model.labeling_tas(train_payment)\n","activity_model.rf_train_tas(100, SEED)\n","act_oof_tas = activity_model.rf_infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JSqTgyvDbn3k","colab_type":"code","outputId":"8ac441b1-9bbb-43af-cdfb-d70d4d0345d5","executionInfo":{"status":"ok","timestamp":1567693122921,"user_tz":-540,"elapsed":104222,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["act_oof_st"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>survival_time</th>\n","      <th>infer_survival_time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>56</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>64</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>21</td>\n","      <td>64</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>42</td>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>38</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>43</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>50</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>53</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>54</td>\n","      <td>49</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>59</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>62</td>\n","      <td>7</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>63</td>\n","      <td>21</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>65</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>66</td>\n","      <td>42</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>67</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>75</td>\n","      <td>14</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>76</td>\n","      <td>64</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>77</td>\n","      <td>64</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>79</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>81</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>86</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>91</td>\n","      <td>64</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>92</td>\n","      <td>64</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>97</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>98</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39970</th>\n","      <td>130383</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39971</th>\n","      <td>130384</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39972</th>\n","      <td>130386</td>\n","      <td>49</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39973</th>\n","      <td>130390</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39974</th>\n","      <td>130391</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39975</th>\n","      <td>130392</td>\n","      <td>56</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>39976</th>\n","      <td>130398</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39977</th>\n","      <td>130401</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39978</th>\n","      <td>130403</td>\n","      <td>14</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39979</th>\n","      <td>130405</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39980</th>\n","      <td>130408</td>\n","      <td>64</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>39981</th>\n","      <td>130411</td>\n","      <td>7</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39982</th>\n","      <td>130413</td>\n","      <td>28</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>39983</th>\n","      <td>130414</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39984</th>\n","      <td>130415</td>\n","      <td>64</td>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>39985</th>\n","      <td>130416</td>\n","      <td>14</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39986</th>\n","      <td>130420</td>\n","      <td>49</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39987</th>\n","      <td>130433</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39988</th>\n","      <td>130434</td>\n","      <td>28</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39989</th>\n","      <td>130445</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39990</th>\n","      <td>130447</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39991</th>\n","      <td>130449</td>\n","      <td>64</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>39992</th>\n","      <td>130459</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39993</th>\n","      <td>130461</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39994</th>\n","      <td>130462</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39995</th>\n","      <td>130463</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39996</th>\n","      <td>130468</td>\n","      <td>1</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39997</th>\n","      <td>130469</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39998</th>\n","      <td>130470</td>\n","      <td>64</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>39999</th>\n","      <td>130473</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>40000 rows × 3 columns</p>\n","</div>"],"text/plain":["       acc_id  survival_time  infer_survival_time\n","0           2             64                   64\n","1           5             56                   63\n","2           8             64                   56\n","3          17             64                   63\n","4          20             64                   64\n","5          21             64                   56\n","6          31             42                   42\n","7          38             64                   64\n","8          41              1                    1\n","9          43             64                   14\n","10         50             64                   64\n","11         53             64                   64\n","12         54             49                   14\n","13         59             64                   64\n","14         62              7                   63\n","15         63             21                   14\n","16         65             64                   64\n","17         66             42                   64\n","18         67             64                   14\n","19         69             64                   64\n","20         75             14                   63\n","21         76             64                    1\n","22         77             64                    1\n","23         79             64                   64\n","24         81             64                   63\n","25         86             64                   64\n","26         91             64                   49\n","27         92             64                   49\n","28         97             64                   64\n","29         98             64                   64\n","...       ...            ...                  ...\n","39970  130383             64                   64\n","39971  130384              1                    1\n","39972  130386             49                   14\n","39973  130390             64                   64\n","39974  130391             64                   63\n","39975  130392             56                   56\n","39976  130398             64                   64\n","39977  130401             64                   64\n","39978  130403             14                   14\n","39979  130405             64                   63\n","39980  130408             64                   49\n","39981  130411              7                   63\n","39982  130413             28                   28\n","39983  130414             64                   64\n","39984  130415             64                   42\n","39985  130416             14                   64\n","39986  130420             49                   14\n","39987  130433             64                   64\n","39988  130434             28                   14\n","39989  130445             64                   64\n","39990  130447             64                   14\n","39991  130449             64                   56\n","39992  130459             64                   64\n","39993  130461              7                    1\n","39994  130462             64                   64\n","39995  130463             64                   14\n","39996  130468              1                   14\n","39997  130469             64                   64\n","39998  130470             64                   56\n","39999  130473             64                   64\n","\n","[40000 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":113}]},{"cell_type":"code","metadata":{"id":"IgcEWhw1bb0q","colab_type":"code","outputId":"0ec6dad8-2623-4176-f5c4-96335e619446","executionInfo":{"status":"ok","timestamp":1567693122968,"user_tz":-540,"elapsed":103874,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["act_oof_tas"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>total_amount_spent</th>\n","      <th>infer_total_amount_spent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>0.000000</td>\n","      <td>4.747170</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0.000000</td>\n","      <td>11.792947</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>0.731161</td>\n","      <td>11.169177</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17</td>\n","      <td>2.543119</td>\n","      <td>11.644904</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20</td>\n","      <td>1.876923</td>\n","      <td>14.938604</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>21</td>\n","      <td>6.633607</td>\n","      <td>12.754782</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>1.847393</td>\n","      <td>11.539494</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>38</td>\n","      <td>18.618039</td>\n","      <td>15.074988</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>41</td>\n","      <td>0.000000</td>\n","      <td>13.494551</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>43</td>\n","      <td>12.823083</td>\n","      <td>11.932485</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>50</td>\n","      <td>0.000000</td>\n","      <td>5.130380</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>53</td>\n","      <td>0.617766</td>\n","      <td>14.059761</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>54</td>\n","      <td>2.126156</td>\n","      <td>11.692117</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>59</td>\n","      <td>0.000000</td>\n","      <td>5.813833</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>62</td>\n","      <td>5.413692</td>\n","      <td>12.079391</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>63</td>\n","      <td>1.492771</td>\n","      <td>12.149808</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>65</td>\n","      <td>0.000000</td>\n","      <td>14.104030</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>66</td>\n","      <td>1.215453</td>\n","      <td>13.479283</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>67</td>\n","      <td>8.310907</td>\n","      <td>12.882432</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>1.096152</td>\n","      <td>12.117259</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>75</td>\n","      <td>0.000000</td>\n","      <td>11.517619</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>76</td>\n","      <td>0.000000</td>\n","      <td>10.760922</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>77</td>\n","      <td>0.000000</td>\n","      <td>7.566417</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>79</td>\n","      <td>0.000000</td>\n","      <td>5.505719</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>81</td>\n","      <td>7.806536</td>\n","      <td>11.614087</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>86</td>\n","      <td>1.299318</td>\n","      <td>4.908116</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>91</td>\n","      <td>17.570317</td>\n","      <td>14.393906</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>92</td>\n","      <td>0.000000</td>\n","      <td>10.402606</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>97</td>\n","      <td>0.000000</td>\n","      <td>7.792634</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>98</td>\n","      <td>6.614707</td>\n","      <td>14.066614</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39970</th>\n","      <td>130383</td>\n","      <td>0.000000</td>\n","      <td>5.970394</td>\n","    </tr>\n","    <tr>\n","      <th>39971</th>\n","      <td>130384</td>\n","      <td>0.000000</td>\n","      <td>10.213641</td>\n","    </tr>\n","    <tr>\n","      <th>39972</th>\n","      <td>130386</td>\n","      <td>17.343527</td>\n","      <td>12.214980</td>\n","    </tr>\n","    <tr>\n","      <th>39973</th>\n","      <td>130390</td>\n","      <td>4.138917</td>\n","      <td>5.559440</td>\n","    </tr>\n","    <tr>\n","      <th>39974</th>\n","      <td>130391</td>\n","      <td>6.790706</td>\n","      <td>12.507075</td>\n","    </tr>\n","    <tr>\n","      <th>39975</th>\n","      <td>130392</td>\n","      <td>8.993640</td>\n","      <td>11.538654</td>\n","    </tr>\n","    <tr>\n","      <th>39976</th>\n","      <td>130398</td>\n","      <td>0.261045</td>\n","      <td>11.662679</td>\n","    </tr>\n","    <tr>\n","      <th>39977</th>\n","      <td>130401</td>\n","      <td>1.852118</td>\n","      <td>13.893212</td>\n","    </tr>\n","    <tr>\n","      <th>39978</th>\n","      <td>130403</td>\n","      <td>0.000000</td>\n","      <td>11.734155</td>\n","    </tr>\n","    <tr>\n","      <th>39979</th>\n","      <td>130405</td>\n","      <td>1.446967</td>\n","      <td>12.075808</td>\n","    </tr>\n","    <tr>\n","      <th>39980</th>\n","      <td>130408</td>\n","      <td>0.000000</td>\n","      <td>13.147997</td>\n","    </tr>\n","    <tr>\n","      <th>39981</th>\n","      <td>130411</td>\n","      <td>6.163884</td>\n","      <td>12.014940</td>\n","    </tr>\n","    <tr>\n","      <th>39982</th>\n","      <td>130413</td>\n","      <td>0.000000</td>\n","      <td>10.648863</td>\n","    </tr>\n","    <tr>\n","      <th>39983</th>\n","      <td>130414</td>\n","      <td>3.984180</td>\n","      <td>14.270788</td>\n","    </tr>\n","    <tr>\n","      <th>39984</th>\n","      <td>130415</td>\n","      <td>6.472964</td>\n","      <td>12.469949</td>\n","    </tr>\n","    <tr>\n","      <th>39985</th>\n","      <td>130416</td>\n","      <td>0.000000</td>\n","      <td>5.618869</td>\n","    </tr>\n","    <tr>\n","      <th>39986</th>\n","      <td>130420</td>\n","      <td>0.720531</td>\n","      <td>13.110582</td>\n","    </tr>\n","    <tr>\n","      <th>39987</th>\n","      <td>130433</td>\n","      <td>0.036617</td>\n","      <td>12.686134</td>\n","    </tr>\n","    <tr>\n","      <th>39988</th>\n","      <td>130434</td>\n","      <td>17.124513</td>\n","      <td>13.026984</td>\n","    </tr>\n","    <tr>\n","      <th>39989</th>\n","      <td>130445</td>\n","      <td>0.000000</td>\n","      <td>9.172331</td>\n","    </tr>\n","    <tr>\n","      <th>39990</th>\n","      <td>130447</td>\n","      <td>7.563209</td>\n","      <td>12.053554</td>\n","    </tr>\n","    <tr>\n","      <th>39991</th>\n","      <td>130449</td>\n","      <td>1.096152</td>\n","      <td>12.051770</td>\n","    </tr>\n","    <tr>\n","      <th>39992</th>\n","      <td>130459</td>\n","      <td>0.000000</td>\n","      <td>4.961142</td>\n","    </tr>\n","    <tr>\n","      <th>39993</th>\n","      <td>130461</td>\n","      <td>0.000000</td>\n","      <td>12.805257</td>\n","    </tr>\n","    <tr>\n","      <th>39994</th>\n","      <td>130462</td>\n","      <td>0.000000</td>\n","      <td>12.114367</td>\n","    </tr>\n","    <tr>\n","      <th>39995</th>\n","      <td>130463</td>\n","      <td>0.000000</td>\n","      <td>12.452417</td>\n","    </tr>\n","    <tr>\n","      <th>39996</th>\n","      <td>130468</td>\n","      <td>0.000000</td>\n","      <td>11.409957</td>\n","    </tr>\n","    <tr>\n","      <th>39997</th>\n","      <td>130469</td>\n","      <td>1.046541</td>\n","      <td>13.664859</td>\n","    </tr>\n","    <tr>\n","      <th>39998</th>\n","      <td>130470</td>\n","      <td>2.167498</td>\n","      <td>11.128454</td>\n","    </tr>\n","    <tr>\n","      <th>39999</th>\n","      <td>130473</td>\n","      <td>19.871290</td>\n","      <td>13.471697</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>40000 rows × 3 columns</p>\n","</div>"],"text/plain":["       acc_id  total_amount_spent  infer_total_amount_spent\n","0           2            0.000000                  4.747170\n","1           5            0.000000                 11.792947\n","2           8            0.731161                 11.169177\n","3          17            2.543119                 11.644904\n","4          20            1.876923                 14.938604\n","5          21            6.633607                 12.754782\n","6          31            1.847393                 11.539494\n","7          38           18.618039                 15.074988\n","8          41            0.000000                 13.494551\n","9          43           12.823083                 11.932485\n","10         50            0.000000                  5.130380\n","11         53            0.617766                 14.059761\n","12         54            2.126156                 11.692117\n","13         59            0.000000                  5.813833\n","14         62            5.413692                 12.079391\n","15         63            1.492771                 12.149808\n","16         65            0.000000                 14.104030\n","17         66            1.215453                 13.479283\n","18         67            8.310907                 12.882432\n","19         69            1.096152                 12.117259\n","20         75            0.000000                 11.517619\n","21         76            0.000000                 10.760922\n","22         77            0.000000                  7.566417\n","23         79            0.000000                  5.505719\n","24         81            7.806536                 11.614087\n","25         86            1.299318                  4.908116\n","26         91           17.570317                 14.393906\n","27         92            0.000000                 10.402606\n","28         97            0.000000                  7.792634\n","29         98            6.614707                 14.066614\n","...       ...                 ...                       ...\n","39970  130383            0.000000                  5.970394\n","39971  130384            0.000000                 10.213641\n","39972  130386           17.343527                 12.214980\n","39973  130390            4.138917                  5.559440\n","39974  130391            6.790706                 12.507075\n","39975  130392            8.993640                 11.538654\n","39976  130398            0.261045                 11.662679\n","39977  130401            1.852118                 13.893212\n","39978  130403            0.000000                 11.734155\n","39979  130405            1.446967                 12.075808\n","39980  130408            0.000000                 13.147997\n","39981  130411            6.163884                 12.014940\n","39982  130413            0.000000                 10.648863\n","39983  130414            3.984180                 14.270788\n","39984  130415            6.472964                 12.469949\n","39985  130416            0.000000                  5.618869\n","39986  130420            0.720531                 13.110582\n","39987  130433            0.036617                 12.686134\n","39988  130434           17.124513                 13.026984\n","39989  130445            0.000000                  9.172331\n","39990  130447            7.563209                 12.053554\n","39991  130449            1.096152                 12.051770\n","39992  130459            0.000000                  4.961142\n","39993  130461            0.000000                 12.805257\n","39994  130462            0.000000                 12.114367\n","39995  130463            0.000000                 12.452417\n","39996  130468            0.000000                 11.409957\n","39997  130469            1.046541                 13.664859\n","39998  130470            2.167498                 11.128454\n","39999  130473           19.871290                 13.471697\n","\n","[40000 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":114}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"gEhxuoXiOEK-","outputId":"3d90f26e-033b-401d-9714-1e2a9e15a897","executionInfo":{"status":"error","timestamp":1567686967550,"user_tz":-540,"elapsed":1954,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":404}},"source":["TYPE='payment'\n","\n","payment_model = model(pay_train, train_label, pay_test1, pay_test2, TYPE, FOLDS)\n","payment_model.labeling()\n","payment_model.rf_train_st(50, SEED)\n","pay_oof_st = payment_model.rf_infer_oof()\n","\n","payment_model.labeling_tas(train_payment)\n","payment_model.rf_train_tas(50, SEED)\n","pay_oof_tas = payment_model.rf_infer_tas_oof()"],"execution_count":0,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-fc9a588e12f9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabeling\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrf_train_st\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSEED\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mpay_oof_st\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrf_infer_oof\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabeling_tas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_payment\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-42-75356114b92b>\u001b[0m in \u001b[0;36mrf_infer_oof\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    293\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 294\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwds)\u001b[0m\n\u001b[1;32m   3589\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3590\u001b[0m                 \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3591\u001b[0;31m                 \u001b[0mmapped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_infer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconvert_dtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3593\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","\u001b[0;32m<ipython-input-42-75356114b92b>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    293\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 294\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 29.0"]}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"081zOs7_OELB","colab":{}},"source":["TYPE='trade'\n","\n","trade_model = model(tra_train, train_label, tra_test1, tra_test2, TYPE, FOLDS)\n","trade_model.labeling()\n","trade_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","tra_oof_st = trade_model.infer_oof()\n","\n","trade_model.labeling_tas(train_payment)\n","trade_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","tra_oof_tas = trade_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"28RJ_p-eOELH","colab":{}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE, FOLDS)\n","combat_model.labeling()\n","combat_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","com_oof_st = combat_model.infer_oof()\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","com_oof_tas = combat_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"HBLgU4a2OELJ","colab":{}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE, FOLDS)\n","pledge_model.labeling()\n","pledge_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","ple_oof_st = pledge_model.infer_oof()\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","ple_oof_tas = pledge_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"P5I7RpdDOELM","colab":{}},"source":["act_pred_st1, act_pred_st2 = activity_model.infer_pred()\n","act_pred_tas1, act_pred_tas2 = activity_model.infer_tas_pred()\n","\n","pay_pred_st1, pay_pred_st2 = payment_model.infer_pred()\n","pay_pred_tas1, pay_pred_tas2 = payment_model.infer_tas_pred()\n","\n","tra_pred_st1, tra_pred_st2 = trade_model.infer_pred()\n","tra_pred_tas1, tra_pred_tas2 = trade_model.infer_tas_pred()\n","\n","com_pred_st1, com_pred_st2 = combat_model.infer_pred()\n","com_pred_tas1, com_pred_tas2 = combat_model.infer_tas_pred()\n","\n","ple_pred_st1, ple_pred_st2 = pledge_model.infer_pred()\n","ple_pred_tas1, ple_pred_tas2 = pledge_model.infer_tas_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"-XcjzFblOELO","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"i0IV36fzOELW","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"p-mOc4PFOELZ","colab":{}},"source":["oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').median().reset_index()\n","# oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').agg(lambda x: x.value_counts().index[0]).reset_index()\n","oop_tas = pd.concat([act_oof_tas, pay_oof_tas, tra_oof_tas, com_oof_tas, ple_oof_tas]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"6pluF1DxgfHi"},"source":["## xtree"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Xvczi85ZgfHo"},"source":["## execute"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"gFWE0or1gfHq","colab":{}},"source":["TYPE='activity'\n","FOLDS=10\n","\n","activity_model = model(act_train, train_label, act_test1, act_test2, TYPE, FOLDS)\n","activity_model.labeling()\n","activity_model.xtree_train_st(100, SEED)\n","act_oof_st = activity_model.xtree_infer_oof()\n","\n","activity_model.labeling_tas(train_payment)\n","activity_model.xtree_train_tas(100, SEED)\n","act_oof_tas = activity_model.xtree_infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"20ef0f20-8df4-4f50-c1e6-da917ae2eadf","executionInfo":{"status":"ok","timestamp":1567697177007,"user_tz":-540,"elapsed":188852,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"id":"lKmd8_bGgfHw","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["act_oof_st"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>survival_time</th>\n","      <th>infer_survival_time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>56</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>21</td>\n","      <td>64</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>42</td>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>38</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>43</td>\n","      <td>64</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>50</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>53</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>54</td>\n","      <td>49</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>59</td>\n","      <td>64</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>62</td>\n","      <td>7</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>63</td>\n","      <td>21</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>65</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>66</td>\n","      <td>42</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>67</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>64</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>75</td>\n","      <td>14</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>76</td>\n","      <td>64</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>77</td>\n","      <td>64</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>79</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>81</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>86</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>91</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>92</td>\n","      <td>64</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>97</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>98</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39970</th>\n","      <td>130383</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39971</th>\n","      <td>130384</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39972</th>\n","      <td>130386</td>\n","      <td>49</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39973</th>\n","      <td>130390</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39974</th>\n","      <td>130391</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39975</th>\n","      <td>130392</td>\n","      <td>56</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39976</th>\n","      <td>130398</td>\n","      <td>64</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>39977</th>\n","      <td>130401</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39978</th>\n","      <td>130403</td>\n","      <td>14</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39979</th>\n","      <td>130405</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39980</th>\n","      <td>130408</td>\n","      <td>64</td>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>39981</th>\n","      <td>130411</td>\n","      <td>7</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39982</th>\n","      <td>130413</td>\n","      <td>28</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>39983</th>\n","      <td>130414</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39984</th>\n","      <td>130415</td>\n","      <td>64</td>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>39985</th>\n","      <td>130416</td>\n","      <td>14</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39986</th>\n","      <td>130420</td>\n","      <td>49</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39987</th>\n","      <td>130433</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39988</th>\n","      <td>130434</td>\n","      <td>28</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39989</th>\n","      <td>130445</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39990</th>\n","      <td>130447</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39991</th>\n","      <td>130449</td>\n","      <td>64</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>39992</th>\n","      <td>130459</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39993</th>\n","      <td>130461</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39994</th>\n","      <td>130462</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39995</th>\n","      <td>130463</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39996</th>\n","      <td>130468</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39997</th>\n","      <td>130469</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>39998</th>\n","      <td>130470</td>\n","      <td>64</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39999</th>\n","      <td>130473</td>\n","      <td>64</td>\n","      <td>64</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>40000 rows × 3 columns</p>\n","</div>"],"text/plain":["       acc_id  survival_time  infer_survival_time\n","0           2             64                   64\n","1           5             56                   63\n","2           8             64                   63\n","3          17             64                   63\n","4          20             64                   64\n","5          21             64                    7\n","6          31             42                   42\n","7          38             64                   64\n","8          41              1                    1\n","9          43             64                    7\n","10         50             64                   64\n","11         53             64                   64\n","12         54             49                   14\n","13         59             64                   28\n","14         62              7                   63\n","15         63             21                   14\n","16         65             64                   64\n","17         66             42                   64\n","18         67             64                   14\n","19         69             64                   49\n","20         75             14                   63\n","21         76             64                   28\n","22         77             64                   28\n","23         79             64                   64\n","24         81             64                   63\n","25         86             64                   64\n","26         91             64                   64\n","27         92             64                   28\n","28         97             64                   64\n","29         98             64                   64\n","...       ...            ...                  ...\n","39970  130383             64                   64\n","39971  130384              1                    1\n","39972  130386             49                   14\n","39973  130390             64                   64\n","39974  130391             64                   63\n","39975  130392             56                   63\n","39976  130398             64                   56\n","39977  130401             64                   64\n","39978  130403             14                   14\n","39979  130405             64                   63\n","39980  130408             64                   49\n","39981  130411              7                   63\n","39982  130413             28                   28\n","39983  130414             64                   64\n","39984  130415             64                   42\n","39985  130416             14                   64\n","39986  130420             49                   14\n","39987  130433             64                   63\n","39988  130434             28                   14\n","39989  130445             64                   64\n","39990  130447             64                   14\n","39991  130449             64                   63\n","39992  130459             64                   64\n","39993  130461              7                    1\n","39994  130462             64                   14\n","39995  130463             64                   14\n","39996  130468              1                    1\n","39997  130469             64                   64\n","39998  130470             64                   14\n","39999  130473             64                   64\n","\n","[40000 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":123}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"5b54f108-5112-442c-98b3-15b59617da41","executionInfo":{"status":"ok","timestamp":1567697177009,"user_tz":-540,"elapsed":188049,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"id":"WEKuTCdEgfH0","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["act_oof_tas"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>total_amount_spent</th>\n","      <th>infer_total_amount_spent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>0.000000</td>\n","      <td>5.443212</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0.000000</td>\n","      <td>11.996834</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>0.731161</td>\n","      <td>11.972022</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17</td>\n","      <td>2.543119</td>\n","      <td>12.129279</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20</td>\n","      <td>1.876923</td>\n","      <td>15.508491</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>21</td>\n","      <td>6.633607</td>\n","      <td>12.187670</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>1.847393</td>\n","      <td>13.292034</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>38</td>\n","      <td>18.618039</td>\n","      <td>15.888275</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>41</td>\n","      <td>0.000000</td>\n","      <td>13.770732</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>43</td>\n","      <td>12.823083</td>\n","      <td>11.643270</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>50</td>\n","      <td>0.000000</td>\n","      <td>6.356541</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>53</td>\n","      <td>0.617766</td>\n","      <td>16.292343</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>54</td>\n","      <td>2.126156</td>\n","      <td>10.886863</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>59</td>\n","      <td>0.000000</td>\n","      <td>6.235907</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>62</td>\n","      <td>5.413692</td>\n","      <td>12.384908</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>63</td>\n","      <td>1.492771</td>\n","      <td>12.303826</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>65</td>\n","      <td>0.000000</td>\n","      <td>15.286874</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>66</td>\n","      <td>1.215453</td>\n","      <td>13.388244</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>67</td>\n","      <td>8.310907</td>\n","      <td>14.125582</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>1.096152</td>\n","      <td>11.872087</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>75</td>\n","      <td>0.000000</td>\n","      <td>12.051726</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>76</td>\n","      <td>0.000000</td>\n","      <td>11.136039</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>77</td>\n","      <td>0.000000</td>\n","      <td>11.217287</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>79</td>\n","      <td>0.000000</td>\n","      <td>8.084020</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>81</td>\n","      <td>7.806536</td>\n","      <td>10.690761</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>86</td>\n","      <td>1.299318</td>\n","      <td>7.302309</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>91</td>\n","      <td>17.570317</td>\n","      <td>17.001745</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>92</td>\n","      <td>0.000000</td>\n","      <td>10.932858</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>97</td>\n","      <td>0.000000</td>\n","      <td>6.257728</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>98</td>\n","      <td>6.614707</td>\n","      <td>14.002830</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39970</th>\n","      <td>130383</td>\n","      <td>0.000000</td>\n","      <td>6.386845</td>\n","    </tr>\n","    <tr>\n","      <th>39971</th>\n","      <td>130384</td>\n","      <td>0.000000</td>\n","      <td>12.393435</td>\n","    </tr>\n","    <tr>\n","      <th>39972</th>\n","      <td>130386</td>\n","      <td>17.343527</td>\n","      <td>12.140230</td>\n","    </tr>\n","    <tr>\n","      <th>39973</th>\n","      <td>130390</td>\n","      <td>4.138917</td>\n","      <td>10.354807</td>\n","    </tr>\n","    <tr>\n","      <th>39974</th>\n","      <td>130391</td>\n","      <td>6.790706</td>\n","      <td>12.061463</td>\n","    </tr>\n","    <tr>\n","      <th>39975</th>\n","      <td>130392</td>\n","      <td>8.993640</td>\n","      <td>12.208220</td>\n","    </tr>\n","    <tr>\n","      <th>39976</th>\n","      <td>130398</td>\n","      <td>0.261045</td>\n","      <td>11.901070</td>\n","    </tr>\n","    <tr>\n","      <th>39977</th>\n","      <td>130401</td>\n","      <td>1.852118</td>\n","      <td>15.402561</td>\n","    </tr>\n","    <tr>\n","      <th>39978</th>\n","      <td>130403</td>\n","      <td>0.000000</td>\n","      <td>11.000699</td>\n","    </tr>\n","    <tr>\n","      <th>39979</th>\n","      <td>130405</td>\n","      <td>1.446967</td>\n","      <td>12.626035</td>\n","    </tr>\n","    <tr>\n","      <th>39980</th>\n","      <td>130408</td>\n","      <td>0.000000</td>\n","      <td>12.295768</td>\n","    </tr>\n","    <tr>\n","      <th>39981</th>\n","      <td>130411</td>\n","      <td>6.163884</td>\n","      <td>12.283961</td>\n","    </tr>\n","    <tr>\n","      <th>39982</th>\n","      <td>130413</td>\n","      <td>0.000000</td>\n","      <td>11.494953</td>\n","    </tr>\n","    <tr>\n","      <th>39983</th>\n","      <td>130414</td>\n","      <td>3.984180</td>\n","      <td>14.504263</td>\n","    </tr>\n","    <tr>\n","      <th>39984</th>\n","      <td>130415</td>\n","      <td>6.472964</td>\n","      <td>13.135657</td>\n","    </tr>\n","    <tr>\n","      <th>39985</th>\n","      <td>130416</td>\n","      <td>0.000000</td>\n","      <td>7.016222</td>\n","    </tr>\n","    <tr>\n","      <th>39986</th>\n","      <td>130420</td>\n","      <td>0.720531</td>\n","      <td>12.395491</td>\n","    </tr>\n","    <tr>\n","      <th>39987</th>\n","      <td>130433</td>\n","      <td>0.036617</td>\n","      <td>12.249230</td>\n","    </tr>\n","    <tr>\n","      <th>39988</th>\n","      <td>130434</td>\n","      <td>17.124513</td>\n","      <td>12.660102</td>\n","    </tr>\n","    <tr>\n","      <th>39989</th>\n","      <td>130445</td>\n","      <td>0.000000</td>\n","      <td>7.776526</td>\n","    </tr>\n","    <tr>\n","      <th>39990</th>\n","      <td>130447</td>\n","      <td>7.563209</td>\n","      <td>12.056186</td>\n","    </tr>\n","    <tr>\n","      <th>39991</th>\n","      <td>130449</td>\n","      <td>1.096152</td>\n","      <td>12.949063</td>\n","    </tr>\n","    <tr>\n","      <th>39992</th>\n","      <td>130459</td>\n","      <td>0.000000</td>\n","      <td>7.677162</td>\n","    </tr>\n","    <tr>\n","      <th>39993</th>\n","      <td>130461</td>\n","      <td>0.000000</td>\n","      <td>12.814167</td>\n","    </tr>\n","    <tr>\n","      <th>39994</th>\n","      <td>130462</td>\n","      <td>0.000000</td>\n","      <td>12.170711</td>\n","    </tr>\n","    <tr>\n","      <th>39995</th>\n","      <td>130463</td>\n","      <td>0.000000</td>\n","      <td>9.993525</td>\n","    </tr>\n","    <tr>\n","      <th>39996</th>\n","      <td>130468</td>\n","      <td>0.000000</td>\n","      <td>12.420316</td>\n","    </tr>\n","    <tr>\n","      <th>39997</th>\n","      <td>130469</td>\n","      <td>1.046541</td>\n","      <td>13.763253</td>\n","    </tr>\n","    <tr>\n","      <th>39998</th>\n","      <td>130470</td>\n","      <td>2.167498</td>\n","      <td>11.972461</td>\n","    </tr>\n","    <tr>\n","      <th>39999</th>\n","      <td>130473</td>\n","      <td>19.871290</td>\n","      <td>13.476243</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>40000 rows × 3 columns</p>\n","</div>"],"text/plain":["       acc_id  total_amount_spent  infer_total_amount_spent\n","0           2            0.000000                  5.443212\n","1           5            0.000000                 11.996834\n","2           8            0.731161                 11.972022\n","3          17            2.543119                 12.129279\n","4          20            1.876923                 15.508491\n","5          21            6.633607                 12.187670\n","6          31            1.847393                 13.292034\n","7          38           18.618039                 15.888275\n","8          41            0.000000                 13.770732\n","9          43           12.823083                 11.643270\n","10         50            0.000000                  6.356541\n","11         53            0.617766                 16.292343\n","12         54            2.126156                 10.886863\n","13         59            0.000000                  6.235907\n","14         62            5.413692                 12.384908\n","15         63            1.492771                 12.303826\n","16         65            0.000000                 15.286874\n","17         66            1.215453                 13.388244\n","18         67            8.310907                 14.125582\n","19         69            1.096152                 11.872087\n","20         75            0.000000                 12.051726\n","21         76            0.000000                 11.136039\n","22         77            0.000000                 11.217287\n","23         79            0.000000                  8.084020\n","24         81            7.806536                 10.690761\n","25         86            1.299318                  7.302309\n","26         91           17.570317                 17.001745\n","27         92            0.000000                 10.932858\n","28         97            0.000000                  6.257728\n","29         98            6.614707                 14.002830\n","...       ...                 ...                       ...\n","39970  130383            0.000000                  6.386845\n","39971  130384            0.000000                 12.393435\n","39972  130386           17.343527                 12.140230\n","39973  130390            4.138917                 10.354807\n","39974  130391            6.790706                 12.061463\n","39975  130392            8.993640                 12.208220\n","39976  130398            0.261045                 11.901070\n","39977  130401            1.852118                 15.402561\n","39978  130403            0.000000                 11.000699\n","39979  130405            1.446967                 12.626035\n","39980  130408            0.000000                 12.295768\n","39981  130411            6.163884                 12.283961\n","39982  130413            0.000000                 11.494953\n","39983  130414            3.984180                 14.504263\n","39984  130415            6.472964                 13.135657\n","39985  130416            0.000000                  7.016222\n","39986  130420            0.720531                 12.395491\n","39987  130433            0.036617                 12.249230\n","39988  130434           17.124513                 12.660102\n","39989  130445            0.000000                  7.776526\n","39990  130447            7.563209                 12.056186\n","39991  130449            1.096152                 12.949063\n","39992  130459            0.000000                  7.677162\n","39993  130461            0.000000                 12.814167\n","39994  130462            0.000000                 12.170711\n","39995  130463            0.000000                  9.993525\n","39996  130468            0.000000                 12.420316\n","39997  130469            1.046541                 13.763253\n","39998  130470            2.167498                 11.972461\n","39999  130473           19.871290                 13.476243\n","\n","[40000 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":124}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"3d90f26e-033b-401d-9714-1e2a9e15a897","executionInfo":{"status":"error","timestamp":1567686967550,"user_tz":-540,"elapsed":1954,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"id":"GR8GbqZmgfH4","colab":{"base_uri":"https://localhost:8080/","height":404}},"source":["TYPE='payment'\n","\n","payment_model = model(pay_train, train_label, pay_test1, pay_test2, TYPE, FOLDS)\n","payment_model.labeling()\n","payment_model.rf_train_st(50, SEED)\n","pay_oof_st = payment_model.rf_infer_oof()\n","\n","payment_model.labeling_tas(train_payment)\n","payment_model.rf_train_tas(50, SEED)\n","pay_oof_tas = payment_model.rf_infer_tas_oof()"],"execution_count":0,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-fc9a588e12f9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabeling\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrf_train_st\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSEED\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mpay_oof_st\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrf_infer_oof\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mpayment_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabeling_tas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_payment\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-42-75356114b92b>\u001b[0m in \u001b[0;36mrf_infer_oof\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    293\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 294\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwds)\u001b[0m\n\u001b[1;32m   3589\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3590\u001b[0m                 \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3591\u001b[0;31m                 \u001b[0mmapped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_infer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconvert_dtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3593\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmapped\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","\u001b[0;32m<ipython-input-42-75356114b92b>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    293\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 294\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtemp_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 29.0"]}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"doBtEU7BgfH8","colab":{}},"source":["TYPE='trade'\n","\n","trade_model = model(tra_train, train_label, tra_test1, tra_test2, TYPE, FOLDS)\n","trade_model.labeling()\n","trade_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","tra_oof_st = trade_model.infer_oof()\n","\n","trade_model.labeling_tas(train_payment)\n","trade_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","tra_oof_tas = trade_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"tAatYXgkgfIA","colab":{}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE, FOLDS)\n","combat_model.labeling()\n","combat_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","com_oof_st = combat_model.infer_oof()\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.lgb_train_tas(PARAMS_TAS, 50000, SEED)\n","com_oof_tas = combat_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"26K0XHfkgfID","colab":{}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE, FOLDS)\n","pledge_model.labeling()\n","pledge_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","ple_oof_st = pledge_model.infer_oof()\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","ple_oof_tas = pledge_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"1IUI3qqfgfIG","colab":{}},"source":["act_pred_st1, act_pred_st2 = activity_model.infer_pred()\n","act_pred_tas1, act_pred_tas2 = activity_model.infer_tas_pred()\n","\n","pay_pred_st1, pay_pred_st2 = payment_model.infer_pred()\n","pay_pred_tas1, pay_pred_tas2 = payment_model.infer_tas_pred()\n","\n","tra_pred_st1, tra_pred_st2 = trade_model.infer_pred()\n","tra_pred_tas1, tra_pred_tas2 = trade_model.infer_tas_pred()\n","\n","com_pred_st1, com_pred_st2 = combat_model.infer_pred()\n","com_pred_tas1, com_pred_tas2 = combat_model.infer_tas_pred()\n","\n","ple_pred_st1, ple_pred_st2 = pledge_model.infer_pred()\n","ple_pred_tas1, ple_pred_tas2 = pledge_model.infer_tas_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"PFR-wQougfIJ","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"D93vOIP-gfIR","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"b3yIJ4TQgfIU","colab":{}},"source":["oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').median().reset_index()\n","# oop_st = pd.concat([act_oof_st, pay_oof_st, tra_oof_st, com_oof_st, ple_oof_st]).groupby('acc_id').agg(lambda x: x.value_counts().index[0]).reset_index()\n","oop_tas = pd.concat([act_oof_tas, pay_oof_tas, tra_oof_tas, com_oof_tas, ple_oof_tas]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w8S3u2N2-kMH","colab_type":"text"},"source":["# submission"]},{"cell_type":"code","metadata":{"id":"DBr7HXHg89M9","colab_type":"code","colab":{}},"source":["pred1_st = pd.concat([act_pred_st1, pay_pred_st1, tra_pred_st1, com_pred_st1, ple_pred_st1]).groupby('acc_id').median().reset_index()\n","pred1_tas = pd.concat([act_pred_tas1, pay_pred_tas1, tra_pred_tas1, com_pred_tas1, ple_pred_tas1]).groupby('acc_id').median().reset_index()\n","\n","pred2_st = pd.concat([act_pred_st2, pay_pred_st2, tra_pred_st2, com_pred_st2, ple_pred_st2]).groupby('acc_id').median().reset_index()\n","pred2_tas = pd.concat([act_pred_tas2, pay_pred_tas2, tra_pred_tas2, com_pred_tas2, ple_pred_tas2]).groupby('acc_id').median().reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RxkCaXrN-kI1","colab_type":"code","colab":{}},"source":["pred_transform(pred1_st, pred1_tas, test1_activity['acc_id'].unique()).to_csv('/content/test1_predict.csv', index=False)\n","pred_transform(pred2_st, pred2_tas, test2_activity['acc_id'].unique()).to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VAXA9yRoCNwE","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UR6h_5DB9-qZ","colab_type":"code","colab":{}},"source":["act_pred_st1, act_pred_st2 = activity_model.lgb_infer_pred()\n","act_pred_as1, act_pred_as2 = activity_model.lgb_infer_as_pred()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X9hKKH9q_7wc","colab_type":"code","colab":{}},"source":["pred_transform2(act_pred_st1, act_pred_as1, test1_activity['acc_id'].unique()).to_csv('./scripts/model/HH/test1_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"K-xa2hVjAp1m","colab_type":"code","colab":{}},"source":["pred_transform2(act_pred_st2, act_pred_as2, test2_activity['acc_id'].unique()).to_csv('./scripts/model/HH/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VYO9hp8KOPBc","colab_type":"code","outputId":"fd06fa9e-1263-44e1-a293-9af03ef48fc5","executionInfo":{"status":"ok","timestamp":1567700357261,"user_tz":-540,"elapsed":4301,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["!ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":["data  data_description\tprior_cp_description  scripts\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2B8OZPIxOP51","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ziTI-KtagNWE","colab_type":"text"},"source":["# EDA"]},{"cell_type":"code","metadata":{"id":"aQdpXxOAgOKs","colab_type":"code","colab":{}},"source":["rus = RandomUnderSampler(random_state=42)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OKNAe4BGgP6j","colab_type":"code","colab":{}},"source":["rus.fit_resample(act_train, train_label)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yngoqdCRg19r","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"ed041e5b-2afe-442b-e95b-cb40b2c4f7cb","executionInfo":{"status":"ok","timestamp":1567856232483,"user_tz":-540,"elapsed":769,"user":{"displayName":"허현","photoUrl":"","userId":"15943349948421319767"}}},"source":["act_train.shape, train_label.shape"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((149226, 57), (40000, 3))"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"dQ7nte8Rg4J-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}