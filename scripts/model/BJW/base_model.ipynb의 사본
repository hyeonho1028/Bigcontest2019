{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"base_model.ipynb의 사본","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"wGDLy_XM3epP","colab_type":"code","outputId":"a6e5a055-dcf9-4d92-87ba-76cb2d14fed2","executionInfo":{"status":"ok","timestamp":1567145682451,"user_tz":-540,"elapsed":583,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sK-XT6Ys6EOG","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import gc\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.model_selection import StratifiedKFold\n","\n","# model\n","from sklearn.ensemble import RandomForestRegressor\n","\n","SEED=42"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WPao6FY66MHm","colab_type":"code","outputId":"a7020394-f113-439b-859a-455b62a3d87b","executionInfo":{"status":"ok","timestamp":1566559132527,"user_tz":-540,"elapsed":1360,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["path = 'drive/My Drive/bigcontest2019/data/'\n","print(os.listdir(path + 'train'),'\\n', \n","      os.listdir(path+ 'test'),'\\n', \n","#       os.listdir(path + '../metrics'),'\\n', \n","      os.listdir(path + '../scripts'))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["['train_payment.csv', 'train_trade.csv', 'train_pledge.csv', 'train_combat.csv', 'train_label.csv', 'train_activity.csv', 'train_merge_bjw.csv'] \n"," ['test1_activity.csv', 'test1_combat.csv', 'test2_activity.csv', 'test1_pledge.csv', 'test2_combat.csv', 'test2_trade.csv', 'test1_trade.csv', 'test1_payment.csv', 'test2_payment.csv', 'test2_pledge.csv'] \n"," ['explortary data', 'model', 'data merge']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WKdVhJyK6MLE","colab_type":"code","colab":{}},"source":["train_label = pd.read_csv(path + 'train/train_label.csv')\n","train_activity = pd.read_csv(path + 'train/train_activity.csv')\n","train_combat = pd.read_csv(path + 'train/train_combat.csv')\n","train_payment = pd.read_csv(path + 'train/train_payment.csv')\n","train_pledge = pd.read_csv(path + 'train/train_pledge.csv')\n","train_trade = pd.read_csv(path + 'train/train_trade.csv')\n","\n","test1_activity = pd.read_csv(path + 'test/test1_activity.csv')\n","test1_combat = pd.read_csv(path + 'test/test1_combat.csv')\n","test1_payment = pd.read_csv(path + 'test/test1_payment.csv')\n","test1_pledge = pd.read_csv(path + 'test/test1_pledge.csv')\n","test1_trade = pd.read_csv(path + 'test/test1_trade.csv')\n","\n","test2_activity = pd.read_csv(path + 'test/test2_activity.csv')\n","test2_combat = pd.read_csv(path + 'test/test2_combat.csv')\n","test2_payment = pd.read_csv(path + 'test/test2_payment.csv')\n","test2_pledge = pd.read_csv(path + 'test/test2_pledge.csv')\n","test2_trade = pd.read_csv(path + 'test/test2_trade.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3aaeVz_EKVwQ","colab_type":"code","colab":{}},"source":["train_activity_merge = train_activity.groupby('acc_id').agg({'day':'nunique', \n","                                                             'char_id':'nunique',\n","                                                             'server':'nunique', \n","                                                             'playtime':'sum', \n","                                                             'npc_kill':'sum', \n","                                                             'solo_exp':'sum',\n","                                                             'party_exp':'sum', \n","                                                             'quest_exp':'sum',\n","                                                             'rich_monster':'sum', \n","                                                             'death':'sum', \n","                                                             'revive':'sum',\n","                                                             'exp_recovery':'sum',\n","                                                             'fishing':'sum',\n","                                                             'private_shop':'sum',\n","                                                             'game_money_change':'sum',\n","                                                             'enchant_count':'sum'}).reset_index(drop=True)\n","\n","test1_activity_merge = test1_activity.groupby('acc_id').agg({'day':'nunique', \n","                                                             'char_id':'nunique',\n","                                                             'server':'nunique', \n","                                                             'playtime':'sum', \n","                                                             'npc_kill':'sum', \n","                                                             'solo_exp':'sum',\n","                                                             'party_exp':'sum', \n","                                                             'quest_exp':'sum',\n","                                                             'rich_monster':'sum', \n","                                                             'death':'sum', \n","                                                             'revive':'sum',\n","                                                             'exp_recovery':'sum',\n","                                                             'fishing':'sum',\n","                                                             'private_shop':'sum',\n","                                                             'game_money_change':'sum',\n","                                                             'enchant_count':'sum'}).reset_index(drop=True)\n","\n","test2_activity_merge = test2_activity.groupby('acc_id').agg({'day':'nunique', \n","                                                             'char_id':'nunique',\n","                                                             'server':'nunique', \n","                                                             'playtime':'sum', \n","                                                             'npc_kill':'sum', \n","                                                             'solo_exp':'sum',\n","                                                             'party_exp':'sum', \n","                                                             'quest_exp':'sum',\n","                                                             'rich_monster':'sum', \n","                                                             'death':'sum', \n","                                                             'revive':'sum',\n","                                                             'exp_recovery':'sum',\n","                                                             'fishing':'sum',\n","                                                             'private_shop':'sum',\n","                                                             'game_money_change':'sum',\n","                                                             'enchant_count':'sum'}).reset_index(drop=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"J4pSaIs1ihiV","colab_type":"code","colab":{}},"source":["def week_transform(row):\n","    if row>0 and row<8:\n","        row = 1\n","    elif row>7 and row<15:\n","        row = 2\n","    elif row>14 and row<22:\n","        row = 3\n","    else:\n","        row = 4\n","    return row"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ig2yD9ipOcw9","colab_type":"code","colab":{}},"source":["train_payment['day'] = train_payment['day'].apply(week_transform)\n","train_payment_merge = train_payment.groupby(['acc_id', 'day']).sum().unstack()\n","train_payment_merge.columns = ['week1', 'week2', 'week3', 'week4']\n","train_merge = pd.concat([train_activity_merge, train_payment_merge.fillna(0).reset_index(drop=True)], 1)\n","\n","test1_payment['day'] = test1_payment['day'].apply(week_transform)\n","test1_payment_merge = test1_payment.groupby(['acc_id', 'day']).sum().unstack()\n","test1_payment_merge.columns = ['week1', 'week2', 'week3', 'week4']\n","test1_merge = pd.concat([test1_activity_merge, test1_payment_merge.fillna(0).reset_index(drop=True)], 1)\n","\n","test2_payment['day'] = test2_payment['day'].apply(week_transform)\n","test2_payment_merge = test2_payment.groupby(['acc_id', 'day']).sum().unstack()\n","test2_payment_merge.columns = ['week1', 'week2', 'week3', 'week4']\n","test2_merge = pd.concat([test2_activity_merge, test2_payment_merge.fillna(0).reset_index(drop=True)], 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-zuKoC2uTNyI","colab_type":"code","colab":{}},"source":["train_merge = train_merge.fillna(0)\n","test1_merge = test1_merge.fillna(0)\n","test2_merge = test2_merge.fillna(0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wSmW4d4SOgyO","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import StratifiedKFold\n","from sklearn.model_selection import KFold\n","import lightgbm as lgb"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TPHtOadGNTrM","colab_type":"code","colab":{}},"source":["FOLDS = 10\n","SEED = 42\n","\n","kf = KFold(n_splits=FOLDS, random_state=SEED)\n","\n","def rf_model(train,test,label, folds=FOLDS, seed=SEED):\n","    time_oof = np.zeros(len(train))\n","    spent_oof = np.zeros(len(train))\n","\n","    time_pred = np.zeros(len(test))\n","    spent_pred = np.zeros(len(test))\n","    for trn_idx, val_idx in kf.split(train):\n","        train_df = train.loc[trn_idx]\n","        valid_df = train.loc[val_idx]\n","        \n","        rf_time = RandomForestRegressor().fit(X= train_df, y = label.loc[trn_idx, 'survival_time'])\n","        rf_spent = RandomForestRegressor().fit(X= train_df, y = label.loc[trn_idx, 'amount_spent'])\n","        \n","        time_oof[val_idx] = rf_time.predict(valid_df)\n","        time_pred += rf_time.predict(test)/kf.n_splits\n","\n","        spent_oof[val_idx] = rf_spent.predict(valid_df)\n","        spent_pred += rf_spent.predict(test)/kf.n_splits\n","\n","    return spent_oof, time_oof, spent_pred,time_pred"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"22sMBnW6Ow0j","colab_type":"code","outputId":"5a41cf3a-fc4a-4409-970d-af22bc253ee6","executionInfo":{"status":"ok","timestamp":1566561701919,"user_tz":-540,"elapsed":95762,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":717}},"source":["spent_oof_1, time_oof_1, spent_pred_1,time_pred_1 = rf_model(train_merge, test1_merge, train_label.sort_values('acc_id').reset_index(drop=True), FOLDS, SEED)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n","  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"NZusEmsxWVjH","colab_type":"code","colab":{}},"source":["spent_oof_1[spent_oof_1<0] = 0\n","time_oof_1[time_oof_1<0] = 0\n","spent_pred_1[spent_pred_1<0] = 0\n","time_pred_1[time_pred_1<0] = 0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qK_pgwCqWVfX","colab_type":"code","colab":{}},"source":["oof1_df = pd.DataFrame([np.unique(train_activity['acc_id']), time_oof_1.astype(int), spent_oof_1]).T\n","oof1_df.columns = train_label.columns\n","oof1_df[['acc_id', 'survival_time']] = oof1_df[['acc_id', 'survival_time']].astype(int)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xz4omMGRXLsa","colab_type":"code","outputId":"2e8c1183-40f2-4b4b-ae66-cc60fab624f7","executionInfo":{"status":"ok","timestamp":1566561862828,"user_tz":-540,"elapsed":732,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["oof1_df"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>acc_id</th>\n","      <th>survival_time</th>\n","      <th>amount_spent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>53</td>\n","      <td>3.609215e-03</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>43</td>\n","      <td>2.680827e-01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>47</td>\n","      <td>1.083880e-01</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>17</td>\n","      <td>60</td>\n","      <td>1.409103e-01</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20</td>\n","      <td>57</td>\n","      <td>2.203426e-01</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>21</td>\n","      <td>41</td>\n","      <td>2.170681e-01</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>60</td>\n","      <td>2.627181e-02</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>38</td>\n","      <td>44</td>\n","      <td>2.003180e-01</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>41</td>\n","      <td>3</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>43</td>\n","      <td>63</td>\n","      <td>4.469737e-02</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>50</td>\n","      <td>64</td>\n","      <td>1.703464e-06</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>53</td>\n","      <td>49</td>\n","      <td>9.786223e-02</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>54</td>\n","      <td>46</td>\n","      <td>5.186443e-02</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>59</td>\n","      <td>64</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>62</td>\n","      <td>46</td>\n","      <td>6.808812e-02</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>63</td>\n","      <td>45</td>\n","      <td>9.300292e-02</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>65</td>\n","      <td>55</td>\n","      <td>3.623277e-03</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>66</td>\n","      <td>59</td>\n","      <td>1.001459e-01</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>67</td>\n","      <td>58</td>\n","      <td>2.793336e-01</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>59</td>\n","      <td>1.138150e-01</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>75</td>\n","      <td>39</td>\n","      <td>7.809601e-02</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>76</td>\n","      <td>59</td>\n","      <td>2.357146e-02</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>77</td>\n","      <td>64</td>\n","      <td>3.598388e-02</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>79</td>\n","      <td>64</td>\n","      <td>4.567298e-03</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>81</td>\n","      <td>52</td>\n","      <td>2.146991e-01</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>86</td>\n","      <td>64</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>91</td>\n","      <td>53</td>\n","      <td>2.133899e-01</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>92</td>\n","      <td>37</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>97</td>\n","      <td>64</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>98</td>\n","      <td>60</td>\n","      <td>5.175812e-01</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>39970</th>\n","      <td>130383</td>\n","      <td>64</td>\n","      <td>3.609215e-03</td>\n","    </tr>\n","    <tr>\n","      <th>39971</th>\n","      <td>130384</td>\n","      <td>6</td>\n","      <td>3.760376e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39972</th>\n","      <td>130386</td>\n","      <td>54</td>\n","      <td>1.553603e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39973</th>\n","      <td>130390</td>\n","      <td>64</td>\n","      <td>2.240010e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39974</th>\n","      <td>130391</td>\n","      <td>59</td>\n","      <td>1.283699e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39975</th>\n","      <td>130392</td>\n","      <td>53</td>\n","      <td>3.238472e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39976</th>\n","      <td>130398</td>\n","      <td>52</td>\n","      <td>1.848509e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39977</th>\n","      <td>130401</td>\n","      <td>58</td>\n","      <td>2.736441e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39978</th>\n","      <td>130403</td>\n","      <td>17</td>\n","      <td>9.747183e-03</td>\n","    </tr>\n","    <tr>\n","      <th>39979</th>\n","      <td>130405</td>\n","      <td>48</td>\n","      <td>7.426781e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39980</th>\n","      <td>130408</td>\n","      <td>34</td>\n","      <td>1.379344e-06</td>\n","    </tr>\n","    <tr>\n","      <th>39981</th>\n","      <td>130411</td>\n","      <td>51</td>\n","      <td>5.892974e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39982</th>\n","      <td>130413</td>\n","      <td>35</td>\n","      <td>1.563891e-06</td>\n","    </tr>\n","    <tr>\n","      <th>39983</th>\n","      <td>130414</td>\n","      <td>61</td>\n","      <td>2.194731e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39984</th>\n","      <td>130415</td>\n","      <td>44</td>\n","      <td>6.792871e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39985</th>\n","      <td>130416</td>\n","      <td>33</td>\n","      <td>2.948986e-06</td>\n","    </tr>\n","    <tr>\n","      <th>39986</th>\n","      <td>130420</td>\n","      <td>49</td>\n","      <td>3.232545e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39987</th>\n","      <td>130433</td>\n","      <td>56</td>\n","      <td>8.984978e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39988</th>\n","      <td>130434</td>\n","      <td>49</td>\n","      <td>1.503796e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39989</th>\n","      <td>130445</td>\n","      <td>64</td>\n","      <td>1.320208e-06</td>\n","    </tr>\n","    <tr>\n","      <th>39990</th>\n","      <td>130447</td>\n","      <td>59</td>\n","      <td>1.196291e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39991</th>\n","      <td>130449</td>\n","      <td>54</td>\n","      <td>2.277120e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39992</th>\n","      <td>130459</td>\n","      <td>64</td>\n","      <td>9.120601e-07</td>\n","    </tr>\n","    <tr>\n","      <th>39993</th>\n","      <td>130461</td>\n","      <td>9</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>39994</th>\n","      <td>130462</td>\n","      <td>38</td>\n","      <td>3.781991e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39995</th>\n","      <td>130463</td>\n","      <td>64</td>\n","      <td>4.577526e-06</td>\n","    </tr>\n","    <tr>\n","      <th>39996</th>\n","      <td>130468</td>\n","      <td>12</td>\n","      <td>2.574027e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39997</th>\n","      <td>130469</td>\n","      <td>63</td>\n","      <td>1.737148e-01</td>\n","    </tr>\n","    <tr>\n","      <th>39998</th>\n","      <td>130470</td>\n","      <td>47</td>\n","      <td>1.544888e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39999</th>\n","      <td>130473</td>\n","      <td>61</td>\n","      <td>5.049542e-01</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>40000 rows × 3 columns</p>\n","</div>"],"text/plain":["       acc_id  survival_time  amount_spent\n","0           2             53  3.609215e-03\n","1           5             43  2.680827e-01\n","2           8             47  1.083880e-01\n","3          17             60  1.409103e-01\n","4          20             57  2.203426e-01\n","5          21             41  2.170681e-01\n","6          31             60  2.627181e-02\n","7          38             44  2.003180e-01\n","8          41              3  0.000000e+00\n","9          43             63  4.469737e-02\n","10         50             64  1.703464e-06\n","11         53             49  9.786223e-02\n","12         54             46  5.186443e-02\n","13         59             64  0.000000e+00\n","14         62             46  6.808812e-02\n","15         63             45  9.300292e-02\n","16         65             55  3.623277e-03\n","17         66             59  1.001459e-01\n","18         67             58  2.793336e-01\n","19         69             59  1.138150e-01\n","20         75             39  7.809601e-02\n","21         76             59  2.357146e-02\n","22         77             64  3.598388e-02\n","23         79             64  4.567298e-03\n","24         81             52  2.146991e-01\n","25         86             64  0.000000e+00\n","26         91             53  2.133899e-01\n","27         92             37  0.000000e+00\n","28         97             64  0.000000e+00\n","29         98             60  5.175812e-01\n","...       ...            ...           ...\n","39970  130383             64  3.609215e-03\n","39971  130384              6  3.760376e-01\n","39972  130386             54  1.553603e-02\n","39973  130390             64  2.240010e-02\n","39974  130391             59  1.283699e-01\n","39975  130392             53  3.238472e-02\n","39976  130398             52  1.848509e-01\n","39977  130401             58  2.736441e-01\n","39978  130403             17  9.747183e-03\n","39979  130405             48  7.426781e-02\n","39980  130408             34  1.379344e-06\n","39981  130411             51  5.892974e-02\n","39982  130413             35  1.563891e-06\n","39983  130414             61  2.194731e-01\n","39984  130415             44  6.792871e-02\n","39985  130416             33  2.948986e-06\n","39986  130420             49  3.232545e-02\n","39987  130433             56  8.984978e-02\n","39988  130434             49  1.503796e-01\n","39989  130445             64  1.320208e-06\n","39990  130447             59  1.196291e-01\n","39991  130449             54  2.277120e-01\n","39992  130459             64  9.120601e-07\n","39993  130461              9  0.000000e+00\n","39994  130462             38  3.781991e-02\n","39995  130463             64  4.577526e-06\n","39996  130468             12  2.574027e-02\n","39997  130469             63  1.737148e-01\n","39998  130470             47  1.544888e-02\n","39999  130473             61  5.049542e-01\n","\n","[40000 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":101}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"xzEYOTWCXYqA","colab":{}},"source":["path = 'drive/My Drive/bigcontest2019/scripts'\n","os.chdir(path)\n","from model.metrics import score_function"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"4a8e11a7-3472-4cd5-c9cc-4cc5b2c1dd41","executionInfo":{"status":"ok","timestamp":1566561906516,"user_tz":-540,"elapsed":844,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"id":"-6iHdmH0XYqM","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["oof1_df2 = oof1_df.copy()\n","# oof1_df2['amount_spent'] = oof1_df2['amount_spent']*70\n","# oof1_df2.loc[(oof1_df2['survival_time']>7) & (oof1_df2['survival_time']<64), 'survival_time'] = 35\n","score_function.score_function(oof1_df2, train_label, path=False)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["13675.722421886228\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["13675.722421886228"]},"metadata":{"tags":[]},"execution_count":103}]},{"cell_type":"code","metadata":{"id":"AiOeN1s1XgAw","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"c_d-FJOkXYqY","colab":{}},"source":["pred1_df = pd.DataFrame([np.unique(test1_activity['acc_id']), pred1_time.astype(int), pred1_spent]).T\n","pred1_df.columns = train_label.columns\n","pred1_df[['acc_id', 'survival_time']] = pred1_df[['acc_id', 'survival_time']].astype(int)\n","\n","pred1_df.loc[pred1_df['survival_time']<1, 'survival_time'] = 1\n","pred1_df.loc[pred1_df['survival_time']>64, 'survival_time'] = 64\n","\n","# pred1_df.loc[(pred1_df['survival_time']>7) & (pred1_df['survival_time']<64), 'survival_time'] = 30\n","pred1_df.loc[pred1_df['amount_spent']<0, 'amount_spent']=0\n","\n","pred1_df['amount_spent'] = pred1_df['amount_spent']\n","\n","pred1_df.to_csv('/content/test1_predict.csv', index=False, encoding='utf-8')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5HklKMUgXLl7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"asLMVJuOXLiQ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"280dvzINKYqT","colab_type":"code","colab":{}},"source":["FOLDS=5;SEED=42\n","def lgb_model(train, test, label, folds=FOLDS, seed=SEED):\n","    \n","    params = {\n","        'objective':'regression',\n","        \"boosting\": \"gbdt\",\n","        \"num_iterations \":100,\n","        'num_leaves': 10000,\n","        'max_depth': 8,\n","        'learning_rate': 0.1,\n","        'min_data_in_leaf': 32, \n","        'min_child_samples': 30,\n","        'min_child_weight': 0.5,\n","        'min_split_gain': 0.005,\n","        \"feature_fraction\": 0.9,\n","        \"bagging_fraction\": 0.9 ,\n","        \"bagging_freq\": 2,\n","        \"bagging_seed\": 42,\n","        \"metric\": 'rmse',\n","        \"lambda_l1\": 0.1,\n","        \"lambda_l2\": 0.1\n","    }\n","    \n","    skf = StratifiedKFold(n_splits=folds, random_state=seed)\n","    kf = KFold(n_splits=folds, random_state=seed)\n","    \n","    oof_time = np.zeros(len(train))\n","    oof_spent = np.zeros(len(train))\n","    pred_time = np.zeros(len(test))\n","    pred_spent = np.zeros(len(test))\n","    \n","    for trn_idx, val_idx in kf.split(train):\n","        \n","        train_df = lgb.Dataset(train.loc[trn_idx], label=label.loc[trn_idx, 'amount_spent'])\n","        valid_df = lgb.Dataset(train.loc[val_idx], label=label.loc[val_idx, 'amount_spent'])\n","        \n","        lgb_model = lgb.train(params, train_df, 5000, valid_sets = [train_df, valid_df], early_stopping_rounds = 500, verbose_eval=5000)\n","        oof_spent[val_idx] = lgb_model.predict(train.loc[val_idx])/skf.n_splits\n","        pred_spent += lgb_model.predict(test)/kf.n_splits\n","    \n","    params = {\n","        'objective':'multiclass',\n","        'num_class':65,\n","        \"boosting\": \"gbdt\",\n","        \"num_iterations \":100,\n","        'num_leaves': 10000,\n","        'max_depth': 8,\n","        'learning_rate': 0.1,\n","        'min_data_in_leaf': 32, \n","        'min_child_samples': 30,\n","        'min_child_weight': 0.5,\n","        'min_split_gain': 0.005,\n","        \"feature_fraction\": 0.9,\n","        \"bagging_fraction\": 0.9 ,\n","        \"bagging_freq\": 2,\n","        \"bagging_seed\": 42,\n","        \"metric\": 'multi_logloss',\n","        \"lambda_l1\": 0.1,\n","        \"lambda_l2\": 0.1\n","    }\n","    train['amount_spent'] = oof_time\n","    for trn_idx, val_idx in skf.split(train, label['survival_time']):\n","        \n","        train_df = lgb.Dataset(train.loc[trn_idx], label=label.loc[trn_idx, 'survival_time'])\n","        valid_df = lgb.Dataset(train.loc[val_idx], label=label.loc[val_idx, 'survival_time'])\n","        \n","        lgb_model = lgb.train(params, train_df, 5000, valid_sets = [train_df, valid_df], early_stopping_rounds = 500, verbose_eval=5000)\n","        oof_time[val_idx] = lgb_model.predict(train.loc[val_idx])/skf.n_splits\n","        pred_time += lgb_model.predict(test)/skf.n_splits\n","    \n","    return oof_time, oof_spent, pred_time, pred_spent"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1yNcG9I7LjZt","colab_type":"code","outputId":"f8e4eaaf-2cc5-448a-eb09-f24c88271a8a","executionInfo":{"status":"error","timestamp":1566477031970,"user_tz":-540,"elapsed":329441,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":632}},"source":["oof1_time, oof1_spent, pred1_time, pred1_spent = lgb_model(\n","    train_merge, test1_merge, train_label.sort_values('acc_id').reset_index(drop=True), FOLDS, SEED)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[18]\ttraining's rmse: 0.705659\tvalid_1's rmse: 0.543462\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[26]\ttraining's rmse: 0.641854\tvalid_1's rmse: 0.77594\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[7]\ttraining's rmse: 0.706828\tvalid_1's rmse: 0.648137\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[28]\ttraining's rmse: 0.561883\tvalid_1's rmse: 0.993503\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[7]\ttraining's rmse: 0.741277\tvalid_1's rmse: 0.462554\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[37]\ttraining's multi_logloss: 0.948987\tvalid_1's multi_logloss: 1.96714\n"],"name":"stdout"},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-ca9a233cbd29>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m oof1_time, oof1_spent, pred1_time, pred1_spent = lgb_model(\n\u001b[0;32m----> 2\u001b[0;31m     train_merge, test1_merge, train_label.sort_values('acc_id').reset_index(drop=True), FOLDS, SEED)\n\u001b[0m","\u001b[0;32m<ipython-input-9-2687d6fba93c>\u001b[0m in \u001b[0;36mlgb_model\u001b[0;34m(train, test, label, folds, seed)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[0mlgb_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_sets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_df\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m500\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 68\u001b[0;31m         \u001b[0moof_time\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mval_idx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mval_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mskf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     69\u001b[0m         \u001b[0mpred_time\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mlgb_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mskf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shape mismatch: value array of shape (8024,65) could not be broadcast to indexing result of shape (8024,)"]}]},{"cell_type":"code","metadata":{"id":"EJFuap-iLji-","colab_type":"code","colab":{}},"source":["oof1_df = pd.DataFrame([np.unique(train_activity['acc_id']), oof1_time.astype(int), oof1_spent]).T\n","oof1_df.columns = train_label.columns\n","oof1_df[['acc_id', 'survival_time']] = oof1_df[['acc_id', 'survival_time']].astype(int)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NyGjRNJP9FCL","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ojgyIRPe9FIo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ojq9hEoe9FMi","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TgYsl0xR9FFn","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-ZLhYMJTzU0z","colab_type":"code","colab":{}},"source":["path = 'drive/My Drive/bigcontest2019/scripts'\n","os.chdir(path)\n","from model.metrics import score_function"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eZAbVU1y0ohC","colab_type":"code","outputId":"38a514fc-a886-4fed-c6cd-42fe97145f33","executionInfo":{"status":"ok","timestamp":1566473361103,"user_tz":-540,"elapsed":618,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["oof1_df2 = oof1_df.copy()\n","# oof1_df2['amount_spent'] = oof1_df2['amount_spent']*70\n","# oof1_df2.loc[(oof1_df2['survival_time']>7) & (oof1_df2['survival_time']<64), 'survival_time'] = 35\n","score_function.score_function(oof1_df2, train_label, path=False)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["29107.194324085198\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["29107.194324085198"]},"metadata":{"tags":[]},"execution_count":105}]},{"cell_type":"code","metadata":{"id":"RhYcAkMLzU9C","colab_type":"code","outputId":"2fcc2260-44fd-4d5a-e11c-5e385ab6f425","executionInfo":{"status":"ok","timestamp":1566470856482,"user_tz":-540,"elapsed":455,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["score_function.score_function(train_label2, train_label, path=False)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["56281.93961878003\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["56281.93961878003"]},"metadata":{"tags":[]},"execution_count":98}]},{"cell_type":"code","metadata":{"id":"oTuJk5B_0Oym","colab_type":"code","colab":{}},"source":["pred1_df = pd.DataFrame([np.unique(test1_activity['acc_id']), pred1_time.astype(int), pred1_spent]).T\n","pred1_df.columns = train_label.columns\n","pred1_df[['acc_id', 'survival_time']] = pred1_df[['acc_id', 'survival_time']].astype(int)\n","\n","pred1_df.loc[pred1_df['survival_time']<1, 'survival_time'] = 1\n","pred1_df.loc[pred1_df['survival_time']>64, 'survival_time'] = 64\n","\n","# pred1_df.loc[(pred1_df['survival_time']>7) & (pred1_df['survival_time']<64), 'survival_time'] = 30\n","pred1_df.loc[pred1_df['amount_spent']<0, 'amount_spent']=0\n","\n","pred1_df['amount_spent'] = pred1_df['amount_spent']\n","\n","pred1_df.to_csv('/content/test1_predict.csv', index=False, encoding='utf-8')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fn4dRXcy_Sek","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ykqZ4Ejt0O5W","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aGcQGNbsF3GH","colab_type":"code","colab":{}},"source":["def xgb_f1_score(y_hat, data):\n","    y_true = data.get_label()\n","    y_hat = custom_round(y_hat, np.quantile(y_hat, 0.85))\n","    return 'f1', -f1_score(y_true, y_hat)\n","\n","params = {\n","    'objective':'binary:logistic',\n","    'n_estimators':10000,\n","    'max_depth':16,\n","    'learning_rate':0.001,\n","    'subsample':0.7,\n","    'colsample_bytree':0.7,\n","    'reg_alpha':0.2,\n","    'tree_method':'gpu_hist',\n","    'seed':42\n","}\n","\n","skf = StratifiedKFold(n_splits=5, random_state=42)\n","\n","pred = np.zeros(len(test_df))\n","\n","for trn_idx, val_idx in skf.split(train_df, train_label['label']):\n","    \n","    trn_df = xgb.DMatrix(train_df.loc[trn_idx], label=train_label.loc[trn_idx, 'label'])\n","    val_df = xgb.DMatrix(train_df.loc[val_idx], label=train_label.loc[val_idx, 'label'])\n","    te_df = xgb.DMatrix(test_df)\n","    \n","    xgb_model = xgb.train(params, trn_df, num_boost_round=5000, \n","                          evals=[(trn_df, 'train'), (val_df, 'val')], \n","                          early_stopping_rounds = 10, verbose_eval=100, feval=xgb_f1_score)\n","    pred += xgb_model.predict(te_df)/skf.n_splits"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wq5ZMwgOF3Mp","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5D5W8eAfF3S7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"em7vQIkwF3P8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TxLYPHghF3J0","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vxoSfZmuF3DG","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qU--0TJjzVAX","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gurgQxitLjnH","colab_type":"code","outputId":"6320feee-c11e-4bc7-fbcf-b887695a51af","executionInfo":{"status":"ok","timestamp":1566397913357,"user_tz":-540,"elapsed":673919,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":550}},"source":["pred2_time, pred2_spent = lgb_model(train_activity_merge, test2_activity_merge, train_label.sort_values('acc_id').reset_index(drop=True), FOLDS, SEED)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[595]\ttraining's rmse: 13.0762\tvalid_1's rmse: 17.8931\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[349]\ttraining's rmse: 13.8865\tvalid_1's rmse: 18.313\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[420]\ttraining's rmse: 13.6981\tvalid_1's rmse: 17.8818\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[764]\ttraining's rmse: 12.6094\tvalid_1's rmse: 17.8254\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[506]\ttraining's rmse: 13.324\tvalid_1's rmse: 18.1785\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[114]\ttraining's rmse: 0.712953\tvalid_1's rmse: 0.544113\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[150]\ttraining's rmse: 0.649462\tvalid_1's rmse: 0.777088\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[68]\ttraining's rmse: 0.703758\tvalid_1's rmse: 0.649133\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[239]\ttraining's rmse: 0.564383\tvalid_1's rmse: 0.994391\n","Training until validation scores don't improve for 500 rounds.\n","Early stopping, best iteration is:\n","[110]\ttraining's rmse: 0.724873\tvalid_1's rmse: 0.465381\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"A4fh866ZuBW0","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MKVOnD-GLjp8","colab_type":"code","colab":{}},"source":["pred1_df = pd.DataFrame([np.unique(test1_activity['acc_id']), pred1_time.astype(int), pred1_spent]).T\n","pred1_df.columns = train_label.columns\n","pred1_df[['acc_id', 'survival_time']] = pred1_df[['acc_id', 'survival_time']].astype(int)\n","\n","pred2_df = pd.DataFrame([np.unique(test2_activity['acc_id']), pred2_time.astype(int), pred2_spent]).T\n","pred2_df.columns = train_label.columns\n","pred2_df[['acc_id', 'survival_time']] = pred2_df[['acc_id', 'survival_time']].astype(int)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rY3LlhQQLjwN","colab_type":"code","colab":{}},"source":["pred1_df.loc[pred1_df['survival_time']<1, 'survival_time'] = 1\n","pred2_df.loc[pred2_df['survival_time']<1, 'survival_time'] = 1\n","pred1_df.loc[pred1_df['survival_time']>64, 'survival_time'] = 64\n","pred2_df.loc[pred2_df['survival_time']>64, 'survival_time'] = 64\n","\n","pred1_df.loc[(pred1_df['survival_time']>7) & (pred1_df['survival_time']<64), 'survival_time'] = 30\n","pred2_df.loc[(pred2_df['survival_time']>7) & (pred2_df['survival_time']<64), 'survival_time'] = 30\n","\n","pred1_df.loc[pred1_df['amount_spent']<0, 'amount_spent']=0\n","pred2_df.loc[pred2_df['amount_spent']<0, 'amount_spent']=0\n","\n","pred1_df['amount_spent'] = pred1_df['amount_spent']*20\n","pred2_df['amount_spent'] = pred2_df['amount_spent']*20\n","\n","pred1_df.to_csv('/content/test1_predict.csv', index=False, encoding='utf-8')\n","pred2_df.to_csv('/content/test2_predict.csv', index=False, encoding='utf-8')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cJ8FgmQNm_Qj","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"W0t9BAeXLjz2","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZmVBJdqELj3R","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cHV28eLiLj7r","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9UuJeWKkLjtg","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZXOQeorqLjdI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gflwPlSrKYyb","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZbiGNeK0KY1e","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DE2k6wv_KY5S","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2qSdSx3_6MOs","colab_type":"text"},"source":["# train, test split"]},{"cell_type":"code","metadata":{"id":"VOjjd5pz6MR1","colab_type":"code","colab":{}},"source":["skf = StratifiedKFold(n_splits=5, random_state=SEED, shuffle=True)\n","for trn_idx, val_idx in skf.split(train_label, y=train_label['survival_time']):\n","    train_df = train_label.loc[trn_idx]\n","    valid_df = train_label.loc[val_idx]\n","    break"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o1OHyz3b6MU9","colab_type":"text"},"source":["# modeling"]},{"cell_type":"code","metadata":{"id":"F27-mBfSALiw","colab_type":"code","colab":{}},"source":["trn_activity = train_activity.loc[train_activity['acc_id'].isin(train_df['acc_id']), ['day', 'acc_id', 'playtime']]\n","val_activity = train_activity.loc[train_activity['acc_id'].isin(valid_df['acc_id']), ['day', 'acc_id', 'playtime']]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CZ_97h5e-X5w","colab_type":"code","colab":{}},"source":["trn_activity = trn_activity.groupby(['acc_id', 'day']).sum().unstack()\n","val_activity = val_activity.groupby(['acc_id', 'day']).sum().unstack()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"89Hpz8a7-X88","colab_type":"code","colab":{}},"source":["trn_activity.columns = trn_activity.columns.droplevel(0)\n","val_activity.columns = val_activity.columns.droplevel(0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6IP49qZH-X_e","colab_type":"code","colab":{}},"source":["trn_activity = trn_activity.reset_index()\n","val_activity = val_activity.reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"W6gdmio0-YCT","colab_type":"code","colab":{}},"source":["train_df = train_df.reset_index(drop=True)\n","valid_df = valid_df.reset_index(drop=True)\n","train_df = pd.merge(train_df, trn_activity.fillna(0), how='left', on='acc_id')\n","valid_df = pd.merge(valid_df, val_activity.fillna(0), how='left', on='acc_id')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"83HsmBOT-YFr","colab_type":"code","colab":{}},"source":["rf_survival = RandomForestRegressor(n_estimators=500, random_state=SEED)\n","rf_spent = RandomForestRegressor(n_estimators=500, random_state=SEED)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0GYihmBk-YJF","colab_type":"code","outputId":"e4aef071-1849-43eb-e855-7579b9506e48","executionInfo":{"status":"ok","timestamp":1564644656025,"user_tz":-540,"elapsed":784310,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":141}},"source":["rf_survival.fit(train_df.iloc[:, 3:], train_df['survival_time'])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n","                      max_features='auto', max_leaf_nodes=None,\n","                      min_impurity_decrease=0.0, min_impurity_split=None,\n","                      min_samples_leaf=1, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, n_estimators=500,\n","                      n_jobs=None, oob_score=False, random_state=None,\n","                      verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"id":"yAJnPZWOF03k","colab_type":"code","outputId":"b2b4f3bb-cdc3-4f64-a65f-37a287490ac2","executionInfo":{"status":"ok","timestamp":1564644692920,"user_tz":-540,"elapsed":612,"user":{"displayName":"이현호","photoUrl":"","userId":"01233170983161563057"}},"colab":{"base_uri":"https://localhost:8080/","height":141}},"source":["rf_spent.fit(train_df.iloc[:, 3:], train_df['amount_spent'])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n","                      max_features='auto', max_leaf_nodes=None,\n","                      min_impurity_decrease=0.0, min_impurity_split=None,\n","                      min_samples_leaf=1, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, n_estimators=500,\n","                      n_jobs=None, oob_score=False, random_state=None,\n","                      verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"markdown","metadata":{"id":"AAhCblVdGE2g","colab_type":"text"},"source":["# inference"]},{"cell_type":"code","metadata":{"id":"GiIFwMUhF5BB","colab_type":"code","colab":{}},"source":["survival_inference = rf_survival.predict(valid_df.iloc[:, 3:])\n","spent_inference = rf_spent.predict(valid_df.iloc[:, 3:])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9ToNguq-Hcok","colab_type":"code","colab":{}},"source":["survival_inference = np.round(survival_inference, 0)\n","predict_df = pd.DataFrame(np.concatenate([valid_df['acc_id'].values.reshape(-1, 1), survival_inference.reshape(-1, 1), spent_inference.reshape(-1, 1)], axis=1), columns=valid_df.columns[:3])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iUwc6tqh-YMe","colab_type":"code","colab":{}},"source":["output_path = 'drive/My Drive/bigcontest2019/metrics/lhh_inference/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9uqvTF816MYF","colab_type":"code","colab":{}},"source":["valid_df.iloc[:, :3].to_csv(output_path+'true.csv', index=False)\n","predict_df.to_csv(output_path+'predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_GoIzrSM6MbV","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NnZUDu0g6MeM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uMTZe-9l6Mhl","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}