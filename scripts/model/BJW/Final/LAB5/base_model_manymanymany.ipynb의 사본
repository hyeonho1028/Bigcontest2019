{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"base_model_manymanymany.ipynb의 사본","version":"0.3.2","provenance":[],"collapsed_sections":["8639HQhu1kvc","BpZW_EJd1s-r","WJjrpGdw3Cz9","kJyUiqU29scZ","0Fvy_MBv9sgf","Q25MT_rT942E","VAZ087No9-tx","Jk7ai-OJ-CKg","fOnHKJC_-F3-","GWRh0_nhibDe"],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"wGDLy_XM3epP","colab_type":"code","outputId":"384524a4-c252-4af1-e3d3-d677ce8d2ea9","executionInfo":{"status":"ok","timestamp":1567662433301,"user_tz":-540,"elapsed":1033,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["Zfrom google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wrzPXi8v-Reo","colab_type":"text"},"source":["# data load"]},{"cell_type":"code","metadata":{"id":"sK-XT6Ys6EOG","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from collections import defaultdict\n","import os\n","import gc\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.linear_model import Ridge\n","from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import f1_score\n","\n","from tqdm import tqdm\n","\n","# model\n","import lightgbm as lgb\n","\n","SEED=42\n","LABEL=None"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WPao6FY66MHm","colab_type":"code","colab":{}},"source":["path = '/content/drive/My Drive/bigcontest2019/'\n","os.chdir(path)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WKdVhJyK6MLE","colab_type":"code","colab":{}},"source":["train_activity = pd.read_csv('data/train/train_activity.csv')\n","train_combat = pd.read_csv('data/train/train_combat.csv')\n","train_payment = pd.read_csv('data/train/train_payment.csv')\n","train_pledge = pd.read_csv('data/train/train_pledge.csv')\n","train_trade = pd.read_csv('data/train/train_trade.csv')\n","\n","test1_activity = pd.read_csv('data/test/test1_activity.csv')\n","test1_combat = pd.read_csv('data/test/test1_combat.csv')\n","test1_payment = pd.read_csv('data/test/test1_payment.csv')\n","test1_pledge = pd.read_csv('data/test/test1_pledge.csv')\n","test1_trade = pd.read_csv('data/test/test1_trade.csv')\n","\n","test2_activity = pd.read_csv(path + 'data/test/test2_activity.csv')\n","test2_combat = pd.read_csv(path + 'data/test/test2_combat.csv')\n","test2_payment = pd.read_csv(path + 'data/test/test2_payment.csv')\n","test2_pledge = pd.read_csv(path + 'data/test/test2_pledge.csv')\n","test2_trade = pd.read_csv(path + 'data/test/test2_trade.csv')\n","\n","train_label_raw = pd.read_csv('data/train/train_label.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7kLghm3N9Z7c","colab_type":"code","colab":{}},"source":[" def adjust_lab(df):\n","    temp = df.copy(deep=True)    \n","    temp['survival_time'] = (((temp['survival_time'])//7))*7\n","    temp.loc[temp['survival_time']<1,'survival_time'] = 1\n","    temp.loc[df['survival_time']==64,'survival_time'] = 64\n","\n","    return temp.copy(deep=True)\n","    \n"," train_label = adjust_lab(train_label_raw)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jeUDIWwMBnTb","colab_type":"code","colab":{}},"source":["adj_train_lab = defaultdict(list)\n","\n","for idx, true in enumerate(train_label['survival_time']):\n","    adj_train_lab[true] += [idx]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DK_X8WqQf7Sr","colab_type":"code","colab":{}},"source":["class data_transform(object):\n","    def __init__(self, data):\n","        self.data = data\n","        \n","    def create_week(self):\n","        self.data['week'] = (self.data['day']-1)//7 + 1\n","        return self.data\n","    \n","    def activity_transform(self):\n","        temp_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        temp_df = pd.get_dummies(temp_df)\n","        \n","        for feature in temp_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day' or feature == 'char_id':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = 'sum'\n","        else:        \n","            temp_df = temp_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","        \n","        return temp_df\n","    \n","    def payment_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = ['sum', 'count', 'max', 'std']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def trade_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        groupby_dict2 = defaultdict()\n","        \n","        output_df['time'] = output_df['time'].apply(lambda x: str(x)[:2])\n","        output_df[['time', 'type', 'server']] = output_df[['time', 'type', 'server']].astype(object)\n","        output_df = pd.get_dummies(output_df)\n","        output_df2 = output_df.copy()\n","        \n","        output_df = output_df.rename(columns={'source_acc_id':'acc_id'})\n","        output_df2 = output_df2.rename(columns={'target_acc_id':'acc_id'})\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'target_acc_id']:\n","                groupby_dict[feature] = 'nunique'\n","            else:\n","                groupby_dict[feature] = 'sum'\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","        \n","        for feature in output_df2.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'item_type', 'source_char_id', 'target_char_id', 'source_acc_id']:\n","                groupby_dict2[feature] = 'nunique'\n","            else:\n","                groupby_dict2[feature] = 'sum'\n","        else:\n","            output_df2 = output_df2.groupby(['acc_id', 'week']).agg(groupby_dict2).reset_index()\n","        \n","        output_df = pd.merge(output_df, output_df2, how='outer', on=['acc_id', 'week'])\n","        \n","        return output_df\n","    \n","    def combat_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server', 'class', 'level']] = output_df[['server', 'class', 'level']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature == 'day':\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = ['sum']\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        \n","        return output_df\n","    \n","    def pledge_transform(self):\n","        output_df = self.data\n","        groupby_dict = defaultdict()\n","        \n","        output_df[['server']] = output_df[['server']].astype(str)\n","        output_df = pd.get_dummies(output_df)\n","        \n","        for feature in output_df.columns:\n","            if feature == 'acc_id' or feature == 'week':\n","                pass\n","            elif feature in ['day', 'pledge_id']:\n","                groupby_dict[feature] = 'nunique'\n","            elif feature == 'char_id':\n","                groupby_dict[feature] = ['nunique', 'size']\n","            else:\n","                groupby_dict[feature] = 'sum'\n","        else:\n","            output_df = output_df.groupby(['acc_id', 'week']).agg(groupby_dict).reset_index()\n","            output_df.columns = [i+j for i,j in output_df.columns.ravel()]\n","        return output_df"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NQkPPQDz1kok","colab_type":"text"},"source":["# survival time"]},{"cell_type":"markdown","metadata":{"id":"bRVo077h1ksD","colab_type":"text"},"source":["## train"]},{"cell_type":"markdown","metadata":{"id":"8639HQhu1kvc","colab_type":"text"},"source":["### acitivity"]},{"cell_type":"code","metadata":{"id":"0OrHwbMh1s7H","colab_type":"code","colab":{}},"source":["transform = data_transform(train_activity)\n","transform.create_week()\n","act_train = transform.activity_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BpZW_EJd1s-r","colab_type":"text"},"source":["### payment"]},{"cell_type":"code","metadata":{"id":"IHNW6ZMd23TJ","colab_type":"code","colab":{}},"source":["transform = data_transform(train_payment)\n","transform.create_week()\n","pay_train = transform.payment_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WJjrpGdw3Cz9","colab_type":"text"},"source":["### trade"]},{"cell_type":"code","metadata":{"id":"dm6lFb5r24ul","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_trade)\n","trandform.create_week()\n","tra_train = trandform.trade_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vXD7OGyThg3L","colab_type":"text"},"source":["### combat"]},{"cell_type":"code","metadata":{"id":"bMhaQb2Wiw3N","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_combat)\n","trandform.create_week()\n","com_train = trandform.combat_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OBMhLNMyv0gm","colab_type":"text"},"source":["### pledge"]},{"cell_type":"code","metadata":{"id":"hSd4xu7-v0m0","colab_type":"code","colab":{}},"source":["trandform = data_transform(train_pledge)\n","trandform.create_week()\n","ple_train = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hypv9jFf1tCF","colab_type":"text"},"source":["## test"]},{"cell_type":"markdown","metadata":{"id":"WQR30JTJ1tFc","colab_type":"text"},"source":["### activity"]},{"cell_type":"code","metadata":{"id":"s71SzrUh1tJE","colab_type":"code","colab":{}},"source":["transform = data_transform(test1_activity)\n","transform.create_week()\n","act_test1 = transform.activity_transform()\n","\n","transform = data_transform(test2_activity)\n","transform.create_week()\n","act_test2 = transform.activity_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kJyUiqU29scZ","colab_type":"text"},"source":["### payment"]},{"cell_type":"code","metadata":{"id":"CKk-cIhk9si0","colab_type":"code","colab":{}},"source":["transform = data_transform(test1_payment)\n","transform.create_week()\n","pay_test1 = transform.payment_transform()\n","\n","transform = data_transform(test2_payment)\n","transform.create_week()\n","pay_test2 = transform.payment_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0Fvy_MBv9sgf","colab_type":"text"},"source":["### trade"]},{"cell_type":"code","metadata":{"id":"LkwpMrpg1tMb","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_trade)\n","trandform.create_week()\n","tra_test1 = trandform.trade_transform()\n","\n","trandform = data_transform(test2_trade)\n","trandform.create_week()\n","tra_test2 = trandform.trade_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iv8Q6nK8yREG","colab_type":"text"},"source":["### combat"]},{"cell_type":"code","metadata":{"id":"gMr3DO8ayRIW","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_combat)\n","trandform.create_week()\n","com_test1 = trandform.combat_transform()\n","\n","trandform = data_transform(test2_combat)\n","trandform.create_week()\n","com_test2 = trandform.combat_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QDnSntp2yRMa","colab_type":"text"},"source":["### pledge"]},{"cell_type":"code","metadata":{"id":"lXbAdLN6yRPy","colab_type":"code","colab":{}},"source":["trandform = data_transform(test1_pledge)\n","trandform.create_week()\n","ple_test1 = trandform.pledge_transform()\n","\n","trandform = data_transform(test2_pledge)\n","trandform.create_week()\n","ple_test2 = trandform.pledge_transform()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oiIloDL69RYx","colab_type":"code","colab":{}},"source":["train_label = "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OFqYB4UI-hGa","colab_type":"text"},"source":["# model"]},{"cell_type":"code","metadata":{"id":"LEnYCT3R1Ees","colab_type":"code","colab":{}},"source":["class model(object):\n","    def __init__(self, train_data, train_label, test1_data, test2_data, kind):\n","        self.train_data = train_data.fillna(0)\n","        self.train_label = train_label\n","        self.test1_data = test1_data.fillna(0)\n","        self.test2_data = test2_data.fillna(0)\n","        self.features_ = train_data[list(set(train_data.columns) & set(test1_data.columns) & set(test2_data.columns))].drop(columns=['acc_id', 'week']).columns.tolist()\n","        self.kind = kind\n","        self.lgb_model_st = defaultdict()\n","        self.lgb_model_tas = defaultdict()\n","        self.rf_model_st = defaultdict()\n","        self.rf_model_tas = defaultdict()\n","        self.xgb_model_st = defaultdict()\n","        self.xgb_model_tas = defaultdict()\n","    \n","    def labeling(self):\n","        self.train_data = pd.merge(self.train_data, self.train_label[['acc_id', 'survival_time']], how='left', on='acc_id').dropna().reset_index(drop=True)\n","        for week in range(1, 5):\n","            self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            \n","    def labeling_tas(self, payment):\n","        self.train_data.drop(columns='survival_time', inplace=True)\n","        self.train_data = pd.merge(self.train_data, self.train_label, how='left', on='acc_id').dropna().reset_index(drop=True)\n","        self.train_data['adjust_survival_time'] = self.train_data['survival_time'] + self.train_data['week']*7\n","        \n","        def payment_transform(data):\n","            data['week'] = (data['day']-1)//7 + 1\n","            data = data.groupby(['acc_id', 'week']).sum().reset_index()\n","            return data\n","        payment = payment_transform(payment)\n","        \n","        def temp_func(data):\n","            if data['adjust_survival_time']>64:\n","                over_value = data['adjust_survival_time'] - 64\n","                data['adjust_survival_time'] = data['survival_time'] - over_value\n","            else:\n","                data['adjust_survival_time'] = data['survival_time']\n","            return data['adjust_survival_time']\n","        \n","        self.train_data['adjust_survival_time'] = self.train_data[['survival_time', 'adjust_survival_time']].apply(temp_func, axis=1)\n","        self.train_data['payment'] = 0\n","        \n","        for week in range(1, 4):\n","            self.train_data.loc[self.train_data['week']==week, 'payment'] = pd.merge(self.train_data.loc[self.train_data['week']==week, 'acc_id'], \n","                                                                                     payment[payment['week']>week].groupby(\n","                                                                                         ['acc_id'])['amount_spent'].sum().reset_index().rename(columns={'amount_spent':'payment'}), \n","                                                                                     how='left', on='acc_id')['payment']\n","            self.train_data = self.train_data.fillna(0)\n","        else:\n","            self.train_data['total_amount_spent'] = self.train_data['amount_spent'] * self.train_data['adjust_survival_time'] + self.train_data['payment']\n","            self.train_data = self.train_data.drop(columns=['amount_spent', 'payment'])\n","            for week in range(1, 5):\n","                self.train_data.loc[self.train_data['week']==week, 'survival_time'] = np.minimum(64, self.train_data.loc[self.train_data['week']==week, 'survival_time'] + 7*(4-week))\n","            else:\n","                self.train_data = self.train_data.drop(columns='survival_time').rename(columns={'adjust_survival_time':'survival_time'})\n","    \n","\n","    def lgb_train_st(self, params, iteration, seed):\n","        \n","        def under_sampling(self, data):\n","            all_week_under_sample = pd.DataFrame()\n","\n","            for week in range(1, 5):\n","                if self.kind == 'activity':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True, \n","                                                       stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'day'])\n","                elif self.kind == 'payment':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True)\n","\n","                elif self.kind == 'trade':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True)\n","\n","                elif self.kind == 'combat':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True,\n","                                                      stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'daynunique'])\n","                elif self.kind == 'pledge':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True,\n","                                                      stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'daynunique'])\n","\n","                all_week_under_sample = pd.concat([all_week_under_sample, under_sample])\n","            else:\n","                data = pd.concat([data[data['survival_time']!=64], all_week_under_sample]).reset_index(drop=True)\n","                return data\n","            \n","        LABEL='survival_time'\n","        skf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n","\n","        for idx, (trn_idx, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            \n","            temp_train_data = under_sampling(self, self.train_data.loc[trn_idx])\n","\n","            trn_label = temp_train_data[LABEL] - 1\n","            val_label = self.train_data.loc[val_idx, LABEL] - 1\n","            train_df = lgb.Dataset(temp_train_data[self.features_], label=trn_label)\n","            valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","            \n","            lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 150, verbose_eval=300)\n","            self.lgb_model_st['model'+str(idx)] = lgb_model\n","    \n","    def lgb_train_tas(self, params, iteration, seed):\n","        \n","        LABEL='total_amount_spent'\n","        kf = KFold(n_splits=5, random_state=42, shuffle=True)\n","        self.features_.extend(['survival_time'])\n","        for idx, (trn_idx, val_idx) in enumerate(kf.split(self.train_data)):\n","            \n","            trn_label = self.train_data.loc[trn_idx, LABEL]\n","            val_label = self.train_data.loc[val_idx, LABEL]\n","            \n","            train_df = lgb.Dataset(self.train_data.loc[trn_idx, self.features_], label=trn_label)\n","            valid_df = lgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","            \n","            lgb_model = lgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 250, verbose_eval=500)\n","            self.lgb_model_tas['model'+str(idx)] = lgb_model\n","    \n","    \n","    def rf_train_st(self, params, iteration, seed):\n","        \n","        def under_sampling(self, data):\n","            all_week_under_sample = pd.DataFrame()\n","\n","            for week in range(1, 5):\n","                if self.kind == 'activity':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True, \n","                                                       stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'day'])\n","                elif self.kind == 'payment':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True)\n","\n","                elif self.kind == 'trade':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True)\n","\n","                elif self.kind == 'combat':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True,\n","                                                      stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'daynunique'])\n","                elif self.kind == 'pledge':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True,\n","                                                      stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'daynunique'])\n","\n","                all_week_under_sample = pd.concat([all_week_under_sample, under_sample])\n","            else:\n","                data = pd.concat([data[data['survival_time']!=64], all_week_under_sample]).reset_index(drop=True)\n","                return data\n","            \n","        LABEL='survival_time'\n","        skf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n","\n","        for idx, (trn_idx, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","            \n","            temp_train_data = under_sampling(self, self.train_data.loc[trn_idx])\n","            \n","            trn_label = temp_train_data[LABEL] - 1\n","            val_label = self.train_data.loc[val_idx, LABEL] - 1\n","            train_df = temp_train_data[self.features_]\n","            valid_df = self.train_data.loc[val_idx, self.features_]\n","            \n","            rf_model = RandomForestClassifier(n_estimators=100).fit(train_df, trn_label)\n","            self.rf_model_st['model'+str(idx)] = rf_model\n","    \n","    def rf_train_tas(self, params, iteration, seed):\n","        \n","        LABEL='total_amount_spent'\n","        kf = KFold(n_splits=5, random_state=42, shuffle=True)\n","        self.features_.extend(['survival_time'])\n","        for idx, (trn_idx, val_idx) in enumerate(kf.split(self.train_data)):\n","            \n","            trn_label = self.train_data.loc[trn_idx, LABEL]\n","            val_label = self.train_data.loc[val_idx, LABEL]\n","            \n","            train_df = self.train_data.loc[trn_idx, self.features_]\n","            valid_df = self.train_data.loc[val_idx, self.features_]\n","\n","            rf_model = RandomForestRegressor(n_estimators=100).fit(train_df, trn_label.values)\n","            self.rf_model_tas['model'+str(idx)] = rf_model\n","    \n","    \n","    def xgb_train_st(self, params, iteration, seed):\n","        \n","        def under_sampling(self, data):\n","            all_week_under_sample = pd.DataFrame()\n","\n","            for week in range(1, 5):\n","                if self.kind == 'activity':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True, \n","                                                       stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'day'])\n","                elif self.kind == 'payment':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True)\n","\n","                elif self.kind == 'trade':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True)\n","\n","                elif self.kind == 'combat':\n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True,\n","                                                      stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'daynunique'])\n","                elif self.kind == 'pledge': \n","                    _, under_sample = train_test_split(data[(data['week']==week) & (data['survival_time']==64)], test_size=0.01, random_state=42, shuffle=True,\n","                                                      stratify=data.loc[(data['week']==week) & (data['survival_time']==64), 'daynunique'])\n","\n","                all_week_under_sample = pd.concat([all_week_under_sample, under_sample])\n","            else:\n","                data = pd.concat([data[data['survival_time']!=64], all_week_under_sample]).reset_index(drop=True)\n","                return data\n","            \n","        LABEL='survival_time'\n","        skf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n","\n","        for idx, (trn_idx, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","        \n","            temp_train_data = under_sampling(self, self.train_data.loc[trn_idx])\n","            \n","            trn_label = temp_train_data[LABEL] - 1\n","            val_label = self.train_data.loc[val_idx, LABEL] - 1\n","            train_df = temp_train_data[self.features_]\n","            valid_df = self.train_data.loc[val_idx, self.features_]\n","            \n","            xgb_model = xgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 250, verbose_eval=500)\n","            self.xgb_model_st['model'+str(idx)] = xgb_model\n","    \n","    def xgb_train_tas(self, params, iteration, seed):\n","        \n","        LABEL='total_amount_spent'\n","        kf = KFold(n_splits=5, random_state=42, shuffle=True)\n","        self.features_.extend(['survival_time'])\n","        for idx, (trn_idx, val_idx) in enumerate(kf.split(self.train_data)):\n","            \n","            trn_label = self.train_data.loc[trn_idx, LABEL]\n","            val_label = self.train_data.loc[val_idx, LABEL]\n","            \n","            train_df = xgb.Dataset(self.train_data.loc[trn_idx, self.features_], label=trn_label)\n","            valid_df = xgb.Dataset(self.train_data.loc[val_idx, self.features_], label=val_label)\n","\n","            xgb_model = xgb.train(params, train_df, iteration, valid_sets = [train_df, valid_df], early_stopping_rounds = 250, verbose_eval=500)\n","            self.xgb_model_tas['model'+str(idx)] = xgb_model\n","\n","    def infer_oof(self,MODEL_NAME):\n","        LABEL='survival_time'\n","        oof = np.zeros(len(self.train_data))\n","        skf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n","        if MODEL_NAME == 'lgb_model':\n","            for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","                oof[val_idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_]), axis=1)+1\n","            else:\n","                oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","                oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","                self.oof = oof.copy()\n","        elif MODEL_NAME == 'rf_model':\n","            for idx, (_, val_idx) in enumerate(skf.split(self.train_data, self.train_data[LABEL])):\n","                oof[val_idx] = np.argmax(self.rf_model_st['model'+str(idx)].predict(self.train_data.loc[val_idx, self.features_]))+1\n","            else:\n","                oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_survival_time'])], 1)\n","                oof = oof.loc[oof['week']==4, ['acc_id', 'survival_time', 'infer_survival_time']].reset_index(drop=True)\n","                self.oof = oof.copy()\n","            return self.oof\n","    \n","    def infer_tas_oof(self,MODEL_NAME):\n","        LABEL='total_amount_spent'\n","        oof = np.zeros(len(self.train_data))\n","        kf = KFold(n_splits=5, random_state=42, shuffle=True)\n","        if MODEL_NAME == 'lgb_model':    \n","            for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","                valid_df = pd.merge(self.train_data.loc[val_idx].drop(columns='survival_time'), self.oof.drop(columns='survival_time').rename(columns={'infer_survival_time':'survival_time'}), how='left', on='acc_id')\n","                oof[val_idx] = self.lgb_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","            else:\n","                oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","                oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","                self.oof_tas = oof\n","        elif MODEL_NAME == 'rf_model':\n","            for idx, (_, val_idx) in enumerate(kf.split(self.train_data)):\n","                valid_df = pd.merge(self.train_data.loc[val_idx].drop(columns='survival_time'), self.oof.drop(columns='survival_time').rename(columns={'infer_survival_time':'survival_time'}), how='left', on='acc_id')\n","                oof[val_idx] = self.rf_model_tas['model'+str(idx)].predict(valid_df[self.features_])\n","            else:\n","                oof = pd.concat([self.train_data, pd.DataFrame(oof, columns=['infer_total_amount_spent'])], 1)\n","                oof = oof.loc[oof['week']==4, ['acc_id', 'total_amount_spent', 'infer_total_amount_spent']].reset_index(drop=True)\n","                self.oof_tas = oof\n","        return self.oof_tas\n","    \n","    def infer_pred(self,MODEL_NAME):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([20000, 5])\n","        pred2 = np.zeros([20000, 5])\n","        if MODEL_NAME == 'lgb_model' :    \n","            for idx in range(5):\n","                pred1[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test1[self.features_]), axis=1)+1\n","                pred2[:, idx] = np.argmax(self.lgb_model_st['model'+str(idx)].predict(test2[self.features_]), axis=1)+1\n","            else:\n","                test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","                test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","        elif MODEL_NAME == 'rf_model':\n","            for idx in range(5):\n","                pred1[:, idx] = np.argmax(self.rf_model_st['model'+str(idx)].predict(test1[self.features_]), axis=1)+1\n","                pred2[:, idx] = np.argmax(self.rf_model_st['model'+str(idx)].predict(test2[self.features_]), axis=1)+1\n","            else:\n","                test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","                test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","\n","            return test1, test2\n","    \n","    def infer_tas_pred(self,MODEL_NAME):\n","        test1 = self.test1_data.loc[self.test1_data['week']==4].reset_index(drop=True)\n","        test2 = self.test2_data.loc[self.test2_data['week']==4].reset_index(drop=True)\n","        pred1 = np.zeros([20000, 5])\n","        pred2 = np.zeros([20000, 5])\n","        if MODEL_NAME == 'lgb_model':\n","            for idx in range(5):\n","                pred1[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.lgb_model_tas['model'+str(idx)].predict(test2[self.features_])\n","                pred1[:, idx][pred1[:, idx]<0] = 0\n","                pred2[:, idx][pred2[:, idx]<0] = 0\n","            else:\n","                test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","                test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","        elif MODEL_NAME =='rf_model':\n","            for idx in range(5):\n","                pred1[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test1[self.features_])\n","                pred2[:, idx] = self.rf_model_tas['model'+str(idx)].predict(test2[self.features_])\n","                pred1[:, idx][pred1[:, idx]<0] = 0\n","                pred2[:, idx][pred2[:, idx]<0] = 0\n","            else:\n","                test1 = pd.concat([test1['acc_id'], pd.DataFrame(pred1)], 1)\n","                test2 = pd.concat([test2['acc_id'], pd.DataFrame(pred2)], 1)\n","            return test1, test2\n","        \n","        \n","    def feature_importance(self):\n","        feature_imp = pd.DataFrame(sorted(zip(self.st_lgb_model.feature_importance(), self.features_)), columns=['Value','Feature'])\n","        plt.figure(figsize=(20, 10))\n","        sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\n","        plt.title('LightGBM Features (avg over folds)')\n","        plt.tight_layout()\n","        plt.show()\n","        \n","    def load(self, return_data):\n","        \n","        if return_data=='train':\n","            return self.train_data\n","        elif retrun_data=='model':\n","            return self.lgb_model_st, self"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HeP72FgU1FB1","colab_type":"text"},"source":["### parameters"]},{"cell_type":"code","metadata":{"id":"8tQTscQS0_x-","colab_type":"code","colab":{}},"source":["PARAMS_ST = {\n","    'objective':'multiclass',\n","    'num_class':11,\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.1,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 8,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'seed':SEED\n","}\n","\n","# PARAMS_ST = {\n","#     'objective':'regression',\n","#     \"boosting\": \"gbdt\",\n","#     'learning_rate': 0.03,\n","#     'subsample' : 0.6,\n","#     'sumsample_freq':1,\n","#     'colsample_bytree':0.221856,\n","#     'max_depth': 8,\n","#     'max_bin':255,\n","#     \"lambda_l1\": 0.25,\n","#     \"lambda_l2\": 1,\n","#     'min_child_weight': 0.2,\n","#     'min_child_samples': 20,\n","#     'min_gain_to_split':0.02,\n","#     'min_data_in_bin':3,\n","#     'bin_construct_sample_cnt':5000,\n","#     'cat_l2':10,\n","#     'verbose':-1,\n","#     'nthread':-1,\n","#     'seed':SEED\n","# }\n","\n","PARAMS_TAS = {\n","    'objective':'regression',\n","    \"boosting\": \"gbdt\",\n","    'learning_rate': 0.03,\n","    'subsample' : 0.6,\n","    'sumsample_freq':1,\n","    'colsample_bytree':0.221856,\n","    'max_depth': 16,\n","    'max_bin':255,\n","    \"lambda_l1\": 0.25,\n","    \"lambda_l2\": 1,\n","    'min_child_weight': 0.2,\n","    'min_child_samples': 20,\n","    'min_gain_to_split':0.02,\n","    'min_data_in_bin':3,\n","    'bin_construct_sample_cnt':5000,\n","    'cat_l2':10,\n","    'verbose':-1,\n","    'nthread':-1,\n","    'metrics':'mse',\n","    'seed':SEED\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CswEp2DE1IOe","colab_type":"text"},"source":["## execute\n"]},{"cell_type":"markdown","metadata":{"id":"_A3gT_p9k5sb","colab_type":"text"},"source":["### lgb model"]},{"cell_type":"markdown","metadata":{"id":"Q25MT_rT942E","colab_type":"text"},"source":["#### activity"]},{"cell_type":"code","metadata":{"id":"jotwkYxMWYYg","colab_type":"code","outputId":"4aec926e-04eb-4d04-f290-5dde2dc310a1","colab":{"base_uri":"https://localhost:8080/","height":143}},"source":["TYPE='activity'\n","\n","activity_model = model(act_train, train_label, act_test1, act_test2, TYPE)\n","activity_model.labeling()\n","activity_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","act_oof_st = payment_model.infer_oof()\n","\n","activity_model.labeling_tas(train_payment)\n","activity_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","act_oof_tas = activity_model.infer_tas_oof()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[148]\ttraining's multi_logloss: 2.50491\tvalid_1's multi_logloss: 3.54303\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[143]\ttraining's multi_logloss: 2.53097\tvalid_1's multi_logloss: 3.53464\n","Training until validation scores don't improve for 150 rounds.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VAZ087No9-tx","colab_type":"text"},"source":["#### payment"]},{"cell_type":"code","metadata":{"id":"9Cdcu4JyORRB","colab_type":"code","colab":{}},"source":["TYPE='payment'\n","\n","payment_model = model(pay_train, train_label, pay_test1, pay_test2, TYPE)\n","payment_model.labeling()\n","payment_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","pay_oof_st = payment_model.infer_oof('lgb_model')\n","\n","payment_model.labeling_tas(train_payment)\n","payment_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","pay_oof_tas = payment_model.infer_tas_oof('lgb_model')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GayBN-CrElTD","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Jk7ai-OJ-CKg","colab_type":"text"},"source":["#### trade"]},{"cell_type":"code","metadata":{"id":"skY64jYNOSHS","colab_type":"code","colab":{}},"source":["TYPE='trade'\n","\n","trade_model = model(tr_train, train_label, tra_test1, tra_test2, TYPE)\n","trade_model.labeling()\n","trade_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","tra_oof_st = trade_model.infer_oof('lgb_model')\n","\n","trade_model.labeling_tas(train_payment)\n","trade_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","tra_oof_tas = trade_model.infer_tas_oof('lgb_model')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g4UO6Kz5-EIK","colab_type":"text"},"source":["#### combat"]},{"cell_type":"code","metadata":{"id":"7nIqItZ2OSLU","colab_type":"code","outputId":"0ba8f207-ec46-44f7-a2a0-bcfaae2d626a","executionInfo":{"status":"error","timestamp":1567664960499,"user_tz":-540,"elapsed":253304,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE)\n","combat_model.labeling()\n","combat_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","com_oof_st = combat_model.infer_oof('lgb_model')\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","com_oof_tas = combat_model.infer_tas_oof('lgb_model')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[114]\ttraining's multi_logloss: 1.97821\tvalid_1's multi_logloss: 3.09978\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[101]\ttraining's multi_logloss: 1.99556\tvalid_1's multi_logloss: 3.09931\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[102]\ttraining's multi_logloss: 1.99301\tvalid_1's multi_logloss: 3.09695\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[99]\ttraining's multi_logloss: 1.99677\tvalid_1's multi_logloss: 3.10692\n","Training until validation scores don't improve for 150 rounds.\n","Early stopping, best iteration is:\n","[102]\ttraining's multi_logloss: 1.99277\tvalid_1's multi_logloss: 3.09991\n","Training until validation scores don't improve for 250 rounds.\n","[500]\ttraining's l2: 18.1434\tvalid_1's l2: 18.7753\n","[1000]\ttraining's l2: 17.1409\tvalid_1's l2: 18.5201\n","[1500]\ttraining's l2: 16.4074\tvalid_1's l2: 18.3721\n","[2000]\ttraining's l2: 15.774\tvalid_1's l2: 18.2431\n","[2500]\ttraining's l2: 15.2181\tvalid_1's l2: 18.1357\n","[3000]\ttraining's l2: 14.747\tvalid_1's l2: 18.0625\n","[3500]\ttraining's l2: 14.3172\tvalid_1's l2: 17.9881\n","[4000]\ttraining's l2: 13.9176\tvalid_1's l2: 17.9231\n","[4500]\ttraining's l2: 13.5438\tvalid_1's l2: 17.8689\n","[5000]\ttraining's l2: 13.2103\tvalid_1's l2: 17.8129\n","Did not meet early stopping. Best iteration is:\n","[5000]\ttraining's l2: 13.2103\tvalid_1's l2: 17.8129\n","Training until validation scores don't improve for 250 rounds.\n","[500]\ttraining's l2: 18.1125\tvalid_1's l2: 19.028\n","[1000]\ttraining's l2: 17.1051\tvalid_1's l2: 18.7038\n","[1500]\ttraining's l2: 16.365\tvalid_1's l2: 18.5304\n","[2000]\ttraining's l2: 15.7513\tvalid_1's l2: 18.4135\n","[2500]\ttraining's l2: 15.2036\tvalid_1's l2: 18.3072\n","[3000]\ttraining's l2: 14.7112\tvalid_1's l2: 18.2184\n","[3500]\ttraining's l2: 14.2696\tvalid_1's l2: 18.1337\n","[4000]\ttraining's l2: 13.8554\tvalid_1's l2: 18.0662\n","[4500]\ttraining's l2: 13.4752\tvalid_1's l2: 17.9963\n","[5000]\ttraining's l2: 13.1344\tvalid_1's l2: 17.9391\n","Did not meet early stopping. Best iteration is:\n","[5000]\ttraining's l2: 13.1344\tvalid_1's l2: 17.9391\n","Training until validation scores don't improve for 250 rounds.\n","[500]\ttraining's l2: 18.0694\tvalid_1's l2: 19.2473\n","[1000]\ttraining's l2: 17.0797\tvalid_1's l2: 18.9474\n","[1500]\ttraining's l2: 16.3224\tvalid_1's l2: 18.7793\n","[2000]\ttraining's l2: 15.6701\tvalid_1's l2: 18.6463\n","[2500]\ttraining's l2: 15.1342\tvalid_1's l2: 18.5414\n","[3000]\ttraining's l2: 14.6519\tvalid_1's l2: 18.4478\n","[3500]\ttraining's l2: 14.2282\tvalid_1's l2: 18.3686\n","[4000]\ttraining's l2: 13.8408\tvalid_1's l2: 18.3133\n","[4500]\ttraining's l2: 13.462\tvalid_1's l2: 18.2487\n","[5000]\ttraining's l2: 13.1167\tvalid_1's l2: 18.1957\n","Did not meet early stopping. Best iteration is:\n","[5000]\ttraining's l2: 13.1167\tvalid_1's l2: 18.1957\n","Training until validation scores don't improve for 250 rounds.\n","[500]\ttraining's l2: 18.0293\tvalid_1's l2: 19.4122\n","[1000]\ttraining's l2: 17.0176\tvalid_1's l2: 19.1128\n","[1500]\ttraining's l2: 16.2705\tvalid_1's l2: 18.9421\n","[2000]\ttraining's l2: 15.6563\tvalid_1's l2: 18.8253\n","[2500]\ttraining's l2: 15.1182\tvalid_1's l2: 18.7188\n","[3000]\ttraining's l2: 14.6537\tvalid_1's l2: 18.6311\n","[3500]\ttraining's l2: 14.2321\tvalid_1's l2: 18.5474\n","[4000]\ttraining's l2: 13.8423\tvalid_1's l2: 18.4714\n","[4500]\ttraining's l2: 13.4621\tvalid_1's l2: 18.4119\n","[5000]\ttraining's l2: 13.0891\tvalid_1's l2: 18.3546\n","Did not meet early stopping. Best iteration is:\n","[5000]\ttraining's l2: 13.0891\tvalid_1's l2: 18.3546\n","Training until validation scores don't improve for 250 rounds.\n","[500]\ttraining's l2: 18.0049\tvalid_1's l2: 19.4793\n","[1000]\ttraining's l2: 17.014\tvalid_1's l2: 19.1468\n","[1500]\ttraining's l2: 16.2901\tvalid_1's l2: 18.9723\n","[2000]\ttraining's l2: 15.6744\tvalid_1's l2: 18.8368\n","[2500]\ttraining's l2: 15.1141\tvalid_1's l2: 18.7026\n","[3000]\ttraining's l2: 14.6201\tvalid_1's l2: 18.5984\n","[3500]\ttraining's l2: 14.1896\tvalid_1's l2: 18.5122\n","[4000]\ttraining's l2: 13.7904\tvalid_1's l2: 18.442\n","[4500]\ttraining's l2: 13.4136\tvalid_1's l2: 18.3784\n","[5000]\ttraining's l2: 13.0862\tvalid_1's l2: 18.3175\n","Did not meet early stopping. Best iteration is:\n","[5000]\ttraining's l2: 13.0862\tvalid_1's l2: 18.3175\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-333e2edc596b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mcombat_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabeling_tas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_payment\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mcombat_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlgb_train_tas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPARAMS_TAS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSEED\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mcom_oof_tas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcombat_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfer_tas_oof\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'lgb_model'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-62-71e54e6e5446>\u001b[0m in \u001b[0;36minfer_tas_oof\u001b[0;34m(self, MODEL_NAME)\u001b[0m\n\u001b[1;32m    215\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_idx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m                 \u001b[0mvalid_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mval_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'acc_id'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m                 \u001b[0moof\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mval_idx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlgb_model_tas\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'model'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures_\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                 \u001b[0moof\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moof\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'infer_total_amount_spent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, data, num_iteration, raw_score, pred_leaf, pred_contrib, data_has_header, is_reshape, **kwargs)\u001b[0m\n\u001b[1;32m   2201\u001b[0m         return predictor.predict(data, num_iteration,\n\u001b[1;32m   2202\u001b[0m                                  \u001b[0mraw_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_leaf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_contrib\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2203\u001b[0;31m                                  data_has_header, is_reshape)\n\u001b[0m\u001b[1;32m   2204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2205\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrefit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecay_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, data, num_iteration, raw_score, pred_leaf, pred_contrib, data_has_header, is_reshape)\u001b[0m\n\u001b[1;32m    465\u001b[0m             \u001b[0mpreds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnrow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__pred_for_csc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    466\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 467\u001b[0;31m             \u001b[0mpreds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnrow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__pred_for_np2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    468\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m__pred_for_np2d\u001b[0;34m(self, mat, num_iteration, predict_type)\u001b[0m\n\u001b[1;32m    554\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mpreds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnrow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 556\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0minner_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    557\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    558\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__pred_for_csr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcsr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_iteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36minner_predict\u001b[0;34m(mat, num_iteration, predict_type, preds)\u001b[0m\n\u001b[1;32m    536\u001b[0m                 \u001b[0mc_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpred_parameter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m                 \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbyref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_num_preds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 538\u001b[0;31m                 preds.ctypes.data_as(ctypes.POINTER(ctypes.c_double))))\n\u001b[0m\u001b[1;32m    539\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mn_preds\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mout_num_preds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Wrong length for predict results\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"fOnHKJC_-F3-","colab_type":"text"},"source":["#### pledge"]},{"cell_type":"code","metadata":{"id":"lR1akul8OSOm","colab_type":"code","colab":{}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE)\n","pledge_model.labeling()\n","pledge_model.lgb_train_st(PARAMS_ST, 5000, SEED)\n","ple_oof_st = pledge_model.infer_oof('lgb_model')\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.lgb_train_tas(PARAMS_TAS, 5000, SEED)\n","ple_oof_tas = pledge_model.infer_tas_oof('lgb_model')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QVCdW0_eSEgn","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IIbuqoI6OSSX","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GWRh0_nhibDe","colab_type":"text"},"source":["### rf_model"]},{"cell_type":"markdown","metadata":{"id":"Kef5v8fj99Gn","colab_type":"text"},"source":["#### combat"]},{"cell_type":"code","metadata":{"id":"hfT0leHp1vSE","colab_type":"code","colab":{}},"source":["TYPE='combat'\n","\n","combat_model = model(com_train, train_label, com_test1, com_test2, TYPE)\n","combat_model.labeling()\n","combat_model.rf_train_st(PARAMS_ST, 5000, SEED)\n","com_oof_st = combat_model.infer_oof('rf_model')\n","\n","combat_model.labeling_tas(train_payment)\n","combat_model.rf_train_tas(PARAMS_TAS, 5000, SEED)\n","com_oof_tas = combat_model.infer_tas_oof('rf_model')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7JUdTLwj-vD6","colab_type":"text"},"source":["#### pledge"]},{"cell_type":"code","metadata":{"id":"juscReMhH9-6","colab_type":"code","colab":{}},"source":["TYPE='pledge'\n","\n","pledge_model = model(ple_train, train_label, ple_test1, ple_test2, TYPE)\n","pledge_model.labeling()\n","pledge_model.rf_train_st(PARAMS_ST, 5000, SEED)\n","ple_oof_st = pledge_model.infer_oof()\n","\n","pledge_model.labeling_tas(train_payment)\n","pledge_model.rf_train_tas(PARAMS_TAS, 5000, SEED)\n","ple_oof_tas = pledge_model.infer_tas_oof()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6erAxyzNH-CR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bF2VfPzhH-IY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tgChsHqkH-GA","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YcqUbcBQYQe-","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xWDXJ_iKYQi3","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9ho0_tpL-4PO","colab_type":"text"},"source":["# oof"]},{"cell_type":"code","metadata":{"id":"k5ASXrUdYQmz","colab_type":"code","colab":{}},"source":["# activity oof\n","act_oof_df = pd.merge(act_oof_st, act_oof_tas, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","act_oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","act_oof_df['amount_spent'] = act_oof_df['amount_spent']/act_oof_df['survival_time']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_84dTzaIYQt1","colab_type":"code","colab":{}},"source":["# payment oof\n","pay_oof_df = pd.merge(pay_oof_st, pay_oof_tas, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","pay_oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","pay_oof_df['amount_spent'] = pay_oof_df['amount_spent']/pay_oof_df['survival_time']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ahV2zxBCAIRe","colab_type":"code","colab":{}},"source":["com_oof_st"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6DC9nMl8Vo2Y","colab_type":"code","outputId":"5fd7a0e9-6145-405c-d93b-7f21573c6e84","executionInfo":{"status":"error","timestamp":1567664961309,"user_tz":-540,"elapsed":781,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":327}},"source":["# combat \n","com_oof_df = pd.merge(com_oof_st, com_oof_tas, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","com_oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","com_oof_df['amount_spent'] = com_oof_df['amount_spent']/com_oof_df['survival_time']"],"execution_count":0,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-65-a5d6d81c76f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcom_oof_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcom_oof_st\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcom_oof_tas\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'acc_id'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'acc_id'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'infer_survival_time'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'infer_total_amount_spent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mcom_oof_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'acc_id'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'amount_spent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mcom_oof_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'amount_spent'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom_oof_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'amount_spent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mcom_oof_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'survival_time'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m     45\u001b[0m                          \u001b[0mright_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mright_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msuffixes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msuffixes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m                          \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindicator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindicator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m                          validate=validate)\n\u001b[0m\u001b[1;32m     48\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    477\u001b[0m                  \u001b[0msuffixes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'_x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'_y'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindicator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    478\u001b[0m                  validate=None):\n\u001b[0;32m--> 479\u001b[0;31m         \u001b[0mleft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidate_operand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    480\u001b[0m         \u001b[0mright\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidate_operand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morig_left\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mvalidate_operand\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m   1750\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1751\u001b[0m         raise TypeError('Can only merge Series or DataFrame objects, '\n\u001b[0;32m-> 1752\u001b[0;31m                         'a {obj} was passed'.format(obj=type(obj)))\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: Can only merge Series or DataFrame objects, a <class 'NoneType'> was passed"]}]},{"cell_type":"code","metadata":{"id":"CJ9BqYExb4lg","colab_type":"code","colab":{}},"source":["# pledge oof\n","ple_oof_df = pd.merge(ple_oof_st, ple_oof_tas, how='left', on='acc_id')[['acc_id', 'infer_survival_time', 'infer_total_amount_spent']]\n","ple_oof_df.columns = ['acc_id', 'survival_time', 'amount_spent']\n","ple_oof_df['amount_spent'] = ple_oof_df['amount_spent']/ple_oof_df['survival_time']\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8TMp7sJUb4ji","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uzn_jrmzb4hG","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"97m16yaSb4d9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VuiFrqS5b4bR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fbE7LQfhVo6J","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ihiBYZGCVo9e","colab_type":"code","colab":{}},"source":["pred_df1 = pd.concat([act_pred_st1['acc_id'], act_pred_st1.iloc[:, 1:].min(1), act_preds_tas1.iloc[:, 1:].max(1)], 1)\n","pred_df2 = pd.concat([act_pred_st2['acc_id'], act_pred_st2.iloc[:, 1:].min(1), act_preds_tas2.iloc[:, 1:].max(1)], 1)\n","pred_df2.columns = pred_df1.columns = ['acc_id', 'survival_time', 'amount_spent']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2oQ9Kndh-_8x","colab_type":"text"},"source":["# score"]},{"cell_type":"code","metadata":{"id":"fjaHUQYFYQ0O","colab_type":"code","colab":{}},"source":["# metrics\n","from scripts.metrics.score_function import score_function"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bt31exSbhKV5","colab_type":"code","colab":{}},"source":["com_oof_df.loc[com_oof_df['survival_time']>64,'survival_time'] = 64"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NW2ZcpJzYQxy","colab_type":"code","outputId":"171ad378-7938-4b93-b6d1-40951bea818e","executionInfo":{"status":"ok","timestamp":1567662243889,"user_tz":-540,"elapsed":767,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# 예측, 실제\n","score_function(train_label_raw,#pd.concat([com_oof_df[~com_oof_df['acc_id'].isin(ple_oof_df['acc_id'])], ple_oof_df]).reset_index(drop=True), \n","               train_label_raw)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["91693.76240883442\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["91693.76240883442"]},"metadata":{"tags":[]},"execution_count":168}]},{"cell_type":"markdown","metadata":{"id":"4tlTHcy1hghW","colab_type":"text"},"source":["**train 다 맞췄을 때 91693.76240883442**\n","\n","---\n","- lgb combat = 16498.748118521158\n","- lgb pledge = 16507.066565948062\n","\n","- rf combat = 7370.608382571166\n","- rf pledge = \n","\n","---\n","- 범주로 바꾸었을 때 = 90594.49903474303"]},{"cell_type":"code","metadata":{"id":"2ZvMkTF12bVj","colab_type":"code","outputId":"d17b2121-c22a-47fe-d039-d50f41ef0eaf","executionInfo":{"status":"ok","timestamp":1567661978773,"user_tz":-540,"elapsed":783,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["lab['survival_time'].value_counts()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["64    21996\n","1      3459\n","7      3023\n","28     2630\n","14     2211\n","21     2123\n","35     1530\n","56     1072\n","42      934\n","49      930\n","63       92\n","Name: survival_time, dtype: int64"]},"metadata":{"tags":[]},"execution_count":159}]},{"cell_type":"code","metadata":{"id":"qCkhpbIS4Uv2","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1hLe4dle3M9L","colab_type":"code","colab":{}},"source":["train_label_raw = pd.read_csv('data/train/train_label.csv')\n","train_label = pd.read_csv('data/train/train_label.csv')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3iPWH_M-78QT","colab_type":"code","outputId":"dca5da24-6c6b-4978-ca84-1565087526ad","executionInfo":{"status":"ok","timestamp":1567662069602,"user_tz":-540,"elapsed":514,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["temp = train_label.copy()\n","((temp['survival_time'])//7).value_counts()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9    22088\n","0     3459\n","1     3023\n","4     2630\n","2     2211\n","3     2123\n","5     1530\n","8     1072\n","6      934\n","7      930\n","Name: survival_time, dtype: int64"]},"metadata":{"tags":[]},"execution_count":167}]},{"cell_type":"code","metadata":{"id":"JA-MOH6l0u9j","colab_type":"code","colab":{}},"source":["def adjust_lab(df):\n","    temp = df.copy(deep=True)    \n","    temp['survival_time'] = (((temp['survival_time'])//7))*7\n","    temp.loc[temp['survival_time']<1,'survival_time'] = 1\n","    temp.loc[df['survival_time']==64,'survival_time'] = 64\n","\n","    return temp.copy(deep=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HymTioBh4enJ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iWoZ6bel4ef0","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"05W_VYj40Z5u","colab_type":"code","outputId":"bf8e57a0-0648-416e-c9bc-9b5bde483dad","executionInfo":{"status":"ok","timestamp":1567661963302,"user_tz":-540,"elapsed":963,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":301}},"source":["lab = adjust_lab(train_label)\n","sns.distplot(lab['survival_time'])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fbd7ebe4cc0>"]},"metadata":{"tags":[]},"execution_count":157},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"0HDD9Qtp5f6b","colab_type":"code","outputId":"cdc6d14f-8818-40d1-b717-58e4350c749c","executionInfo":{"status":"ok","timestamp":1567661550577,"user_tz":-540,"elapsed":462,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["lab['survival_time'].value_counts()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["63    22088\n","1      3459\n","7      3023\n","28     2630\n","14     2211\n","21     2123\n","35     1530\n","56     1072\n","42      934\n","49      930\n","Name: survival_time, dtype: int64"]},"metadata":{"tags":[]},"execution_count":143}]},{"cell_type":"code","metadata":{"id":"3-NgM5gQ2Ube","colab_type":"code","outputId":"888d3d41-9959-4413-eb83-aad20356716b","executionInfo":{"status":"ok","timestamp":1567661869644,"user_tz":-540,"elapsed":590,"user":{"displayName":"배지원","photoUrl":"","userId":"18394666524337924417"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["lab['survival_time'].value_counts()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["64    21996\n","1      3459\n","7      3023\n","28     2630\n","14     2211\n","21     2123\n","35     1530\n","56     1072\n","42      934\n","49      930\n","63       92\n","Name: survival_time, dtype: int64"]},"metadata":{"tags":[]},"execution_count":152}]},{"cell_type":"markdown","metadata":{"id":"w8S3u2N2-kMH","colab_type":"text"},"source":["# submission"]},{"cell_type":"code","metadata":{"id":"RxkCaXrN-kI1","colab_type":"code","colab":{}},"source":["pred_df1.to_csv('/content/test1_predict.csv', index=False)\n","pred_df2.to_csv('/content/test2_predict.csv', index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VAXA9yRoCNwE","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}